{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            if stack:\n                stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            depth -= 1\n            result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return (sum(numbers), product)"}
{"task_id": "HumanEval/9", "completion": "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n    return max_list"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(min(len(a), len(b))):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = [num_map[num] for num in numbers.split()]\n    nums.sort()\n    return ' '.join([str(num_map[num]) for num in nums])"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Find x such that poly(x) = 0.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0:\n        return \"Polynomial should have even number of coefficients\"\n    \n    if xs[-1] == 0:\n        return \"Largest coefficient should be non zero\"\n    \n    # Using binary search to find zero\n    left, right = -100, 100\n    while left < right:\n        mid = (left + right) / 2\n        if poly(xs, mid) > 0:\n            left = mid + 0.0001\n        else:\n            right = mid - 0.0001\n    return round(left, 2)"}
{"task_id": "HumanEval/33", "completion": "    l' = [l[i] if i % 3 != 0 else sorted([l[i], l[i+1], l[i+2]])[1] for i in range(len(l))]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if len(l) == 0:\n        return None\n    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0):\n            if (str(i).count('7') > 0):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l' = l[:]\n    for i in range(0, len(l'), 2):\n        l'[i] = sorted(l[i])\n    return l'"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 2, 3\n    count = 0\n    while True:\n        if is_prime(b) and b == a + b:\n            count += 1\n            if count == n:\n                return b\n        a, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [i + 1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return \"\".join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 0, 1\n    for _ in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    while y != 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    return list(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            n = n // i\n    if n > 2:\n        return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [xs[i] * i for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(2, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[1])\n    total_fruits = apples + oranges\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1]:\n        return sum(q) <= w\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, a // i):\n                if a % (i * j) == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    root = int(a ** (1 / 3))\n    return root * root * root == a"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = \"0123456789ABCDEF\"\n    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for digit in num:\n        if hex_digits.index(digit) in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return starts_one_ends(n-1) + starts_one_ends(n-2)"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while N:\n        sum += N % 2\n        N = N // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda tup: (tup[0], -tup[1]))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            result += new_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i].lower() == \"i\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x + y == z) or (x + z == y) or (y + z == x):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += chr(ord(char) + 26)\n            elif char.isupper():\n                encoded_message += chr(ord(char) + 26)\n            else:\n                if char in vowels:\n                    encoded_message += chr(ord(char) + 2)\n                else:\n                    encoded_message += char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if isPrime(num) and num > max_prime:\n            max_prime = num\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i)\n        else:\n            pile.append(i+1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "    unique_nums = set()\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            unique_nums.add(num)\n    return sorted(unique_nums)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef reverse_and_replace(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num))\n    return [name for name in reversed(result)]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n    for num in lst2:\n        if num % 2 == 0:\n            even_count -= 1\n    return \"YES\" if even_count == 0 else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    for char in test:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    max_count = max(count.values())\n    return {k: v for k, v in count.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "    for char in c:\n        s = s.replace(char,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows, cols = len(grid), len(grid[0])\n    max_water = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_water = max(max_water, min(i, rows - i - 1, j, cols - j - 1))\n    return math.ceil(max_water / capacity)"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    last_consonant = -1\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels:\n            last_consonant = i\n            break\n    if last_consonant == -1:\n        return \"\"\n    for i in range(last_consonant + 1, len(word)):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return sorted([x for x in collatz_sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if year < 1 or year > 9999:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start > end:\n        return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sum_magnitude = 0\n    for num in arr:\n        product *= 1 if num > 0 else -1 if num < 0 else 0\n        sum_magnitude += abs(num) * product\n    return sum_magnitude"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        if x < 0 or x >= n or y < 0 or y >= m:\n            return None\n        if grid[x][y] == -1:\n            return None\n        if grid[x][y] == k:\n            return path + [grid[x][y]]\n        \n        res = None\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            new_path = dfs(x + dx, y + dy, k - 1, path + [grid[x][y]])\n            if new_path is not None:\n                res = new_path\n                break\n        \n        return res\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == k:\n                return dfs(i, j, k, [])\n    \n    return []"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        a, b, c = 1, 3, 2\n        for i in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return [1] + [d] * (n + 1)"}
{"task_id": "HumanEval/131", "completion": "    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 0\n    return n % 10 * digits(n // 10)"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    lst = [int(x) for x in lst]\n    return sum(x*x for x in lst)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if last_char in [' ', '.', '!', '?']:\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n    if not neg_integers or not pos_integers:\n        return (None, None)\n    else:\n        return (max(neg_integers), min(pos_integers))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) != type(b):\n        return None\n    if type(a) == int:\n        return a if a > b else b\n    if type(a) == float:\n        return a if a > b else b\n    if type(a) == str:\n        return a if a > b else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    if n < 4:\n        return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(' ', '_')"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts[0]) > 3 or len(parts[1]) > 3:\n        return 'No'\n    if not parts[0].isalpha() or not parts[1].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return x_num * n_den == x_den * n_num"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    return (count[0] * (count[0] - 1) * (count[0] - 2)) // 6 + (count[1] * (count[1] - 1) * (count[1] - 2)) // 6 + (count[2] * (count[2] - 1) * (count[2] - 2)) // 6"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))\n\ndef list_sort(lst):\n    return sorted_list_sum(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return \"n should be greater than 1\"\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    def strength(extension):\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        return cap - sm\n    \n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    if eaten <= remaining:\n        return [eaten, remaining - eaten]\n    else:\n        return [eaten, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '/':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            if stack:\n                stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    return result[:-1]"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            depth = len(stack)\n            max_depth = max(max_depth, depth)\n            stack.pop()\n    return [max_depth] * len(paren_string.split())"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    \n    return (sum_numbers, product_numbers)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(min(len(a), len(b))):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = [num_dict[num] for num in numbers.split()]\n    nums.sort()\n    return ' '.join([str(num_dict[num]) for num in nums])"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero of polynomial with coefficients xs.\n    Returns only the zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or max(xs) == 0:\n        return \"Invalid input\"\n    \n    # Find the zero point using bisection method\n    a, b = -1000, 1000\n    while b - a > 0.00001:\n        c = (a + b) / 2\n        if poly(xs, c) > 0:\n            a = c\n        else:\n            b = c\n    return round(c, 2)"}
{"task_id": "HumanEval/33", "completion": "    l' = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l' += [l[i]]\n        else:\n            l' += [sorted([l[i]])[0]]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 2, 3\n    count = 0\n    while True:\n        if is_prime(b) and b == a + b:\n            count += 1\n            if count == n:\n                return b\n        a, b = b, a + b\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [i + 1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n = n // 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [xs[i] * i for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a+b+b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift = shift % len(num_str)\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split(' and '))\n    total_fruits = apples + oranges\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, a):\n                if a % j == 0:\n                    for k in range(2, a):\n                        if a % k == 0:\n                            if i * j * k == a:\n                                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    root = int(a ** (1/3))\n    return root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = \"0123456789ABCDEF\"\n    prime_count = 0\n    for digit in num:\n        if digit in hex_digits:\n            if digit == '2' or digit == '3' or digit == '5' or digit == '7':\n                prime_count += 1\n            elif digit == 'B' or digit == 'D':\n                prime_count += 1\n    return prime_count"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    return starts_one_ends(n-1) + ends_one_ends(n-1)"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while (N > 0):\n        sum += N % 2\n        N = N // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            new_char = chr(((ord(char) - ord('a')) * 2) % 26 + ord('a'))\n            result += new_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    words = S.split()\n    for word in words:\n        if word.lower() == \"i\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x + y == z) or (x + z == y) or (y + z == x):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += chr(ord(char) + 26)\n            else:\n                encoded_message += chr(ord(char) - 26)\n        elif char in vowels:\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if isPrime(num) and num > max_prime:\n            max_prime = num\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower() or key.isupper():\n            continue\n        else:\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i+1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0:\n        x += 1\n    if y % 2 != 0:\n        y -= 1\n    if x > y:\n        return -1\n    return x"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(round(avg))"}
{"task_id": "HumanEval/104", "completion": "    unique_nums = set()\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            unique_nums.add(num)\n    return sorted(unique_nums)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef reverse_array(arr):\n    return arr[::-1]\n\ndef replace_with_names(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[num-1] for num in arr]"}
{"task_id": "HumanEval/106", "completion": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum_of_numbers(i))\n    return res\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef sum_of_numbers(n):\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    return \"YES\" if odd_count == 0 else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    \n    count = {}\n    for char in test:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    max_count = max(count.values())\n    result = {key: value for key, value in count.items() if value == max_count}\n    return result"}
{"task_id": "HumanEval/112", "completion": "    for char in c:\n        s = s.replace(char,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    max_water = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_water = max(max_water, min(i, rows - i - 1) * min(j, cols - j - 1) * capacity)\n    return max_water"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels and word[i + 1] in vowels:\n            return word[i + 1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    sequence = [n]\n    while sequence[-1] != 1:\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence[-1] // 2)\n        else:\n            sequence.append(sequence[-1] * 3 + 1)\n    return [x for x in sequence if x % 2 != 0]"}
{"task_id": "HumanEval/124", "completion": "    if date.strip() == '':\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words\n\n\ndef count_odd_lowercase_letters(txt):\n    count = 0\n    for char in txt:\n        if char.islower() and ord(char) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start > end:\n        return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= 1 if num >= 0 else -1 if num < 0 else 0\n    return sum(abs(num) * product for num in arr)"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    ans = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                ans.append(grid[i][j])\n                if len(ans) == k:\n                    return ans\n                for x, y in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                    x1, y1 = i + x, j + y\n                    if 0 <= x1 < n and 0 <= y1 < m and grid[x1][y1] == 1:\n                        ans.append(grid[x1][y1])\n                        if len(ans) == k:\n                            return ans\n                        ans.pop()\n    return ans"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        a, b, c = 1, 3, 2\n        for i in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 0\n    return n % 10 * digits(n // 10)"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    return sum(int(x)**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isspace():\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n    if not neg_integers or not pos_integers:\n        return (None, None)\n    else:\n        return (max(neg_integers), min(pos_integers))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return None\n    elif type(a) == int:\n        return max(a, b)\n    elif type(a) == float:\n        return max(a, b)\n    elif type(a) == str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        return max(float(a), float(b))"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    for i in range(1, n // 2 + 1):\n        if i % 2 != 0:\n            continue\n        for j in range(i, n // 2 + 1):\n            if j % 2 != 0:\n                continue\n            for k in range(j, n // 2 + 1):\n                if k % 2 != 0:\n                    continue\n                if i + j + k == n:\n                    return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\")"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3:\n        return \"No\"\n    if file_name.count('.') != 1:\n        return \"No\"\n    parts = file_name.split('.')\n    if len(parts[0]) == 0 or not parts[0][0].isalpha():\n        return \"No\"\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return x_num * n_den == x_den * n_num"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    return count[0] * (count[0] - 1) // 2 + count[1] * count[2]"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    return tuple(planets[start_index+1:end_index])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))\n\ndef list_sort(lst):\n    return sorted_list_sum(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return x\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    strengths = []\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        strengths.append((class_name, extension, strength))\n    strengths.sort(key=lambda x: (-x[2], extensions.index(x[1])))\n    return strengths[0][1]"}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    left = remaining - eaten\n    return [eaten, left]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operand)):\n        stack.append(operand[i])\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack[-1] += stack.pop()\n        elif operator[i] == '-':\n            stack[-1] -= stack.pop()\n        elif operator[i] == '*':\n            stack[-1] *= stack.pop()\n        elif operator[i] == '/':\n            stack[-1] //= stack.pop()\n        elif operator[i] == '**':\n            stack[-1] **= stack.pop()\n    return stack[0]"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            if stack:\n                stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    return result[:-1]"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            depth -= 1\n            result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for num in numbers:\n        product_of_numbers *= num\n    \n    return (sum_of_numbers, product_of_numbers)"}
{"task_id": "HumanEval/9", "completion": "    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return \"\"\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = [num_dict[num] for num in numbers.split()]\n    nums.sort()\n    return ' '.join([str(num_dict[num]) for num in nums])"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds x such that poly(x) = 0.\n    Returns only one zero point, even if there are many.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0:\n        return \"Invalid input: xs should have even number of coefficients\"\n    \n    # Find the largest non zero coefficient\n    largest_non_zero = max(x for x in xs if x != 0)\n    \n    # Find the zero point using the formula for a quadratic equation\n    a = xs[0]\n    b = xs[1]\n    c = xs[2]\n    \n    # Calculate the discriminant\n    discriminant = b * b - 4 * a * c\n    \n    # Check if the discriminant is negative\n    if discriminant < 0:\n        return \"No real solutions\"\n    \n    # Calculate the roots\n    root1 = (-b + math.sqrt(discriminant)) / (2 * a)\n    root2 = (-b - math.sqrt(discriminant)) / (2 * a)\n    \n    # Return the zero point\n    return max(root1, root2)"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    for i in range(n):\n        if i % 3 == 0:\n            l[i] = sorted(l[i])\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 2, 3\n    count = 0\n    while count < n:\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b\n        a, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a+b+c+d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n = n // 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [xs[i] * i for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(2, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[1])\n    total_fruits = apples + oranges\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_even = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            min_index = i\n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, i):\n                if i % j == 0:\n                    for k in range(2, i):\n                        if i % k == 0:\n                            if i * j * k == a:\n                                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return True\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = \"0123456789ABCDEF\"\n    prime_count = 0\n    for digit in num:\n        if digit in hex_digits:\n            decimal_val = int(digit, 16)\n            if decimal_val < 2:\n                continue\n            for i in range(2, int(decimal_val ** 0.5) + 1):\n                if decimal_val % i == 0:\n                    break\n            else:\n                prime_count += 1\n    return prime_count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    return 10**(n-1) + 10**(n-2)"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N = N // 2\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda tup: (tup[0], -tup[1]))"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n            result += shifted\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for word in words:\n        if word.startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x + y == z) or (x + z == y) or (y + z == x):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += chr(ord(char) + 26)\n            elif char.isupper():\n                encoded_message += chr(ord(char) + 26)\n            else:\n                if char in vowels:\n                    encoded_message += chr(ord(char) + 2)\n                else:\n                    encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i)\n        else:\n            pile.append(i+1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = (n + m) / 2\n    return bin(round(average))"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        while n:\n            if n % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    \n    unique_nums = set()\n    for num in x:\n        if not has_even_digit(num):\n            unique_nums.add(num)\n    return sorted(list(unique_nums))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef reverse_and_replace(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num))\n    result.reverse()\n    return [str(num) for num in range(1, 10)]"}
{"task_id": "HumanEval/106", "completion": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum(range(1, i+1)))\n    return res\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            if lst2[i] % 2 != 0:\n                return \"NO\"\n            else:\n                lst1[i] = lst2[i]\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    \n    count = {}\n    for char in test.split():\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    max_count = max(count.values())\n    result = {k: v for k, v in count.items() if v == max_count}\n    return result"}
{"task_id": "HumanEval/112", "completion": "    for char in c:\n        s = s.replace(char,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows, cols = len(grid), len(grid[0])\n    max_water = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_water = max(max_water, min(i, rows - i) * min(j, cols - j) * capacity)\n    return max_water"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return sorted([x for x in collatz_sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    if date == '':\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if year < 1:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    else:\n        return [i for i in txt if i.islower() and ord(i) % 2 != 0]"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start\n    if intersection_length < 0:\n        return \"NO\"\n    if intersection_length == 0:\n        return \"NO\"\n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sign_count = 0\n    for num in arr:\n        if num == 0:\n            product *= 1\n            sign_count += 1\n        elif num > 0:\n            product *= 1\n            sign_count += 1\n        else:\n            product *= -1\n            sign_count += 1\n    return sum(abs(num) * product for num in arr)"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        if x < 0 or x >= n or y < 0 or y >= m:\n            return None\n        if grid[x][y] == 0:\n            return None\n        \n        path.append(grid[x][y])\n        res = None\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            res = dfs(x + dx, y + dy, k - 1, path)\n            if res:\n                return res\n        path.pop()\n        return None\n    \n    for i in range(n):\n        for j in range(m):\n            res = dfs(i, j, k, [])\n            if res:\n                return res\n    return []"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    elif n == 2:\n        return [3, 1, 2]\n    else:\n        a, b, c = 3, 1, 2\n        for i in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return [3, 1, 2] + [d]"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    return sum(int(x)**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        return last_char not in \" \"\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] <= arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_nums = [x for x in lst if x < 0]\n    pos_nums = [x for x in lst if x > 0]\n    if not neg_nums or not pos_nums:\n        return (None, None)\n    else:\n        return (max(neg_nums), min(pos_nums))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return None\n    elif type(a) == int:\n        return a if a > b else b\n    elif type(a) == float:\n        return a if a > b else b\n    elif type(a) == str:\n        a = float(a.replace(',', ''))\n        b = float(b.replace(',', ''))\n        return a if a > b else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return (n // 2) % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3:\n        return \"No\"\n    if '.' not in file_name:\n        return \"No\"\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return \"No\"\n    if not parts[0]:\n        return \"No\"\n    if not parts[1].lower() in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return x_num * n_den == x_den * n_num"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    return count[0] * (count[0] - 1) // 2 + count[1] * count[2]"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))\n\ndef list_sort(lst):\n    return sorted_list_sum(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares"}
{"task_id": "HumanEval/152", "completion": "    return [abs(guess[i]-game[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        strength = extension.count('A') - extension.count('a')\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    if eaten <= remaining:\n        return [eaten, remaining - eaten]\n    else:\n        return [eaten, 0]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for op in operator:\n        if op == '+':\n            stack.append(operand.pop(0) + operand.pop(0))\n        elif op == '-':\n            stack.append(operand.pop(0) - operand.pop(0))\n        elif op == '*':\n            stack.append(operand.pop(0) * operand.pop(0))\n        elif op == '/':\n            stack.append(operand.pop(0) // operand.pop(0))\n        elif op == '**':\n            stack.append(operand.pop(0) ** operand.pop(0))\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            if stack:\n                stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    return result[:-1]"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            max_depth += 1\n        elif char == ')':\n            if stack:\n                stack.pop()\n                max_depth -= 1\n            result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return (sum(numbers), product)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(num, max_so_far)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    numbers = list(numbers.split())\n    numbers.sort(key=lambda x: int(x))\n    return ' '.join(numbers)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds x such that poly(x) = 0.\n    Returns only the zero point, even if there are many.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or max(xs) < 0:\n        return \"Invalid input: xs should have even number of coefficients and largest non zero coefficient\"\n    \n    # Using Newton's method to find the zero point\n    x = 0\n    while True:\n        if poly(xs, x) == 0:\n            return x\n        x -= poly(xs, x) / xs[n-1]"}
{"task_id": "HumanEval/33", "completion": "    l' = [l[i] if i % 3 != 0 else sorted([l[i], l[i+1], l[i+2]]) for i in range(len(l))]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l' = l[:]\n    for i in range(0, len(l'), 2):\n        l'[i] = sorted(l[i])\n    return l'"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 2, 3\n    while True:\n        if is_prime(b) and b == a + b:\n            return b\n        a, b = b, a + b\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return \"\".join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 0, 0\n    for _ in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n = n // 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    \n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [xs[i] * (n - i) for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(3, n+1):\n            a, b = b, a+b+b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[1])\n    total_fruits = apples + oranges\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(i, a):\n                if a % j == 0:\n                    for k in range(j, a):\n                        if a % k == 0 and i * j * k == a:\n                            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    root = int(a ** (1 / 3))\n    return root * root * root == a"}
{"task_id": "HumanEval/78", "completion": "    count = 0\n    for i in range(len(num)):\n        if num[i] in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 10\n    return 9 * starts_one_ends(n-1)"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while N:\n        sum += N % 2\n        N //= 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda tup: (tup[0], -tup[1]))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            new_char = chr(((ord(char) - 97 - 2) % 26) + 97)\n            result += new_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    words = S.split()\n    for word in words:\n        if word.lower() == \"i\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += chr(ord(char) + 26)\n            elif char.isupper():\n                encoded_message += chr(ord(char) + 26)\n            elif char in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = -1\n    for num in lst:\n        if isPrime(num) and num > largest_prime:\n            largest_prime = num\n\n    if largest_prime == -1:\n        return 0\n\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    first_key = dict[list(dict.keys())[0]]\n    return all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys())"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5)"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i)\n        else:\n            pile.append(i+1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "    unique_nums = set()\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            unique_nums.add(num)\n    return sorted(list(unique_nums))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef replace_with_names(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[int(str(x)[0])-1] for x in arr]\n\ndef sortAndReplace(arr):\n    return replace_with_names(by_length(arr))"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n    for num in lst2:\n        if num % 2 == 0:\n            even_count -= 1\n    return \"YES\" if even_count == 0 else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    \n    count = {}\n    for char in test.split():\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    max_count = max(count.values())\n    return {key: value for key, value in count.items() if value == max_count}"}
{"task_id": "HumanEval/112", "completion": "    for i in c:\n        s = s.replace(i,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    bucket_capacity = capacity\n    buckets = [0] * rows\n    max_fill_count = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                buckets[i] += 1\n    for i in range(rows):\n        max_fill_count = max(max_fill_count, math.ceil(buckets[i] / bucket_capacity))\n    return max_fill_count"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou') == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 != 0:\n            result.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if year < 1:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words\n\n\ndef count_odd_letters(txt):\n    count = 0\n    for char in txt:\n        if char.islower() and ord(char) % 2 != 0:\n            count += 1\n    return count\n\n\ndef split_and_count_odd_letters(txt):\n    words = split_words(txt)\n    count = 0\n    for word in words:\n        count += count_odd_letters(word)\n    return count"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start\n    if intersection_length < 0:\n        return \"NO\"\n    elif intersection_length == 0:\n        return \"NO\"\n    elif intersection_length == 1:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= 1 if num > 0 else -1 if num < 0 else 0\n    return sum(abs(num) * product for num in arr)"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        if x < 0 or x >= n or y < 0 or y >= m:\n            return None\n        if grid[x][y] == 0:\n            return None\n        \n        path.append(grid[x][y])\n        \n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            new_path = dfs(x + dx, y + dy, k - 1, path)\n            if new_path is not None:\n                return new_path\n        \n        path.pop()\n        return None\n    \n    result = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] != 0:\n                result = dfs(i, j, k, [])\n                if result is not None:\n                    return result\n    return []"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_sequence = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_sequence.append(tri_sequence[i - 1] + tri_sequence[i - 2] + tri_sequence[i - 3])\n            else:\n                tri_sequence.append(tri_sequence[i - 1] + tri_sequence[i - 2] + tri_sequence[i - 3])\n        return tri_sequence"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    return sum([int(x)**2 for x in lst])"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isspace():\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n    if not neg_integers or not pos_integers:\n        return (None, None)\n    else:\n        return (max(neg_integers), min(pos_integers))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return None\n    elif type(a) == int:\n        return a if a > b else b\n    elif type(a) == float:\n        return a if a > b else b\n    elif type(a) == str:\n        return a if float(a) > float(b) else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    if n <= 4:\n        return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\")"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name.split('.')[0]:\n        return 'No'\n    if not file_name.split('.')[1] in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return x_num * n_den == n_num * x_den"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    return count[0] * (count[0] - 1) * (count[0] - 2) // 6 + count[1] * count[2] * count[0]"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    return tuple(planets[start_index+1:end_index])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(filter(lambda x: len(x) % 2 == 0, lst))"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "    return [abs(guess[i] - game[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = ''\n    for extension in extensions:\n        strength = extension.count('A') - extension.count('a')\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    if eaten <= remaining:\n        return [eaten, remaining - eaten]\n    else:\n        return [eaten, 0]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operand)):\n        stack.append(operand[i])\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack[i] = stack[i] + stack.pop()\n        elif operator[i] == '-':\n            stack[i] = stack[i] - stack.pop()\n        elif operator[i] == '*':\n            stack[i] = stack[i] * stack.pop()\n        elif operator[i] == '/':\n            stack[i] = stack[i] // stack.pop()\n        elif operator[i] == '**':\n            stack[i] = stack[i] ** stack.pop()\n    return stack[0]"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            if stack:\n                stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            depth -= 1\n            result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    return (total_sum, total_product)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n    return result"}
{"task_id": "HumanEval/10", "completion": "    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(min(len(a), len(b))):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = [num_dict[num] for num in numbers.split()]\n    nums.sort()\n    return ' '.join([str(num_dict[num]) for num in nums])"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds a zero of the polynomial with coefficients xs.\n    Returns the zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        return \"Invalid input\"\n    \n    # Using Newton's method to find a zero\n    x = 0\n    while True:\n        if poly(xs, x) == 0:\n            return x\n        x -= poly(xs, x) / xs[-1]"}
{"task_id": "HumanEval/33", "completion": "    l' = [l[i] if i % 3 != 0 else sorted([l[i], l[i+1], l[i+2]]) for i in range(len(l))]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0):\n            if (str(i).count('7') > 0):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 2, 3\n    count = 0\n    while True:\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b\n        a, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return \"\".join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [xs[i] * (n - i) for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(2, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split(' and '))\n    total_fruits = apples + oranges\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, a // i):\n                if a % (i * j) == 0:\n                    for k in range(2, a // (i * j)):\n                        if a % (i * j * k) == 0:\n                            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    count = 0\n    for i in range(len(num)):\n        if num[i] in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    return 10 ** (n - 1) + 10 ** (n - 2)"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while (N > 0):\n        sum += N % 2\n        N = N // 2\n    return str(sum)"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda tup: (tup[0], -tup[1]))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - 97 - 2) % 26) + 97)\n            result += shifted\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    second_smallest = float('inf')\n    for num in lst:\n        if num != smallest and num < second_smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i].startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += chr(ord(char) + 26)\n            else:\n                result += chr(ord(char) - 26)\n        elif char.lower() in 'aeiou':\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    return sum_of_digits(largest_prime)"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    first_key = dict.keys()[0]\n    return all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys())"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i)\n        else:\n            pile.append(i+1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(round(avg))"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef reverse_and_replace(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num)[::-1])\n    return result\n\ndef replace_with_names(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num) + \" \" + \"One\" if num == 1 else str(num) + \" \" + \"Two\" if num == 2 else str(num) + \" \" + \"Three\" if num == 3 else str(num) + \" \" + \"Four\" if num == 4 else str(num) + \" \" + \"Five\" if num == 5 else str(num) + \" \" + \"Six\" if num == 6 else str(num) + \" \" + \"Seven\" if num == 7 else str(num) + \" \" + \"Eight\" if num == 8 else str(num) + \" \" + \"Nine\")\n    return result"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef sum_of_numbers(n):\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n    for num in lst2:\n        if num % 2 == 0:\n            even_count -= 1\n    return \"YES\" if even_count == 0 else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    for char in test:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    max_count = max(count.values())\n    return {key: value for key, value in count.items() if value == max_count}"}
{"task_id": "HumanEval/112", "completion": "    for ch in c:\n        s = s.replace(ch,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    max_fill = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_fill += math.ceil((capacity - 1) / 2)\n    return max_fill"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for char in word:\n            if char.isalpha() and char.lower() not in ['a', 'e', 'i', 'o', 'u']:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels and word[i + 1] in vowels:\n            return word[i + 1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    return sorted([x for x in collatz_sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    if date:\n        try:\n            month, day, year = map(int, date.split('-'))\n            if month < 1 or month > 12:\n                return False\n            if day < 1 or day > 31:\n                return False\n            if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n                return False\n            if month in [4, 6, 9, 11] and day < 1 or day > 30:\n                return False\n            if month == 2 and day < 1 or day > 29:\n                return False\n            return True\n        except ValueError:\n            return False\n    return False"}
{"task_id": "HumanEval/125", "completion": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return len([c for c in txt if c.islower() and ord(c) % 2 != 0])"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start > end:\n        return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sign_product = 1\n    for num in arr:\n        product *= abs(num)\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n    return product * sign_product"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == -1:\n            return None\n        path.append(grid[x][y])\n        res = None\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            res = dfs(x + dx, y + dy, k - 1, path)\n            if res:\n                return res\n        path.pop()\n        return None\n    \n    res = []\n    for i in range(n):\n        for j in range(m):\n            res = dfs(i, j, k, [])\n            if res:\n                return res\n    return []"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(tri_list[i // 2] + tri_list[i // 2 - 1] + tri_list[i // 2])\n            else:\n                tri_list.append(tri_list[i // 2] + tri_list[i // 2 - 1] + tri_list[i // 2 + 1])\n        return tri_list"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    return sum(int(round(x))**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        return not last_char.isupper() and not last_char.islower()\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n    if not neg_nums or not pos_nums:\n        return (None, None)\n    else:\n        return (max(neg_nums), min(pos_nums))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return None\n    elif type(a) == int:\n        return max(a, b)\n    elif type(a) == float:\n        return max(a, b)\n    elif type(a) == str:\n        return max(a, b)"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return (n // 2) % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(' ', '_').replace('  ', '-')"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts[0]) > 3 or len(parts[1]) > 3:\n        return 'No'\n    if not parts[0].isalpha() or not parts[1].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if (i % 3 == 0) and (i % 4 != 0):\n            total += lst[i] ** 2\n        elif (i % 4 == 0) and (i % 3 != 0):\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    if x_den == n_den:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    return (count[0] * (count[0] - 1) * (count[0] - 2)) // 6 + (count[1] * count[2] * count[0]) + (count[1] * (count[1] - 1) * (count[1] - 2)) // 6 + (count[2] * (count[2] - 1) * (count[2] - 2)) // 6"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))\n\ndef list_sort(lst):\n    return sorted_list_sum(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "    return [abs(game[i]-guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        strength = extension.count('A') - extension.count('a')\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total = number + need\n    if total > remaining:\n        return [total, 0]\n    else:\n        return [total, remaining - total]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for op in operator:\n        if op == '+':\n            stack.append(operand.pop(0) + operand.pop(0))\n        elif op == '-':\n            stack.append(operand.pop(0) - operand.pop(0))\n        elif op == '*':\n            stack.append(operand.pop(0) * operand.pop(0))\n        elif op == '/':\n            stack.append(operand.pop(0) // operand.pop(0))\n        elif op == '**':\n            stack.append(operand.pop(0) ** operand.pop(0))\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    return result[:-1]"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            depth -= 1\n            result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for num in numbers:\n        product_of_numbers *= num\n    \n    return (sum_of_numbers, product_of_numbers)"}
{"task_id": "HumanEval/9", "completion": "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n    return max_list"}
{"task_id": "HumanEval/10", "completion": "    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = [num_map[num] for num in numbers.split()]\n    nums.sort()\n    return ' '.join([str(num_map[num]) for num in nums])"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds x such that poly(x) = 0.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or max(xs) == 0:\n        return \"Invalid input: xs should have even number of coefficients and largest non zero coefficient\"\n    \n    # Using Newton's method to find a zero\n    x = 0\n    while True:\n        fx = poly(xs, x)\n        if fx == 0:\n            return x\n        dfx = poly([-coeff for coeff in xs], x)\n        x -= fx / dfx"}
{"task_id": "HumanEval/33", "completion": "    l' = [l[i] if i % 3 != 0 else sorted([l[i], l[i+1], l[i+2]])[1] for i in range(len(l))]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l' = l[:]\n    for i in range(0, len(l) - 1, 2):\n        l'[i] = min(l[i], l[i + 1])\n    return l'"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 2, 3\n    while True:\n        if is_prime(b):\n            if b == n:\n                return b\n            a, b = b, a + b\n        else:\n            a, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [i + 1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    a, b, c, d = 0, 0, 1, 1\n    for _ in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i:\n            i += 2\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [xs[i] * i for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[1])\n    total_fruits = apples + oranges\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(lst[i])\n        else:\n            result.insert(0, lst[i])\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, a // i):\n                if a % (i * j) == 0:\n                    for k in range(2, a // (i * j)):\n                        if a % (i * j * k) == 0:\n                            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    count = 0\n    for digit in num:\n        if digit.isdigit():\n            if int(digit) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:\n                count += 1\n        elif digit.isupper():\n            if int(digit, 16) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:\n                count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    return starts_one_ends(n-1) + ends_one_ends(n-1)"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while (N > 0):\n        sum += N % 2\n        N = N // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda tup: (tup[0], -tup[1]))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n            result += shifted\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    second_smallest = min(lst)\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for word in words:\n        if word.lower() == 'i':\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += chr(ord(char) + 26)\n            else:\n                result += chr(ord(char) - 26)\n        elif char in \"aeiouAEIOU\":\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    if largest_prime == -1:\n        return 0\n\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5)"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i)\n        else:\n            pile.append(i+1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(round(avg))"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        while n:\n            if n % 2 == 0:\n                return True\n            n //= 10\n        return False\n\n    unique_nums = set()\n    for num in x:\n        if not has_even_digit(num):\n            unique_nums.add(num)\n    return sorted(list(unique_nums))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef reverse_and_replace(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num)[::-1])\n    return result\n\ndef replace_with_names(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num) + \" \" + \"One\" * num)\n    return result"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    return \"YES\" if even_count == len(lst1) or odd_count == len(lst1) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    \n    count = {}\n    for char in test.split():\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    max_count = max(count.values())\n    return {k: v for k, v in count.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "    for char in c:\n        s = s.replace(char,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    bucket_capacity = capacity\n    buckets = [0] * rows\n    max_water = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                buckets[i] += 1\n                max_water += 1\n    return max_water"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    def is_consonant(c):\n        return c.isalpha() and c.lower() not in ['a', 'e', 'i', 'o', 'u']\n    \n    words = s.split()\n    result = []\n    for word in words:\n        count = sum(1 for c in word if is_consonant(c))\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels and word[i + 1] in vowels:\n            return word[i + 1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    return sorted([x for x in collatz_sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    if date.strip() == \"\":\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if year < 1000 or year > 3000:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if c.islower() and ord(c) % 2 != 0])"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start > end:\n        return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num\n    sign = 1 if product > 0 else -1 if product < 0 else 0\n    return sum(abs(num) * sign for num in arr)"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        if x < 0 or x >= n or y < 0 or y >= m:\n            return None\n        if grid[x][y] == 0:\n            return None\n        \n        path.append(grid[x][y])\n        res = None\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_path = dfs(x + dx, y + dy, k - 1, path[:])\n            if new_path is not None:\n                res = new_path\n        \n        return res\n    \n    res = None\n    for i in range(n):\n        for j in range(m):\n            path = dfs(i, j, k, [])\n            if path is not None and (res is None or path < res):\n                res = path\n    \n    return res"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        a, b, c = 1, 3, 2\n        for i in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return [1] + [d] * (n - 1)"}
{"task_id": "HumanEval/131", "completion": "    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 0\n    return n % 10 * digits(n // 10)"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    return sum(int(x)**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    words = txt.split()\n    if last_char in words[-1]:\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_nums = [x for x in lst if x < 0]\n    pos_nums = [x for x in lst if x > 0]\n    if not neg_nums or not pos_nums:\n        return (None, None)\n    else:\n        return (max(neg_nums), min(pos_nums))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return None\n    elif type(a) == int:\n        return a if a > b else b\n    elif type(a) == float:\n        return a if a > b else b\n    elif type(a) == str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        return a if float(a) > float(b) else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return (n // 2) % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0] or not parts[1].lower() in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i] ** 3\n    return result"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    numerator = int(x) * int(n)\n    return numerator % int(n) == 0"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and num % 2 != 0 and (num // 10) % 2 != 0 and (num % 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    return count[0] * (count[0] - 1) // 2 + count[1] * count[2]"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))\n\ndef list_sort(lst):\n    return sorted_list_sum(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "    return [abs(guess[i]-game[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = ''\n    max_strength = -1\n    for extension in extensions:\n        strength = extension.count('A') - extension.count('a')\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = class_name + '.' + extension\n    return strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    if eaten > remaining:\n        eaten = remaining\n    return [eaten, remaining - eaten]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operand)):\n        stack.append(operand[i])\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack[i] = stack[i] + stack.pop()\n        elif operator[i] == '-':\n            stack[i] = stack[i] - stack.pop()\n        elif operator[i] == '*':\n            stack[i] = stack[i] * stack.pop()\n        elif operator[i] == '/':\n            stack[i] = stack[i] // stack.pop()\n        elif operator[i] == '**':\n            stack[i] = stack[i] ** stack.pop()\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    current_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n            result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for num in numbers:\n        product_of_numbers *= num\n    \n    return (sum_of_numbers, product_of_numbers)"}
{"task_id": "HumanEval/9", "completion": "    max_list = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        max_list.append(max_so_far)\n    return max_list"}
{"task_id": "HumanEval/10", "completion": "    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = [num_dict[num] for num in numbers.split()]\n    nums.sort()\n    return ' '.join([str(num_dict[num]) for num in nums])"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero of polynomial with coefficients xs.\n    Returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or max(xs) == 0:\n        return \"Invalid input\"\n    \n    # Find the root using Newton's method\n    x = 0\n    for _ in range(100):  # Maximum iterations\n        f = poly(xs, x)\n        if f == 0:\n            return x\n        f_prime = poly([1] + [0] * (n - 1), x)\n        x = x - f / f_prime\n    return \"No solution\""}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l' = [0] * n\n    for i in range(n):\n        if i % 3 != 0:\n            l'[i] = l[i]\n        else:\n            l'[i] = sorted(l[i])\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0):\n            if (str(i).count('7') > 0):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 2, 3\n    count = 0\n    while count < n:\n        if is_prime(b):\n            count += 1\n            yield b\n        a, b = b, a + b\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a+b+c+d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n = n // 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [xs[i] * (n - i) for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(2, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift = shift % len(num_str)\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[1])\n    total_fruits = int(fruits[2])\n    mangoes = total_fruits - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(lst[i])\n        else:\n            result.insert(0, lst[i])\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, a):\n                if a % j == 0:\n                    for k in range(2, a):\n                        if a % k == 0:\n                            if i * j * k == a:\n                                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = \"0123456789ABCDEF\"\n    prime_digits = \"2357\"\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 10\n    else:\n        return 10 * starts_one_ends(n-1)"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while N:\n        sum += N % 2\n        N //= 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result)"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - 97 - 2) % 26) + 97)\n            result += shifted\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i] == \"I\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_char = chr(ord(char) + 26)\n            else:\n                encoded_char = chr(ord(char) + 26)\n        elif char in vowels:\n            encoded_char = chr(ord(char) + 2)\n        else:\n            encoded_char = char\n        encoded_message += encoded_char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i+1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        while n:\n            if n % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    \n    unique_nums = set()\n    for num in x:\n        if not has_even_digit(num):\n            unique_nums.add(num)\n    return sorted(list(unique_nums))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef reverse_and_replace(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num))\n    result.reverse()\n    return [str(i) for i in range(1, 10)]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef sum_of_numbers(n):\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    return \"YES\" if even_count == len(lst1) and odd_count == len(lst2) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    count = {}\n    for char in test.split():\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    max_count = max(count.values())\n    return {k: v for k, v in count.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "    for i in c:\n        s = s.replace(i,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    bucket_capacity = capacity\n    buckets = [0] * rows\n    max_fill_count = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                buckets[i] += 1\n    for i in range(rows):\n        max_fill_count += math.ceil(buckets[i] / bucket_capacity)\n    return max_fill_count"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou') == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] not in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "    if date.strip() == '':\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if year < 1 or year > 9999:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if ord(char) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start\n    if length < 0:\n        return \"NO\"\n    if length == 0:\n        return \"NO\"\n    if length < 2:\n        return \"NO\"\n    for i in range(2, length):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sign_product = 1\n    for num in arr:\n        product *= num\n        sign_product *= 1 if num > 0 else -1 if num < 0 else 0\n    return abs(product) * sign_product"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == -1:\n            return float('inf')\n        if grid[x][y] == k:\n            return path + [grid[x][y]]\n        \n        res = float('inf')\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            res = min(res, dfs(x + dx, y + dy, k - 1, path + [grid[x][y]]))\n        \n        grid[x][y] = -1\n        return res\n    \n    res = float('inf')\n    for i in range(n):\n        for j in range(m):\n            res = min(res, dfs(i, j, k, []))\n    \n    return res"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2]\n    else:\n        a, b, c = 1, 3, 2\n        for i in range(4, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 0\n    return n % 10 * digits(n // 10)"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    lst = [int(x) for x in lst]\n    lst = [x**2 for x in lst]\n    return sum(lst)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isspace():\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n    if not neg_nums or not pos_nums:\n        return (None, None)\n    return (max(neg_nums), min(pos_nums))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return None\n    elif type(a) == int:\n        return a if a > b else b\n    elif type(a) == float:\n        return a if a > b else b\n    elif type(a) == str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        return a if float(a) > float(b) else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    if n <= 4:\n        return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\")"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts[0]) > 3 or not parts[0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return x_num * n_den == x_den * n_num"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    return (count[0] * (count[0] - 1) * (count[0] - 2)) // 6 + (count[1] * count[2])"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return x\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    odd_numbers = [x for x in lst if isinstance(x, int) and x % 2 != 0]\n    return sum(x**2 for x in odd_numbers)"}
{"task_id": "HumanEval/152", "completion": "    return [abs(guess[i]-game[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = \"\"\n    max_strength = -1\n    for extension in extensions:\n        strength = extension.count('A') - extension.count('a')\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = class_name + \".\" + extension\n    return strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    left = remaining - eaten\n    return [eaten, left]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for op in operator:\n        if op == '+':\n            stack.append(operand.pop(0) + operand.pop(0))\n        elif op == '-':\n            stack.append(operand.pop(0) - operand.pop(0))\n        elif op == '*':\n            stack.append(operand.pop(0) * operand.pop(0))\n        elif op == '/':\n            stack.append(operand.pop(0) // operand.pop(0))\n        elif op == '**':\n            stack.append(operand.pop(0) ** operand.pop(0))\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            if stack:\n                stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            max_depth += 1\n        elif char == ')':\n            if stack:\n                stack.pop()\n                max_depth -= 1\n            else:\n                result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    return (total_sum, total_product)"}
{"task_id": "HumanEval/9", "completion": "    rolling_max_list = []\n    max_element = float('-inf')\n    for num in numbers:\n        max_element = max(max_element, num)\n        rolling_max_list.append(max_element)\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: int(x))\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Find x such that poly(x) = 0.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0:\n        return None\n    \n    # Find the largest non-zero coefficient\n    largest_non_zero = max(i for i in xs if i != 0)\n    \n    # Find the zero point\n    zero_point = -largest_non_zero / xs[0]\n    \n    return zero_point"}
{"task_id": "HumanEval/33", "completion": "    l' = [l[i] if i % 3 != 0 else sorted(l[i:i+3])[1] for i in range(len(l))]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 2, 3\n    count = 0\n    while count < n:\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b\n        a, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        left = i+1\n        right = n-1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    a, b, c, d = 0, 0, 0, 1\n    for _ in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n        return 1\n    return (modp(n // 2, p) * modp(n % 2, p)) % p"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack or stack.pop() != \"<\":\n                return False\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    return list(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(2, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split(' and '))\n    total_fruits = apples + oranges\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_even = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            min_index = i\n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(i, a):\n                if a % j == 0:\n                    for k in range(j, a):\n                        if a % k == 0:\n                            if i == 2 and j == 3 and k == 5:\n                                return True\n                            if i == 2 and j == 3 and k != 5:\n                                return False\n                            if i == 2 and j != 3 and k == 5:\n                                return False\n                            if i != 2 and j == 3 and k == 5:\n                                return False\n                            if i != 2 and j != 3 and k != 5:\n                                return False\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    root = int(a ** (1/3))\n    return root * root * root == a"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = \"0123456789ABCDEF\"\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    return starts_one_ends(n-1) + ends_one_ends(n-1)"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while N > 0:\n        sum += N % 2\n        N = N // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n            result += shifted_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i] == \"I\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += chr(ord(char) + 26)\n            else:\n                result += chr(ord(char) - 26)\n        elif char.lower() in 'aeiou':\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if isPrime(num) and num > largest_prime:\n            largest_prime = num\n\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i)\n        else:\n            pile.append(i+1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y)\n    elif x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "    unique_nums = set()\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            unique_nums.add(num)\n    return sorted(unique_nums)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef reverse_and_replace(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num)[::-1])\n    return result\n\ndef replace_with_names(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append([\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num - 1])\n    return result"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    \n    count = {}\n    for char in test.split():\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    max_count = max(count.values())\n    return {k: v for k, v in count.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "    for i in c:\n        s = s.replace(i,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    max_fill_count = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_fill_count += math.ceil(1 / capacity)\n    return max_fill_count"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for char in word:\n            if char.lower() not in ['a', 'e', 'i', 'o', 'u']:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels and word[i + 1] in vowels:\n            return word[i + 1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    return sorted([x for x in collatz_sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if year < 1:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([i for i in txt if i.islower() and ord(i) % 2 != 0])"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start > end:\n        return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= 1 if num >= 0 else -1 if num < 0 else 0\n        sum_magnitudes += abs(num) * product\n    return sum_magnitudes"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == -1:\n            return None\n        \n        path.append(grid[x][y])\n        \n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_x, new_y = x + dx, y + dy\n            res = dfs(new_x, new_y, k - 1, path)\n            if res:\n                return res\n        \n        path.pop()\n        return None\n    \n    result = []\n    for i in range(n):\n        for j in range(m):\n            res = dfs(i, j, k, [])\n            if res:\n                result = res\n                break\n    return result"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        a, b, c = 1, 3, 2\n        for i in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return [1] + [d] + [a, b, c]"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "    return sum([int(x)**2 for x in lst])"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if last_char in [\" \", \".\", \",\", \"!\", \"?\"]:\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n    if not neg_integers or not pos_integers:\n        return (None, None)\n    return (max(neg_integers), min(pos_integers))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return None\n    elif type(a) == int:\n        return a if a > b else b\n    elif type(a) == float:\n        return a if a > b else b\n    elif type(a) == str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        return a if float(a) > float(b) else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    for i in range(1, n // 2 + 1):\n        if i % 2 != 0:\n            continue\n        for j in range(i, n // 2 + 1):\n            if j % 2 != 0:\n                continue\n            for k in range(j, n // 2 + 1):\n                if k % 2 != 0:\n                    continue\n                if i + j + k == n:\n                    return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\")"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts[0]) > 3 or len(parts[1]) > 3:\n        return 'No'\n    if not parts[0].isalpha() or not parts[1].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if (i % 3 == 0) and (i % 4 != 0):\n            result += lst[i] ** 2\n        elif (i % 4 == 0) and (i % 3 != 0):\n            result += lst[i] ** 3\n    return result"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    if x_den == n_den:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))\n\ndef list_sort(lst):\n    return sorted_list_sum(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares"}
{"task_id": "HumanEval/152", "completion": "    return [abs(guess[i]-game[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "    strengths = {}\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        strengths[extension] = strength\n    strongest_extension = max(strengths, key=strengths.get)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    if eaten <= remaining:\n        return [eaten, remaining - eaten]\n    else:\n        return [eaten, 0]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operand)):\n        if operator[i] == '+':\n            stack.append(operand[i])\n        elif operator[i] == '-':\n            stack.append(-operand[i])\n        elif operator[i] == '*':\n            stack.append(stack.pop() * operand[i])\n        elif operator[i] == '/':\n            stack.append(stack.pop() // operand[i])\n        elif operator[i] == '**':\n            stack.append(stack.pop() ** operand[i])\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            max_depth += 1\n        elif char == ')':\n            if stack:\n                stack.pop()\n                max_depth -= 1\n            else:\n                result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for num in numbers:\n        product_of_numbers *= num\n    \n    return (sum_of_numbers, product_of_numbers)"}
{"task_id": "HumanEval/9", "completion": "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n    return max_list"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = [num_dict[num] for num in numbers.split()]\n    nums.sort()\n    return ' '.join([str(num_dict[num]) for num in nums])"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Find x such that poly(x) = 0.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0:\n        return \"xs should have even number of coefficients\"\n    \n    # Find the largest non zero coefficient\n    largest_non_zero = max(i for i, coeff in enumerate(xs) if coeff != 0)\n    \n    # Find the root using Newton's method\n    x = xs[largest_non_zero]\n    while True:\n        fx = poly(xs, x)\n        if fx == 0:\n            return x\n        dfx = poly(xs, x) - fx\n        if dfx == 0:\n            return \"No solution\"\n        x = x - fx / dfx"}
{"task_id": "HumanEval/33", "completion": "    l' = [l[i] if i % 3 != 0 else sorted([l[i], l[i+1], l[i+2]]) for i in range(len(l))]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 2, 3\n    while True:\n        if is_prime(b):\n            if n == 1:\n                return b\n            n -= 1\n        a, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    return list(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [xs[i] * i for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b + b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift = shift % len(num_str)\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[1])\n    total_fruits = apples + oranges\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, a // i):\n                if a % (i * j) == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    elif x < n:\n        return False\n    else:\n        return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    prime_count = 0\n    for digit in num:\n        if hex_digits[digit] in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:\n            prime_count += 1\n    return prime_count"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    return starts_one_ends(n - 1) + ends_one_ends(n - 1)"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while N > 0:\n        sum += N % 2\n        N = N // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result)"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            new_char = chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n            result += new_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    second_smallest = min(lst)\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i].lower() == 'i':\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += chr(ord(char) + 26)\n            else:\n                result += chr(ord(char) - 26)\n        elif char.lower() in 'aeiou':\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    return sum_of_digits(largest_prime)"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i+1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0:\n        x += 1\n    if y % 2 != 0:\n        y -= 1\n    if x > y:\n        return -1\n    return x"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        while n:\n            if n % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    \n    unique_nums = set()\n    for num in x:\n        if not has_even_digit(num):\n            unique_nums.add(num)\n    \n    return sorted(list(unique_nums))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef reverse_and_replace(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num)[::-1])\n    return result\n\ndef replace_with_names(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append([\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num-1])\n    return result"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef sum_of_numbers(n):\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n    for num in lst2:\n        if num % 2 == 0:\n            even_count -= 1\n    return \"YES\" if even_count == 0 else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    for letter in test.split():\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    max_count = max(count.values())\n    return {k: v for k, v in count.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "    for i in c:\n        s = s.replace(i,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    max_water = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_water = max(max_water, min(i, rows - i - 1) * min(j, cols - j - 1))\n    return math.ceil(max_water / capacity)"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels and word[i + 1] in vowels:\n            return word[i + 1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 != 0:\n            result.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return result"}
{"task_id": "HumanEval/124", "completion": "    if date.count('-') != 2:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if year < 1 or year > 9999:\n            return False\n    except ValueError:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words if words else [txt]\n\n\ndef count_odd_lowercase_letters(txt):\n    return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n\n\ndef split_words_and_count_odd_letters(txt):\n    words = split_words(txt)\n    return words, count_odd_lowercase_letters(txt)"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start > end:\n        return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign = 1\n    product = 1\n    for num in arr:\n        if num == 0:\n            return None\n        sign *= 1 if num > 0 else -1\n        product *= abs(num)\n    return sign * product"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == -1:\n            return None\n        \n        path.append(grid[x][y])\n        \n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_x, new_y = x + dx, y + dy\n            if 0 <= new_x < n and 0 <= new_y < m and grid[new_x][new_y] != -1:\n                res = dfs(new_x, new_y, k - 1, path)\n                if res:\n                    return res\n        \n        path.pop()\n        return None\n    \n    res = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] != -1:\n                res = dfs(i, j, k, [])\n                if res:\n                    return res\n    return res"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i // 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list"}
{"task_id": "HumanEval/131", "completion": "    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 0\n    return n % 10 * digits(n // 10)"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    return sum(int(x)**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if ' ' in txt:\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n    if not neg_integers or not pos_integers:\n        return (None, None)\n    else:\n        return (max(neg_integers), min(pos_integers))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(',', ''))\n        b = float(b.replace(',', ''))\n    if isinstance(a, str) and isinstance(b, float):\n        a = float(a.replace(',', ''))\n    if isinstance(a, float) and isinstance(b, str):\n        b = float(b.replace(',', ''))\n    if isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    if n <= 4:\n        return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0]:\n        return 'No'\n    if not parts[1].lower() in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    if x_den == n_den:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    for i in range(n):\n        count[a[i] % 3] += 1\n    return count[0] * (count[0] - 1) // 2 + count[1] * count[2]"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return x\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "    return [abs(guess[i] - game[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "    def strength(extension):\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        return cap - sm\n    \n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i + len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    if eaten <= remaining:\n        return [eaten, remaining - eaten]\n    else:\n        return [eaten, 0]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack.append(operand[i])\n        elif operator[i] == '-':\n            stack.append(-operand[i])\n        elif operator[i] == '*':\n            stack.append(stack.pop() * operand[i])\n        elif operator[i] == '/':\n            stack.append(stack.pop() // operand[i])\n        elif operator[i] == '**':\n            stack.append(stack.pop() ** operand[i])\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            if stack:\n                stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            depth = len(stack)\n            if depth > max_depth:\n                max_depth = depth\n            stack.pop()\n    return [max_depth]"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    return (total_sum, total_product)"}
{"task_id": "HumanEval/9", "completion": "    rolling_max_list = []\n    max_element = float('-inf')\n    for num in numbers:\n        max_element = max(max_element, num)\n        rolling_max_list.append(max_element)\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    numbers_list = numbers.split()\n    numbers_list.sort()\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds x such that poly(x) = 0.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0:\n        return \"Invalid input: xs should have an even number of coefficients\"\n    \n    # Find the largest non-zero coefficient\n    largest_non_zero = max(coeff for coeff in xs if coeff != 0)\n    \n    # Find the zero point\n    zero_point = -largest_non_zero / (xs[n // 2 - 1] if xs[n // 2 - 1] != 0 else 1)\n    \n    return zero_point"}
{"task_id": "HumanEval/33", "completion": "    l' = [l[i] if i % 3 != 0 else sorted([l[i], l[i+1], l[i+2]]) for i in range(len(l))]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 2, 3\n    count = 0\n    while count < n:\n        if is_prime(b):\n            count += 1\n            yield b\n        a, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n        return 1\n    return pow(n, (p - 1) // 2, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    return list(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i:\n            i += 2\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [xs[i] * (n - i) for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(2, n):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift = shift % len(num_str)\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[1])\n    total_fruits = apples + oranges\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, a):\n                if a % j == 0:\n                    for k in range(2, a):\n                        if a % k == 0:\n                            if i * j * k == a:\n                                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = \"0123456789ABCDEF\"\n    prime_count = 0\n    for digit in num:\n        if digit in \"2357\":\n            prime_count += 1\n    return prime_count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    return starts_one_ends(n-1) + ends_one_ends(n-1)"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while N > 0:\n        sum += N % 2\n        N = N // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            new_char = chr(((ord(char) - 97 + 2) % 26) + 97)\n            result += new_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i].lower() == \"i\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += chr(ord(char) + 26)\n            elif char.isupper():\n                encoded_message += chr(ord(char) + 26)\n            else:\n                encoded_message += char\n        elif char in vowels:\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    return sum_of_digits(largest_prime)"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i+1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y)\n    elif x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        while n:\n            if n % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    \n    unique_nums = set()\n    for num in x:\n        if not has_even_digit(num):\n            unique_nums.add(num)\n    return sorted(list(unique_nums))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef reverse_array(arr):\n    return arr[::-1]\n\ndef replace_digits(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    return [digit_names[num] for num in arr]\n\ndef sort_and_replace(arr):\n    arr = [num for num in arr if 1 <= num <= 9]\n    arr = reverse_array(arr)\n    arr = replace_digits(arr)\n    return arr"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n    for num in lst2:\n        if num % 2 == 0:\n            even_count -= 1\n    return \"YES\" if even_count == 0 else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    for char in test.split():\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    max_count = max(count.values())\n    return {k: v for k, v in count.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "    for char in c:\n        s = s.replace(char,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    max_water = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_water += 1\n    return math.ceil(max_water / capacity)"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    last_consonant = -1\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels:\n            last_consonant = i\n            break\n    if last_consonant == -1:\n        return \"\"\n    for i in range(last_consonant - 1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    return sorted([x for x in collatz_sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    if date == '':\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words if words else [txt]\n\n\ndef count_odd_lowercase_letters(txt):\n    count = 0\n    for char in txt:\n        if char.islower() and ord(char) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start > end:\n        return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num == 0:\n            product *= 1\n        elif num > 0:\n            product *= 1\n        else:\n            product *= -1\n        sum_magnitudes += abs(num)\n    return sum_magnitudes * product"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        if x < 0 or x >= n or y < 0 or y >= m:\n            return None\n        if grid[x][y] == k:\n            return path + [grid[x][y]]\n        return min(dfs(x + 1, y, k - grid[x][y], path + [grid[x][y]]),\n                   dfs(x - 1, y, k - grid[x][y], path + [grid[x][y]]),\n                   dfs(x, y + 1, k - grid[x][y], path + [grid[x][y]]),\n                   dfs(x, y - 1, k - grid[x][y], path + [grid[x][y]]))\n    \n    return dfs(0, 0, k, [])"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        a, b, c = 1, 3, 2\n        for i in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return [1] + [d] * (n - 1)"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    return sum(int(max(0, x))**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    words = txt.split()\n    if last_char in words[-1]:\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_ints = [x for x in lst if x < 0]\n    pos_ints = [x for x in lst if x > 0]\n    if not neg_ints or not pos_ints:\n        return (None, None)\n    return (max(neg_ints), min(pos_ints))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return None\n    elif type(a) == int:\n        return a if a > b else b\n    elif type(a) == float:\n        return a if a > b else b\n    elif type(a) == str:\n        a = float(a.replace(',', '').replace('.', ''))\n        b = float(b.replace(',', '').replace('.', ''))\n        return a if a > b else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    for i in range(1, n // 2 + 1):\n        if i % 2 != 0:\n            continue\n        for j in range(i, n // 2 + 1):\n            if j % 2 != 0:\n                continue\n            for k in range(j, n // 2 + 1):\n                if k % 2 != 0:\n                    continue\n                if i + j + k + (n - i - j - k) == n:\n                    return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(' ', '_').replace('  ', '-')"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts[0]) > 3 or len(parts[1]) > 3:\n        return 'No'\n    if not parts[0].isalpha() or not parts[1].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if (i % 3 == 0 and i % 4 != 0) or (i % 4 == 0 and i % 3 != 0):\n            total += lst[i] ** 2\n        else:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result = x_num * n_num / x_den / n_den\n    return result.is_integer()"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    return (count[0] * (count[0] - 1) * (count[0] - 2)) // 6 + (count[1] * (count[1] - 1) * (count[1] - 2)) // 6 + (count[2] * (count[2] - 1) * (count[2] - 2)) // 6"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return \"Invalid input\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "    return [abs(game[i]-guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = ''\n    max_strength = -1\n    for extension in extensions:\n        strength = extension.count('A') - extension.count('a')\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = class_name + '.' + extension\n    return strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    if eaten > remaining:\n        eaten = remaining\n    return [eaten, remaining - eaten]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operand)):\n        stack.append(operand[i])\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack[-1] += stack.pop()\n        elif operator[i] == '-':\n            stack[-1] -= stack.pop()\n        elif operator[i] == '*':\n            stack[-1] *= stack.pop()\n        elif operator[i] == '/':\n            stack[-1] //= stack.pop()\n        elif operator[i] == '**':\n            stack[-1] **= stack.pop()\n    return stack[0]"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            if stack:\n                stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            depth -= 1\n            result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    sum_val = 0\n    product_val = 1\n    for num in numbers:\n        sum_val += num\n        product_val *= num\n    \n    return (sum_val, product_val)"}
{"task_id": "HumanEval/9", "completion": "    rolling_max_list = []\n    max_element = float('-inf')\n    for num in numbers:\n        max_element = max(max_element, num)\n        rolling_max_list.append(max_element)\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_map[x])\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero of polynomial with coefficients xs.\n    Returns x such that poly(x) = 0.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or max(xs) == 0:\n        return \"Invalid input: xs should have even number of coefficients and largest non zero coefficient\"\n    \n    # Find the roots of the polynomial\n    roots = []\n    for i in range(1, n//2 + 1):\n        if poly(xs, i) == 0:\n            roots.append(i)\n    \n    # Return the zero point\n    return roots[0]"}
{"task_id": "HumanEval/33", "completion": "    l' = [l[i] if i % 3 != 0 else sorted([l[i], l[i+1], l[i+2]])[1] for i in range(len(l))]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 2, 3\n    count = 0\n    while count < n:\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b\n        a, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return \"\".join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n = n // 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    fruits = s.split()\n    total_fruits = int(fruits[0]) + int(fruits[1])\n    mango_fruits = n - total_fruits\n    return mango_fruits"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, a):\n                if a % j == 0:\n                    for k in range(2, a):\n                        if a % k == 0:\n                            if i * j * k == a:\n                                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    prime_count = 0\n    for digit in num:\n        if digit.isdigit():\n            if int(digit) > 1:\n                for i in range(2, int(digit)):\n                    if (int(digit) % i) == 0:\n                        break\n                else:\n                    prime_count += 1\n        else:\n            if int(digit, 16) > 1:\n                for i in range(2, int(digit, 16)):\n                    if (int(digit, 16) % i) == 0:\n                        break\n                else:\n                    prime_count += 1\n    return prime_count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    return starts_one_ends(n-1) + ends_one_ends(n-1)"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while N > 0:\n        sum += N % 2\n        N = N // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda tup: (tup[0], -tup[1]))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            new_char = chr(((ord(char) - 97 - 2) % 26) + 97)\n            result += new_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    second_smallest = min(lst)\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i].startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += chr(ord(char) + 26)\n            else:\n                result += chr(ord(char) - 26)\n        elif char in \"aeiouAEIOU\":\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i)\n        else:\n            pile.append(i+1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(round(avg))"}
{"task_id": "HumanEval/104", "completion": "    unique_nums = set()\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            unique_nums.add(num)\n    return sorted(unique_nums)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef reverse_and_replace(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num)[::-1])\n    return [str(num) for num in result]\n\ndef replace_with_names(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num) + \" \" + \"One\" if num == 1 else str(num) + \" \" + \"Two\" if num == 2 else str(num) + \" \" + \"Three\" if num == 3 else str(num) + \" \" + \"Four\" if num == 4 else str(num) + \" \" + \"Five\" if num == 5 else str(num) + \" \" + \"Six\" if num == 6 else str(num) + \" \" + \"Seven\" if num == 7 else str(num) + \" \" + \"Eight\" if num == 8 else str(num) + \" \" + \"Nine\")\n    return result"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    for char in test:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    max_count = max(count.values())\n    return {k: v for k, v in count.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "    for i in c:\n        s = s.replace(i,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    max_water = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                water = min(i, rows - i, j, cols - j) * capacity\n                max_water = max(max_water, water)\n    return math.ceil(max_water / capacity)"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for letter in word if letter.lower() not in 'aeiou') == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return sorted([x for x in collatz_sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    if date.count('-') != 2:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day < 1 or day > 30:\n        return False\n    if month == 2 and day < 1 or day > 29:\n        return False\n    if year < 1:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start > end:\n        return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sum_magnitude = 0\n    for num in arr:\n        if num == 0:\n            product *= 1\n            sum_magnitude += 0\n        elif num > 0:\n            product *= 1\n            sum_magnitude += abs(num)\n        else:\n            product *= -1\n            sum_magnitude += abs(num)\n    return product * sum_magnitude"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    ans = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                ans.append(grid[i][j])\n                if len(ans) == k:\n                    return ans\n                ans.append(grid[i][j])\n    return ans"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        a, b, c = 1, 3, 2\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    lst = [int(x) for x in lst]\n    return sum(x*x for x in lst)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    words = txt.split()\n    if last_char in words[-1]:\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n    if not neg_nums or not pos_nums:\n        return (None, None)\n    else:\n        return (max(neg_nums), min(pos_nums))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return None\n    elif type(a) == int:\n        return a if a > b else b\n    elif type(a) == float:\n        return a if a > b else b\n    elif type(a) == str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        return a if float(a) > float(b) else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n % 4 == 0"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(' ', '_').replace('  ', '-')"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts[0]) > 3 or len(parts[1]) > 3:\n        return 'No'\n    if not parts[0].isalpha() or not parts[1].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    if x_den == n_den:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    return count[0] * (count[0] - 1) // 2 + count[1] * count[2]"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))\n\ndef list_sort(lst):\n    return sorted_list_sum(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "    return [abs(guess[i]-game[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "    strengths = {}\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        strengths[extension] = strength\n    strongest_extension = max(strengths, key=strengths.get)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    left = remaining - eaten\n    return [eaten, left]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for op in operator:\n        if op == '+':\n            stack.append(operand.pop(0) + operand.pop(0))\n        elif op == '-':\n            stack.append(operand.pop(0) - operand.pop(0))\n        elif op == '*':\n            stack.append(operand.pop(0) * operand.pop(0))\n        elif op == '/':\n            stack.append(operand.pop(0) // operand.pop(0))\n        elif op == '**':\n            stack.append(operand.pop(0) ** operand.pop(0))\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            if stack:\n                stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            depth -= 1\n            result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for num in numbers:\n        product_of_numbers *= num\n    \n    return (sum_of_numbers, product_of_numbers)"}
{"task_id": "HumanEval/9", "completion": "    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = [num_map[num] for num in numbers.split()]\n    nums.sort()\n    return ' '.join(str(num_map[num]) for num in nums)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds a zero of the polynomial with coefficients xs.\n    returns x such that poly(x) = 0\n    \"\"\"\n    if len(xs) % 2 != 0 or xs[-1] != 0:\n        return None\n    \n    # Using bisection method to find zero\n    left, right = -1000, 1000\n    while right - left > 0.00001:\n        mid = (left + right) / 2\n        if poly(xs, mid) > 0:\n            left = mid\n        else:\n            right = mid\n    return round(mid, 2)"}
{"task_id": "HumanEval/33", "completion": "    l' = [l[i] if i % 3 != 0 else sorted(l[i:i+3]) for i in range(len(l))]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 2, 3\n    while True:\n        c = a + b\n        if c > n:\n            return b\n        if is_prime(c):\n            a, b = b, c"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 0, 1\n    for _ in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n = n // 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [xs[i] * i for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split(' and '))\n    total_fruits = apples + oranges\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(lst[i])\n        else:\n            result.insert(0, lst[i])\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    return sum(q) <= w and q == q[::-1]"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, i):\n                if i % j == 0:\n                    for k in range(2, i):\n                        if i % k == 0:\n                            if i == j * k * 3:\n                                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    elif x < n:\n        return False\n    else:\n        return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = \"0123456789ABCDEF\"\n    prime_digits = \"2357\"\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    grade_map = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0.0: 'E'\n    }\n    return [grade_map[grade] for grade in grades]"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    return 10 ** (n - 1)"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while (N > 0):\n        sum += N % 2\n        N = N // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result)"}
{"task_id": "HumanEval/88", "completion": "    if len(array) < 2:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - 97 + 2) * 2) % 26 + 97)\n            result += shifted\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    second_smallest = min(lst)\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i].startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_char = chr(ord(char) + 26)\n            else:\n                encoded_char = chr(ord(char) + 26)\n        elif char in vowels:\n            encoded_char = chr(ord(char) + 2)\n        else:\n            encoded_char = char\n        encoded_message += encoded_char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    largest_prime = -1\n    for num in lst:\n        if isPrime(num) and num > largest_prime:\n            largest_prime = num\n    \n    if largest_prime == -1:\n        return 0\n    \n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i)\n        else:\n            pile.append(i+1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "    unique_nums = set()\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            unique_nums.add(num)\n    return sorted(unique_nums)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef replace_with_names(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[int(str(x)[0])-1] for x in arr]\n\ndef sortAndReplace(arr):\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr = by_length(arr)\n    arr = replace_with_names(arr)\n    arr.reverse()\n    return arr"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    return \"YES\" if even_count <= len(lst2) - odd_count else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    \n    count = {}\n    for char in test.split():\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    max_count = max(count.values())\n    return {k: v for k, v in count.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "    for i in c:\n        s = s.replace(i,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    max_water = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_water = max(max_water, min(i, rows - i) * min(j, cols - j))\n    return math.ceil(max_water / capacity)"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    sequence = [n]\n    while sequence[-1] != 1:\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence[-1] // 2)\n        else:\n            sequence.append(sequence[-1] * 3 + 1)\n    return sorted([x for x in sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    if date.count('-') != 2:\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day < 1 or day > 30:\n        return False\n    if month == 2 and day < 1 or day > 29:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start > end:\n        return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sum_magnitude = 0\n    for num in arr:\n        product *= 1 if num >= 0 else -1 if num < 0 else 0\n        sum_magnitude += abs(num) * product\n    return sum_magnitude"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        if x < 0 or x >= n or y < 0 or y >= m:\n            return None\n        if grid[x][y] == k:\n            return path + [grid[x][y]]\n        \n        res = None\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            res = dfs(x + dx, y + dy, k - 1, path + [grid[x][y]])\n            if res:\n                return res\n        return None\n    \n    for i in range(n):\n        for j in range(m):\n            res = dfs(i, j, k, [])\n            if res:\n                return res\n    return []"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_nums = [1, 3, 2]\n        for i in range(3, n + 1):\n            tri_nums.append(tri_nums[i - 1] + tri_nums[i - 2] + tri_nums[i - 3])\n        return tri_nums"}
{"task_id": "HumanEval/131", "completion": "    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 0\n    return n % 10 * digits(n // 10)"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    return sum(int(max(0, x))**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        return not last_char.isspace()\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n    if not neg_nums or not pos_nums:\n        return (None, None)\n    return (max(neg_nums), min(pos_nums))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(',', ''))\n        b = float(b.replace(',', ''))\n    if isinstance(a, str) and isinstance(b, float):\n        b = float(b)\n    if isinstance(a, float) and isinstance(b, str):\n        a = float(a)\n    if isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    for i in range(2, n//2 + 1, 2):\n        if n - i >= i:\n            return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts[0]) == 0 or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    if x_den == n_den:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    return count[0] * (count[0] - 1) * (count[0] - 2) // 6 + count[1] * count[2] * count[0]"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))\n\ndef list_sort(lst):\n    return sorted_list_sum(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "    return [abs(g-g1) for g,g1 in zip(guess,game)]"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        strength = extension.count('A') - extension.count('a')\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total = number + need\n    if total <= remaining:\n        return [total, remaining - total]\n    else:\n        return [total, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '/':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            if stack:\n                stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    current_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n            result.append(current_depth)\n        elif char == ')':\n            current_depth -= 1\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    \n    return (sum_numbers, product_numbers)"}
{"task_id": "HumanEval/9", "completion": "    rolling_max_list = []\n    max_element = float('-inf')\n    for num in numbers:\n        max_element = max(max_element, num)\n        rolling_max_list.append(max_element)\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(min(len(a), len(b))):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = [num_dict[num] for num in numbers.split()]\n    nums.sort()\n    return ' '.join([str(num_dict[num]) for num in nums])"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds a zero of the polynomial with coefficients xs.\n    Returns the zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or max(xs) == 0:\n        return None\n    \n    # Using Newton's method to find a zero\n    x = 0\n    while True:\n        fx = poly(xs, x)\n        if fx == 0:\n            return x\n        dfx = poly([-coeff for coeff in xs], x)\n        x -= fx / dfx"}
{"task_id": "HumanEval/33", "completion": "    l' = [l[i] if i % 3 != 0 else sorted([l[i], l[i+1], l[i+2]])[1] for i in range(len(l))]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 2, 3\n    count = 0\n    while count < n:\n        if is_prime(b):\n            count += 1\n            yield b\n        a, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            n = n // i\n    if n > 2:\n        return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [xs[i] * i for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(2, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split(' and '))\n    total_fruits = apples + oranges\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_even = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            min_index = i\n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1]:\n        return sum(q) <= w\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, a // i):\n                if a % (i * j) == 0:\n                    for k in range(2, a // (i * j)):\n                        if a % (i * j * k) == 0:\n                            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    elif x < n:\n        return False\n    else:\n        return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    cube_root = round(a ** (1 / 3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    count = 0\n    for i in range(len(num)):\n        if num[i] in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    return starts_one_ends(n - 1) + ends_one_ends(n - 1)"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while N:\n        sum += N % 2\n        N //= 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda tup: (tup[0], -tup[1]))"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            new_char = chr(((ord(char) - ord('a')) * 2) % 26 + ord('a'))\n            result += new_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i].startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x + y == z) or (x + z == y) or (y + z == x):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += chr(ord(char) + 26)\n            elif char.isupper():\n                encoded_message += chr(ord(char) + 26)\n            else:\n                encoded_message += char\n        elif char in vowels:\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if isPrime(num) and num > max_prime:\n            max_prime = num\n    \n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i)\n        else:\n            pile.append(i+1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y)\n    elif x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(round(avg))"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        while n:\n            if n % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    \n    unique_nums = set()\n    for num in x:\n        if not has_even_digit(num):\n            unique_nums.add(num)\n    return sorted(list(unique_nums))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef reverse_array(arr):\n    return arr[::-1]\n\ndef replace_digits(arr):\n    digit_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    return [digit_names[num] for num in arr]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    \n    if even_count == 0 or odd_count == 0:\n        return \"NO\"\n    \n    if even_count > odd_count:\n        return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    \n    count = {}\n    for char in test.split():\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    max_count = max(count.values())\n    result = {key: value for key, value in count.items() if value == max_count}\n    return result"}
{"task_id": "HumanEval/112", "completion": "    for i in c:\n        s = s.replace(i,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    max_water = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_water = max(max_water, min(capacity, cols - j))\n    return max_water"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    def is_consonant(c):\n        return c.isalpha() and c.lower() not in ['a', 'e', 'i', 'o', 'u']\n    \n    words = s.split()\n    result = []\n    for word in words:\n        count = sum(1 for c in word if is_consonant(c))\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels and word[i + 1] in vowels:\n            return word[i + 1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    return sorted([x for x in collatz_sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    return \"YES\" if (end1 > start2 and end2 > start1) else \"NO\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= 1 if num >= 0 else -1 if num < 0 else 0\n        sum_magnitudes += abs(num)\n    return sum_magnitudes * product"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == -1:\n            return float('inf')\n        \n        ans = float('inf')\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            new_x, new_y = x + dx, y + dy\n            if 0 <= new_x < n and 0 <= new_y < m:\n                ans = min(ans, dfs(new_x, new_y, k - 1, path + [grid[new_x][new_y]]))\n        \n        grid[x][y] = -1\n        return ans\n    \n    ans = float('inf')\n    for i in range(n):\n        for j in range(m):\n            ans = min(ans, dfs(i, j, k, [grid[i][j]]))\n    \n    return ans"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        a, b, c = 1, 3, 2\n        for i in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    return sum([int(x)**2 for x in lst])"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isspace():\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_nums = [x for x in lst if x < 0]\n    pos_nums = [x for x in lst if x > 0]\n    if not neg_nums or not pos_nums:\n        return (None, None)\n    return (max(neg_nums), min(pos_nums))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return None\n    elif type(a) == int:\n        return a if a > b else b\n    elif type(a) == float:\n        return a if a > b else b\n    elif type(a) == str:\n        return a if float(a) > float(b) else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    if n <= 4:\n        return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\")"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0] or not parts[1].lower() in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    if x_den == n_den:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    return (count[0] * (count[0] - 1) * (count[0] - 2)) // 6 + (count[1] * (count[1] - 1) * (count[1] - 2)) // 6 + (count[2] * (count[2] - 1) * (count[2] - 2)) // 6"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    return tuple(planets[start_index+1:end_index])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return \"n should be a prime number\"\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    odd_squares_sum = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            odd_squares_sum += num ** 2\n    return odd_squares_sum * 2"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    strengths = {}\n    for ext in extensions:\n        cap = sum(1 for c in ext if c.isupper())\n        sm = sum(1 for c in ext if c.islower())\n        strength = cap - sm\n        strengths[ext] = strength\n    strongest_ext = max(strengths, key=strengths.get)\n    return f\"{class_name}.{strongest_ext}\""}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    left = remaining - eaten\n    return [eaten, left]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '/':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            if stack:\n                stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    return result[:-1]"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            depth -= 1\n            result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for num in numbers:\n        product_of_numbers *= num\n    \n    return (sum_of_numbers, product_of_numbers)"}
{"task_id": "HumanEval/9", "completion": "    max_so_far = float('-inf')\n    max_list = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        max_list.append(max_so_far)\n    return max_list"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    numbers_list = numbers.split()\n    numbers_list.sort()\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero of polynomial with coefficients xs.\n    Returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or max(xs) < 0:\n        return \"Invalid input\"\n    \n    # Finding the zero of the polynomial\n    zero = 0\n    for i in range(n//2):\n        if xs[i] == 0:\n            continue\n        zero = xs[i]\n        break\n    \n    return zero"}
{"task_id": "HumanEval/33", "completion": "    l' = [l[i] if i % 3 != 0 else sorted([l[i], l[i+1], l[i+2]])[1] for i in range(len(l))]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 2, 3\n    count = 0\n    while True:\n        if is_prime(b) and b == a + b:\n            count += 1\n            if count == n:\n                return b\n        a, b = b, a + b\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a+b+c+d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n        return 1\n    return pow(n, (p - 2) // 2, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [xs[i] * i for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b + b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[1])\n    total_fruits = apples + oranges\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_even = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            min_index = i\n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(lst[i])\n        else:\n            result.insert(0, lst[i])\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, i):\n                if i % j == 0:\n                    for k in range(2, i):\n                        if i % k == 0:\n                            if j * k == i and is_prime(j) and is_prime(k):\n                                return True\n    return False\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    elif x < n:\n        return False\n    else:\n        return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    count = 0\n    for char in num:\n        if char.isdigit():\n            if int(char) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1207, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1793, 1797, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393,"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    return (10 ** (n - 1)) + (10 ** (n - 1))"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while N > 0:\n        sum += N % 2\n        N = N // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - 97 - 2) % 26) + 97)\n            result += shifted\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i].lower() == \"i\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x + y == z) or (x + z == y) or (y + z == x):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_char = chr(ord(char) + 26)\n            else:\n                encoded_char = chr(ord(char) - 26)\n        else:\n            encoded_char = char\n        if char in vowels:\n            encoded_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        encoded_message += encoded_char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    return sum_of_digits(largest_prime)"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    first_key = dict[list(dict.keys())[0]]\n    if first_key.islower() or first_key.isupper():\n        for key in dict:\n            if not (key.islower() or key.isupper()):\n                return False\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i+1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y)\n    elif x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "    unique_nums = set()\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            unique_nums.add(num)\n    return sorted(unique_nums)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef reverse_and_replace(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num)[::-1])\n    return result\n\ndef replace_with_names(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num) + \" \" + \"One\" if num == 1 else str(num) + \" \" + \"Two\" if num == 2 else str(num) + \" \" + \"Three\" if num == 3 else str(num) + \" \" + \"Four\" if num == 4 else str(num) + \" \" + \"Five\" if num == 5 else str(num) + \" \" + \"Six\" if num == 6 else str(num) + \" \" + \"Seven\" if num == 7 else str(num) + \" \" + \"Eight\" if num == 8 else str(num) + \" \" + \"Nine\")\n    return result"}
{"task_id": "HumanEval/106", "completion": "    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum(range(1, i + 1)))\n    return res\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    return \"YES\" if even_count == len(lst1) and odd_count == len(lst2) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    for char in test.split():\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    max_count = max(count.values())\n    return {k: v for k, v in count.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "    for i in c:\n        s = s.replace(i,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows, cols = len(grid), len(grid[0])\n    max_fill = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_fill = max(max_fill, math.ceil((i + 1) * (j + 1) / capacity))\n    return max_fill"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for char in word:\n            if char.isalpha() and char.lower() not in ['a', 'e', 'i', 'o', 'u']:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 != 0:\n            result.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if year < 1 or year > 9999:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if ord(char) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start >= end:\n        return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num\n    signs = [1 if num > 0 else -1 if num < 0 else 0 for num in arr]\n    return sum(abs(num) * signs[i] for i, num in enumerate(arr))"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        if x < 0 or x >= n or y < 0 or y >= m:\n            return None\n        if grid[x][y] == k:\n            return path + [grid[x][y]]\n        res = None\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            res = dfs(x + dx, y + dy, k - 1, path + [grid[x][y]])\n            if res:\n                return res\n        return None\n    \n    res = []\n    for i in range(n):\n        for j in range(m):\n            res = dfs(i, j, k, [])\n            if res:\n                return res"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        a, b, c = 1, 3, 2\n        for i in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return [1] + [d] * (n - 1)"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "    return sum(int(round(x))**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        return last_char not in \" \"\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n    if not neg_integers or not pos_integers:\n        return (None, None)\n    else:\n        return (max(neg_integers), min(pos_integers))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return None\n    elif type(a) == int:\n        return a if a > b else b\n    elif type(a) == float:\n        return a if a > b else b\n    elif type(a) == str:\n        a = float(a.replace(',', ''))\n        b = float(b.replace(',', ''))\n        return a if a > b else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    if n < 4:\n        return False\n    if n == 4:\n        return True\n    return (n - 4) % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(' ', '_').replace('  ', '-')"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts[0]) > 3 or len(parts[1]) > 3:\n        return 'No'\n    if not parts[0].isalpha() or not parts[1].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    if x_den == n_den:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return x\n    if n == 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    odd_squares_sum = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            odd_squares_sum += num ** 2\n    return 2 * odd_squares_sum"}
{"task_id": "HumanEval/152", "completion": "    return [abs(guess[i] - game[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "    strengths = {}\n    for extension in extensions:\n        upper_count = sum(1 for char in extension if char.isupper())\n        lower_count = sum(1 for char in extension if char.islower())\n        strength = upper_count - lower_count\n        strengths[extension] = strength\n    strongest_extension = max(strengths, key=strengths.get)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total = number + need\n    if total <= remaining:\n        return [total, remaining - total]\n    else:\n        return [total, 0]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operand)):\n        stack.append(operand[i])\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack[i] = stack[i] + stack.pop()\n        elif operator[i] == '-':\n            stack[i] = stack[i] - stack.pop()\n        elif operator[i] == '*':\n            stack[i] = stack[i] * stack.pop()\n        elif operator[i] == '/':\n            stack[i] = stack[i] // stack.pop()\n        elif operator[i] == '**':\n            stack[i] = stack[i] ** stack.pop()\n    return stack[0]"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    current_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n            result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    return (total_sum, total_product)"}
{"task_id": "HumanEval/9", "completion": "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n    return max_list"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: num_map[x])\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Find x such that poly(x) = 0.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0:\n        return None\n    \n    # Find the largest non-zero coefficient\n    largest_non_zero = max(i for i in xs if i != 0)\n    \n    # Find the root using bisection method\n    left, right = -1, largest_non_zero\n    while left < right:\n        mid = (left + right) / 2\n        if poly(xs, mid) > 0:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "HumanEval/33", "completion": "    l' = [l[i] if i % 3 != 0 else sorted([l[i], l[i+1], l[i+2]]) for i in range(len(l))]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 2, 3\n    count = 0\n    while count < n:\n        if is_prime(b):\n            count += 1\n            yield b\n        a, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return \"\".join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by -5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i:\n            i += 2\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [xs[i] * (i + 1) for i in range(n - 1)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a+b+b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift = shift % len(num_str)\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split(' and '))\n    total_fruits = apples + oranges\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_even = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            min_index = i\n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, a // i):\n                if a % (i * j) == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    root = int(a ** (1 / 3))\n    return root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    prime_count = 0\n    for digit in num:\n        if hex_digits[digit] in [2, 3, 5, 7, 11, 13]:\n            prime_count += 1\n    return prime_count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    else:\n        return 10"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while (N > 0):\n        sum += N % 2\n        N = N // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda tup: (tup[0], -tup[1]))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = ''\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            result += shifted_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i].startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += chr(ord(char) + 32)\n            elif char.isupper():\n                encoded_message += chr(ord(char) + 32)\n            else:\n                if char in vowels:\n                    encoded_message += chr(ord(char) + 2)\n                else:\n                    encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i)\n        else:\n            pile.append(i+1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0:\n        x += 1\n    if y % 2 != 0:\n        y -= 1\n    if x > y:\n        return -1\n    return y"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(round(avg))"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef replace_with_names(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[num-1] for num in arr]\n\ndef sort_and_replace(arr):\n    return replace_with_names(by_length(arr))"}
{"task_id": "HumanEval/106", "completion": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum(range(1, i+1)))\n    return res\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    if even_count == 0:\n        return \"NO\"\n    if odd_count == 0:\n        return \"YES\"\n    if even_count == len(lst1) or odd_count == len(lst1):\n        return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    for letter in test.split():\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    max_count = max(count.values())\n    return {letter: count[letter] for letter in count if count[letter] == max_count}"}
{"task_id": "HumanEval/112", "completion": "    for char in c:\n        s = s.replace(char,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows, cols = len(grid), len(grid[0])\n    max_water = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_water = max(max_water, min(i, rows - i) * min(j, cols - j) * capacity)\n    return max_water"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    def is_consonant(c):\n        return c.isalpha() and c.lower() not in ['a', 'e', 'i', 'o', 'u']\n    \n    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for c in word if is_consonant(c)) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels and word[i + 1] in vowels:\n            return word[i + 1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    sequence = [n]\n    while sequence[-1] != 1:\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence[-1] // 2)\n        else:\n            sequence.append(sequence[-1] * 3 + 1)\n    return sorted([x for x in sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    if date.count('-') != 2:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if day < 1 or day > 30:\n        return False\n    if day < 1 or day > 29:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if intersection_length < 0:\n        return \"NO\"\n    \n    if intersection_length == 0:\n        return \"NO\"\n    \n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign = 1\n    for num in arr:\n        if num == 0:\n            sign = 0\n        elif num > 0:\n            sign *= 1\n        else:\n            sign *= -1\n    return sum(abs(num) * sign for num in arr)"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    ans = []\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                ans.append(grid[i][j])\n                continue\n            if i == 0:\n                ans.append(min(ans[-1], grid[i][j]))\n            elif j == 0:\n                ans.append(min(ans[-1], grid[i][j]))\n            else:\n                ans.append(min(ans[-1], ans[-2], grid[i][j]))\n    return ans[:k]"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i - 3])\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2])\n        return tri_list"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    return sum(int(max(0, x))**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        return not last_char.isupper() and not last_char.islower()\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n    if not neg_integers or not pos_integers:\n        return (None, None)\n    else:\n        return (max(neg_integers), min(pos_integers))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return None\n    elif type(a) == int:\n        return a if a > b else b\n    elif type(a) == float:\n        return a if a > b else b\n    elif type(a) == str:\n        return a if float(a) > float(b) else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    if n < 4:\n        return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return ''.join('-' if i > 1 and text[i] == ' ' and text[i - 1] == ' ' and text[i - 2] == ' ' else '_' if i > 0 and text[i] == ' ' and text[i - 1] == ' ' else ' ' if text[i] == ' ' else text[i] for i in range(len(text)))"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts[0]) > 3 or len(parts[1]) > 3:\n        return 'No'\n    if not parts[0].isalpha() or not parts[1].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    if x_den == n_den:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    return count[0] * (count[0] - 1) * (count[0] - 2) // 6 + count[1] * count[2] * count[0]"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))\n\ndef list_sort(lst):\n    return sorted_list_sum(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return \"n should be a prime number\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num ** 2\n    return total * 2"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    strengths = {}\n    for ext in extensions:\n        cap = sum(1 for c in ext if c.isupper())\n        sm = sum(1 for c in ext if c.islower())\n        strength = cap - sm\n        strengths[ext] = strength\n    strongest_ext = max(strengths, key=strengths.get)\n    return f\"{class_name}.{strongest_ext}\""}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + need\n    if total_eaten <= remaining:\n        return [total_eaten, remaining - total_eaten]\n    else:\n        return [total_eaten, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '/':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            if stack:\n                stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            depth = len(stack)\n            if depth > max_depth:\n                max_depth = depth\n            stack.pop()\n    return [max_depth]"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    \n    return (sum_numbers, product_numbers)"}
{"task_id": "HumanEval/9", "completion": "    rolling_max_list = []\n    max_element = float('-inf')\n    for num in numbers:\n        max_element = max(max_element, num)\n        rolling_max_list.append(max_element)\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n    \n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(min(len(a), len(b))):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = [num_dict[num] for num in numbers.split()]\n    nums.sort()\n    return ' '.join(str(num_dict[num]) for num in nums)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds x such that poly(x) = 0.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or max(xs) < 0:\n        return \"Invalid input: xs should have even number of coefficients and largest non zero coefficient\"\n    \n    # Using Newton's method to find zero\n    x = 0\n    while True:\n        fx = poly(xs, x)\n        if fx == 0:\n            return x\n        dfx = poly(xs, x + 0.0001) - fx\n        if abs(dfx) < 0.0001:\n            return x\n        x -= fx / dfx"}
{"task_id": "HumanEval/33", "completion": "    l' = [l[i] if i % 3 != 0 else sorted(l[i:i+3]) for i in range(len(l))]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 2, 3\n    count = 0\n    while True:\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b\n        a, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return \"\".join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 0, 0\n    for _ in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [xs[i] * i for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a+b+b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift = shift % len(num_str)\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[1])\n    total_fruits = apples + oranges\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, a):\n                if a % j == 0:\n                    for k in range(2, a):\n                        if a % k == 0:\n                            if i * j * k == a:\n                                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    count = 0\n    for digit in num:\n        if digit.isdigit():\n            if int(digit, 16) > 1:\n                count += 1\n        else:\n            if int(digit, 16) > 1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    grade_map = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-'\n    }\n    return [grade_map[grade] for grade in grades]"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    return (9 * (n - 1)) + (9 * (n - 1))"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while N > 0:\n        sum += N % 2\n        N = N // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result)"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            new_char = chr(((ord(char) - 97 + 2) % 26) + 97)\n            result += new_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i].lower() == \"i\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += chr(ord(char) + 26)\n            else:\n                result += chr(ord(char) - 26)\n        elif char in \"aeiouAEIOU\":\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    \n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    first_key = dict.keys()[0]\n    return all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys())"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i)\n        else:\n            pile.append(i+1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "    unique_nums = set()\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            unique_nums.add(num)\n    return sorted(unique_nums)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef reverse_and_replace(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num))\n    result = result[::-1]\n    result = [str(i) for i in range(1, 10)]\n    return result"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef sum_of_numbers(n):\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    return \"YES\" if even_count == len(lst1) and odd_count == len(lst2) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    \n    count = {}\n    for char in test.split():\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    max_count = max(count.values())\n    return {key: value for key, value in count.items() if value == max_count}"}
{"task_id": "HumanEval/112", "completion": "    for i in c:\n        s = s.replace(i,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    bucket_count = math.ceil(rows * cols / capacity)\n    buckets = [0] * bucket_count\n    for i in range(rows):\n        for j in range(cols):\n            buckets[i * cols + j] += grid[i][j]\n    return max(buckets)"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels and word[i + 1] in vowels:\n            return word[i + 1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    return sorted([x for x in collatz_sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    if date:\n        try:\n            month, day, year = map(int, date.split('-'))\n            if month < 1 or month > 12:\n                return False\n            if day < 1 or day > 31:\n                return False\n            if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n                return False\n            if month in [4, 6, 9, 11] and day < 1 or day > 30:\n                return False\n            if month == 2 and day < 1 or day > 29:\n                return False\n            return True\n        except ValueError:\n            return False\n    return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if c.islower() and ord(c) % 2 != 0])"}
{"task_id": "HumanEval/126", "completion": "    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersection_length = end - start\n    if intersection_length < 0:\n        return \"NO\"\n    if intersection_length == 0:\n        return \"NO\"\n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sum_magnitude = 0\n    for num in arr:\n        product *= 1 if num > 0 else -1 if num < 0 else 0\n        sum_magnitude += abs(num) * product\n    return sum_magnitude"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == 0:\n            return None\n        \n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        for dx, dy in directions:\n            new_x, new_y = x + dx, y + dy\n            new_path = path + [grid[new_x][new_y]]\n            res = dfs(new_x, new_y, k - 1, new_path)\n            if res:\n                return res\n        return None\n    \n    result = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] != 0:\n                res = dfs(i, j, k, [grid[i][j]])\n                if res:\n                    result = res\n                    break\n    return result"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i - 3])\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i - 3])\n        return tri_list"}
{"task_id": "HumanEval/131", "completion": "    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 0\n    return n % 10 * digits(n // 10)"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    return sum([int(x)**2 for x in lst])"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isspace():\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n    if not neg_integers or not pos_integers:\n        return (None, None)\n    else:\n        return (max(neg_integers), min(pos_integers))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return None\n    elif type(a) == int:\n        return a if a > b else b\n    elif type(a) == float:\n        return a if a > b else b\n    elif type(a) == str:\n        return a if float(a) > float(b) else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return (n // 2) % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\")"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0].isalpha() or not parts[1] in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    if x_den == n_den:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    return (count[0] * (count[0] - 1) * (count[0] - 2)) // 6 + (count[1] * count[2] * count[0]) + (count[1] * (count[1] - 1) * (count[1] - 2)) // 6 + (count[2] * (count[2] - 1) * (count[2] - 2)) // 6"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    return tuple(planets[start_index+1:end_index])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))\n\ndef list_sort(lst):\n    return sorted_list_sum(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return x\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    odd_nums = [num for num in lst if num > 0 and num % 2 != 0]\n    return sum(num ** 2 for num in odd_nums)"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    strengths = {}\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        strengths[extension] = strength\n    strongest_extension = max(strengths, key=strengths.get)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i + len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total = number + need\n    if total <= remaining:\n        return [total, remaining - total]\n    else:\n        return [total, remaining]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operand)):\n        stack.append(operand[i])\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack[i] = stack[i] + stack.pop()\n        elif operator[i] == '-':\n            stack[i] = stack[i] - stack.pop()\n        elif operator[i] == '*':\n            stack[i] = stack[i] * stack.pop()\n        elif operator[i] == '/':\n            stack[i] = stack[i] // stack.pop()\n        elif operator[i] == '**':\n            stack[i] = stack[i] ** stack.pop()\n    return stack[0]"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            if stack:\n                stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    current_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n            result.append(current_depth)\n        elif char == ')':\n            current_depth -= 1\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return (sum(numbers), product)"}
{"task_id": "HumanEval/9", "completion": "    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(num, max_so_far)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    numbers = numbers.split()\n    numbers.sort()\n    return ' '.join(numbers)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero point of polynomial with coefficients xs.\n    Returns only one zero point, even if there are many.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or max(xs) == 0:\n        return None\n    \n    # Using bisection method to find zero point\n    left, right = -100, 100\n    while right - left > 0.0001:\n        mid = (left + right) / 2\n        if poly(xs, mid) > 0:\n            left = mid\n        else:\n            right = mid\n    return round(mid, 2)"}
{"task_id": "HumanEval/33", "completion": "    l' = [l[i] if i % 3 != 0 else sorted([l[i], l[i+1], l[i+2]]) for i in range(len(l))]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 2, 3\n    count = 0\n    while count < n:\n        if is_prime(b):\n            count += 1\n            yield b\n        a, b = b, a + b\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [xs[i] * i for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift %= len(num_str)\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[1])\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, i):\n                if i % j == 0:\n                    for k in range(2, i):\n                        if i % k == 0:\n                            if i * j * k == a:\n                                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    root = int(a ** (1 / 3))\n    return root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = \"0123456789ABCDEF\"\n    prime_count = 0\n    for digit in num:\n        if digit in hex_digits:\n            decimal_val = int(digit, 16)\n            if decimal_val < 2:\n                continue\n            for i in range(2, int(decimal_val ** 0.5) + 1):\n                if decimal_val % i == 0:\n                    break\n            else:\n                prime_count += 1\n    return prime_count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    return starts_one_ends(n-1) + ends_one_ends(n-1)"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while N:\n        sum += N % 2\n        N //= 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result)"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            new_char = chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n            result += new_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    second_smallest = min(lst)\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i].lower() == 'i':\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += chr(ord(char) + 26)\n            else:\n                encoded_message += chr(ord(char) - 26)\n        elif char in vowels:\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    \n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i)\n        else:\n            pile.append(i+1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0:\n        x += 1\n    if y % 2 != 0:\n        y -= 1\n    if x > y:\n        return -1\n    return y"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        while n:\n            if n % 2 == 0:\n                return True\n            n //= 10\n        return False\n    \n    unique_nums = set()\n    for num in x:\n        if not has_even_digit(num):\n            unique_nums.add(num)\n    \n    return sorted(list(unique_nums))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef replace_by_name(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[int(digit)] for digit in arr]\n\ndef sortAndReplace(arr):\n    arr = [num for num in arr if 1 <= num <= 9]\n    arr = by_length(arr)\n    arr = replace_by_name(arr)\n    arr.reverse()\n    return arr"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef sum_of_numbers(n):\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    if even_count == 0:\n        return \"NO\"\n    if odd_count == 0:\n        return \"YES\"\n    if even_count == len(lst1) or odd_count == len(lst1):\n        return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    \n    letter_count = {}\n    max_count = 0\n    \n    for char in test:\n        if char.isalpha():\n            char = char.lower()\n            if char in letter_count:\n                letter_count[char] += 1\n            else:\n                letter_count[char] = 1\n            max_count = max(max_count, letter_count[char])\n    \n    result = {}\n    for char, count in letter_count.items():\n        if count == max_count:\n            result[char] = count\n    \n    return result"}
{"task_id": "HumanEval/112", "completion": "    for i in c:\n        s = s.replace(i,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    bucket_count = math.ceil(rows * cols / capacity)\n    return bucket_count"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char.lower() not in 'aeiou') == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels and word[i + 1] in vowels:\n            return word[i + 1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "    if date.count('-') != 2:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1 or day > 31:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n        return False\n    \n    if month in [4, 6, 9, 11] and day < 1 or day > 30:\n        return False\n    \n    if month == 2 and day < 1 or day > 29:\n        return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words\n\n\ndef count_odd_lowercase_letters(txt):\n    count = 0\n    for char in txt:\n        if char.islower() and ord(char) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersection_length = end - start\n    if intersection_length < 0:\n        return \"NO\"\n    elif intersection_length == 0:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num\n    sign = 1 if product > 0 else -1 if product < 0 else 0\n    return sum(abs(num) * sign for num in arr)"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    ans = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                ans.append(grid[i][j])\n                if len(ans) == k:\n                    return ans\n                if i > 0:\n                    ans.append(grid[i-1][j])\n                if i < n-1:\n                    ans.append(grid[i+1][j])\n                if j > 0:\n                    ans.append(grid[i][j-1])\n                if j < m-1:\n                    ans.append(grid[i][j+1])\n    return ans"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        a, b, c = 1, 3, 2\n        for _ in range(2, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "    if n == 0:\n        return 0\n    return n % 10 * digits(n // 10)"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    lst = [int(x) for x in lst]\n    lst = [x**2 for x in lst]\n    return sum(lst)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isspace():\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    if not lst:\n        return (None, None)\n    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n    if not neg_integers or not pos_integers:\n        return (None, None)\n    return (max(neg_integers), min(pos_integers))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return None\n    elif type(a) == int:\n        return a if a > b else b\n    elif type(a) == float:\n        return a if a > b else b\n    elif type(a) == str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        return a if float(a) > float(b) else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    for i in range(1, n//2 + 1):\n        if i % 2 != 0:\n            continue\n        for j in range(i, n//2 + 1):\n            if j % 2 != 0:\n                continue\n            for k in range(j, n//2 + 1):\n                if k % 2 != 0:\n                    continue\n                if i + j + k == n:\n                    return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts[0]) > 3 or len(parts[1]) > 3:\n        return 'No'\n    if not parts[0].isalpha() or not parts[1].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if (i % 3 == 0 and i % 4 != 0) or (i % 4 == 0 and i % 3 != 0):\n            total += lst[i] ** 2\n        else:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    if x_den == n_den:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    for i in range(n):\n        count[a[i] % 3] += 1\n    return count[0] * (count[0] - 1) * (count[0] - 2) // 6 + count[1] * count[2] * count[0]"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return x\n    if n == 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "    return [abs(game[i]-guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        strength = extension.count('A') - extension.count('a')\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "    if len(b) > len(a):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + need\n    if total_eaten <= remaining:\n        return [total_eaten, remaining - total_eaten]\n    else:\n        return [total_eaten, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '/':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            depth -= 1\n            result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    \n    return (sum_numbers, product_numbers)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n    return result"}
{"task_id": "HumanEval/10", "completion": "    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_map[x])\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds x such that poly(x) = 0.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0:\n        return None\n    \n    # Find the largest non zero coefficient\n    max_non_zero = max(i for i in xs if i != 0)\n    \n    # Find the zero point\n    zero_point = -max_non_zero / (xs[-1] - xs[0])\n    \n    return zero_point"}
{"task_id": "HumanEval/33", "completion": "    l' = [l[i] if i % 3 != 0 else sorted([l[i], l[i+1], l[i+2]]) for i in range(len(l))]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 2, 3\n    count = 0\n    while True:\n        if is_prime(b) and b == a + b:\n            count += 1\n            if count == n:\n                return b\n        a, b = b, a + b\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return \"\".join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 0, 1\n    for _ in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            if stack[-1] == \"<\":\n                stack.pop()\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [xs[i] * (i + 1) for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b + b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[1])\n    total_fruits = int(s[2])\n    mangoes = total_fruits - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, a):\n                if a % j == 0:\n                    for k in range(2, a):\n                        if a % k == 0:\n                            if i * j * k == a:\n                                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    root = int(a ** (1 / 3))\n    return root * root * root == a"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = \"0123456789ABCDEF\"\n    prime_digits = \"2357\"\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return starts_one_ends(n-1) + ends_one_ends(n-1)"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while N > 0:\n        sum += N % 2\n        N = N // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result)"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n            result += shifted\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    second_smallest = min(lst)\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    words = S.split()\n    for word in words:\n        if word.startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_char = chr(ord(char) + 26)\n            else:\n                encoded_char = chr(ord(char) + 26)\n        elif char in vowels:\n            encoded_char = chr(ord(char) + 2)\n        else:\n            encoded_char = char\n        encoded_message += encoded_char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    if largest_prime == -1:\n        return 0\n\n    digit_sum = sum(int(digit) for digit in str(largest_prime))\n    return digit_sum"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5)"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i)\n        else:\n            pile.append(i+1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(round(avg))"}
{"task_id": "HumanEval/104", "completion": "    unique_nums = set()\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            unique_nums.add(num)\n    return sorted(unique_nums)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef replace_with_names(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[int(str(x)[0])-1] for x in arr]\n\ndef sort_and_replace(arr):\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr = by_length(arr)\n    arr = replace_with_names(arr)\n    arr.reverse()\n    return arr"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    if even_count == 0:\n        return \"NO\"\n    if odd_count == 0:\n        return \"YES\"\n    if even_count == odd_count:\n        return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    \n    count = {}\n    for char in test.split():\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    max_count = max(count.values())\n    return {k: v for k, v in count.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "    for i in c:\n        s = s.replace(i,'')\n    return s, s[::-1] == s"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows, cols = len(grid), len(grid[0])\n    max_water = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_water = max(max_water, min(i, rows - i) * min(j, cols - j) * capacity)\n    return max_water"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for letter in word if letter.lower() not in 'aeiou') == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return sorted([x for x in collatz_sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    if date.strip() == \"\":\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if year < 1 or year > 9999:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words\n\n\ndef count_odd_lowercase_letters(txt):\n    count = 0\n    for char in txt:\n        if char.islower() and ord(char) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersection_length = end - start\n    if intersection_length < 0:\n        return \"NO\"\n    if intersection_length == 0:\n        return \"NO\"\n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sign_product = 1\n    for num in arr:\n        product *= num\n        sign_product *= 1 if num > 0 else -1 if num < 0 else 0\n    return abs(product) * sign_product"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        if x < 0 or x >= n or y < 0 or y >= m:\n            return None\n        if grid[x][y] == 0:\n            return None\n        if k == 1:\n            return path + [grid[x][y]]\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            new_path = dfs(x + dx, y + dy, k - 1, path + [grid[x][y]])\n            if new_path:\n                return new_path\n        return None\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] != 0:\n                return dfs(i, j, k, [])"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        a, b, c = 1, 3, 2\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    lst = [int(x) for x in lst]\n    return sum([x**2 for x in lst])"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isspace():\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_nums = [x for x in lst if x < 0]\n    pos_nums = [x for x in lst if x > 0]\n    if not neg_nums or not pos_nums:\n        return (None, None)\n    return (max(neg_nums), min(pos_nums))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(',', ''))\n        b = float(b.replace(',', ''))\n    if isinstance(a, str) and isinstance(b, float):\n        a = float(a)\n        b = float(b)\n    if isinstance(a, float) and isinstance(b, str):\n        a = float(a)\n        b = float(b)\n    if isinstance(a, int) and isinstance(b, float):\n        a = float(a)\n        b = float(b)\n    if isinstance(a, float) and isinstance(b, int):\n        a = float(a)\n        b = float(b)\n    if isinstance(a, str) and isinstance(b, int):\n        a = float(a)\n        b = float(b)\n    if isinstance(a, int) and isinstance(b, str):\n        a = float(a)\n        b = float(b)\n    if isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    else:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    if n < 4:\n        return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total_sum += lst[i] ** 3\n    return total_sum"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    if x_den == n_den:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    return count[0] * (count[0] - 1) * (count[0] - 2) // 6 + count[1] * count[2] * count[0]"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))\n\ndef list_sort(lst):\n    return sorted_list_sum(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    odd_squares_sum = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            odd_squares_sum += num ** 2\n    return 2 * odd_squares_sum"}
{"task_id": "HumanEval/152", "completion": "    return [abs(game[i]-guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "    def strength(extension):\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        return cap - sm\n    \n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i + len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    if eaten > remaining:\n        eaten = remaining\n    return [eaten, remaining - eaten]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operand)):\n        stack.append(operand[i])\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack[i] = stack[i] + stack.pop()\n        elif operator[i] == '-':\n            stack[i] = stack[i] - stack.pop()\n        elif operator[i] == '*':\n            stack[i] = stack[i] * stack.pop()\n        elif operator[i] == '/':\n            stack[i] = stack[i] // stack.pop()\n        elif operator[i] == '**':\n            stack[i] = stack[i] ** stack.pop()\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            if stack:\n                stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    current_depth = 0\n    depth_map = {}\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            depth_map[current_depth] = depth_map.get(current_depth, 0) + 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n            depth_map[current_depth] = depth_map.get(current_depth, 0) - 1\n            max_depth = max(max_depth, current_depth)\n    return list(depth_map.values())"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    sum_val = 0\n    product_val = 1\n    for num in numbers:\n        sum_val += num\n        product_val *= num\n    \n    return (sum_val, product_val)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    numbers_list = numbers.split()\n    numbers_list.sort()\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds x such that poly(x) = 0.\n    Returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or max(xs) <= 0:\n        return \"Invalid input: xs should have even number of coefficients and largest non zero coefficient\"\n    \n    # Using Newton's method to find zero\n    x = 0\n    while True:\n        fx = poly(xs, x)\n        if fx == 0:\n            return x\n        dfx = poly([-coeff for coeff in xs], x)\n        x -= fx / dfx"}
{"task_id": "HumanEval/33", "completion": "    l' = [l[i] if i % 3 != 0 else sorted([l[i], l[i+1], l[i+2]])[1] for i in range(len(l))]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups to form the original string\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 2, 3\n    count = 0\n    while count < n:\n        if is_prime(b):\n            count += 1\n            yield b\n        a, b = b, a + b\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    a, b, c, d = 0, 0, 1, 1\n    for _ in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    text = text.lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n = n // 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            n = n // i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(2, n):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[1])\n    total_fruits = int(fruits[2])\n    mangoes = total_fruits - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_even = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            min_index = i\n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(lst[i])\n        else:\n            result.insert(0, lst[i])\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, a):\n                if a % j == 0:\n                    for k in range(2, a):\n                        if a % k == 0:\n                            if i * j * k == a:\n                                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = \"0123456789ABCDEF\"\n    prime_digits = \"2357\"\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    return 10"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = 0\n    while N:\n        binary_sum += N % 2\n        N //= 2\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda tup: (tup[0], -tup[1]))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - 97 + 2) * 2) % 26 + 97)\n            result += shifted\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    second_smallest = min(lst)\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    words = S.split()\n    for i in range(len(words)):\n        if words[i] == \"I\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += chr(ord(char) + 32)\n            else:\n                encoded_message += chr(ord(char) - 32)\n        elif char in vowels:\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum_of_digits(max_prime)"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    first_key = dict.keys()[0]\n    if first_key.islower() or first_key.isupper():\n        return all(key.islower() or key.isupper() for key in dict.keys())\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i+1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(round(avg))"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef by_digit(arr):\n    return sorted(arr, key=lambda x: (x < 10, x))\n\ndef reverse_and_replace(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num))\n    result.reverse()\n    return [str(num) for num in range(1, 10)]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    if even_count == 0:\n        return \"NO\"\n    if odd_count == 0:\n        return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    for char in test.split():\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    max_count = max(count.values())\n    return {key: value for key, value in count.items() if value == max_count}"}
{"task_id": "HumanEval/112", "completion": "    for i in c:\n        s = s.replace(i,'')\n    return s,s==s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows, cols = len(grid), len(grid[0])\n    max_water = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_water = max(max_water, min(i, rows - i) * min(j, cols - j) * capacity)\n    return max_water"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for char in word:\n            if char.lower() not in \"aeiou\":\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    last_vowel = -1\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            last_vowel = i\n            break\n    if last_vowel == -1:\n        return \"\"\n    for i in range(last_vowel + 1, len(word)):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    sequence = []\n    while n != 1:\n        sequence.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    sequence.append(1)\n    return sorted([x for x in sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if year < 0:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start > end:\n        return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sign_sum = 0\n    for num in arr:\n        product *= num\n        sign_sum += 1 if num > 0 else -1 if num < 0 else 0\n    return abs(product) * sign_sum"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        if x < 0 or x >= n or y < 0 or y >= m:\n            return None\n        if grid[x][y] == -1:\n            return None\n        if grid[x][y] == k:\n            return path + [grid[x][y]]\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            res = dfs(x + dx, y + dy, k - 1, path + [grid[x][y]])\n            if res:\n                return res\n        return None\n    \n    for i in range(n):\n        for j in range(m):\n            res = dfs(i, j, k, [])\n            if res:\n                return res\n    return []"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        a, b, c = 1, 3, 2\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return [1] + [d] * (n - 1)"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    return sum(int(x)**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    words = txt.split()\n    if last_char in words[-1]:\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n    if not neg_nums or not pos_nums:\n        return (None, None)\n    return (max(neg_nums), min(pos_nums))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return None\n    elif type(a) == int:\n        return a if a > b else b\n    elif type(a) == float:\n        return a if a > b else b\n    elif type(a) == str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        return a if float(a) > float(b) else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n % 4 == 0"}
{"task_id": "HumanEval/139", "completion": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\")"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts[0]) > 3 or len(parts[1]) > 3:\n        return 'No'\n    if not parts[0].isalpha() or not parts[1].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    if x_den == n_den:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    return count[0] * (count[0] - 1) // 2 + count[1] * count[2]"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))\n\ndef list_sort(lst):\n    return sorted_list_sum(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    def strength(extension):\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        return cap - sm\n    \n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "    if len(b) > len(a):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i + len(b)] == b or a[i:i + len(b)] == a[i:i + len(b)][::-1]:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + need\n    if total_eaten <= remaining:\n        return [total_eaten, remaining - total_eaten]\n    else:\n        return [total_eaten, remaining]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operand)):\n        if operator[i] == '+':\n            stack.append(operand[i])\n        elif operator[i] == '-':\n            stack.append(-operand[i])\n        elif operator[i] == '*':\n            stack.append(stack.pop() * operand[i])\n        elif operator[i] == '/':\n            stack.append(stack.pop() // operand[i])\n        elif operator[i] == '**':\n            stack.append(stack.pop() ** operand[i])\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            max_depth += 1\n        elif char == ')':\n            if stack:\n                stack.pop()\n                max_depth -= 1\n    return [max_depth] * len(paren_string.split())"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    \n    return (sum_numbers, product_numbers)"}
{"task_id": "HumanEval/9", "completion": "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n    return max_list"}
{"task_id": "HumanEval/10", "completion": "    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    numbers_list = numbers.split()\n    numbers_list.sort()\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds x such that poly(x) = 0.\n    Returns only the zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or max(xs) < 0:\n        return \"Invalid input\"\n    \n    # Using Newton's method to find zero\n    x = 0\n    while True:\n        fx = poly(xs, x)\n        if fx == 0:\n            return x\n        dfx = poly(xs, x + 0.0001) - fx\n        if abs(dfx) < 0.0001:\n            return round(x, 2)\n        x -= fx / dfx"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    for i in range(n):\n        if i % 3 == 0:\n            l[i] = sorted(l[i])\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 2, 3\n    while True:\n        c = a + b\n        if c > n:\n            return b\n        if is_prime(c):\n            return c\n        a, b = b, c"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l)-2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, p-2, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    return list(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [0]\n    else:\n        return [xs[i] * i for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b + b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    if shift >= len(num_str):\n        return num_str[::-1]\n    else:\n        return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[1])\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, a // i):\n                if a % (i * j) == 0:\n                    for k in range(2, a // (i * j)):\n                        if a % (i * j * k) == 0:\n                            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = \"0123456789ABCDEF\"\n    prime_digits = \"2357\"\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 10\n    elif n == 2:\n        return 9\n    else:\n        return 9 * (n - 1)"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while N:\n        sum += N % 2\n        N = N // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result)"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    second_smallest = min(lst)\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i].startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_char = chr(ord(char) + 26)\n            else:\n                encoded_char = chr(ord(char) + 26)\n            if encoded_char in vowels:\n                encoded_char = chr(ord(encoded_char) + 2)\n        else:\n            encoded_char = char\n        encoded_message += encoded_char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i)\n        else:\n            pile.append(i+1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y)\n    elif x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "    unique_nums = set()\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            unique_nums.add(num)\n    return sorted(unique_nums)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef reverse_and_replace(arr):\n    return [str(i) for i in arr[::-1]]\n\ndef replace_with_names(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[int(i)] for i in arr]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef sum_of_numbers(n):\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n    for num in lst2:\n        if num % 2 == 0:\n            even_count -= 1\n    return \"YES\" if even_count == 0 else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    for char in test.split():\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    max_count = max(count.values())\n    return {k: v for k, v in count.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "    for i in c:\n        s = s.replace(i,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows, cols = len(grid), len(grid[0])\n    bucket_count = math.ceil(rows * cols / capacity)\n    buckets = [0] * bucket_count\n    for i in range(rows):\n        for j in range(cols):\n            buckets[i * cols + j] += grid[i][j]\n    return max(buckets)"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char.lower() not in 'aeiou') == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels and word[i + 1] in vowels:\n            return word[i + 1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    collatz = []\n    while n != 1:\n        collatz.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return sorted([x for x in collatz if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start > end:\n        return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sum_magnitude = 0\n    for num in arr:\n        product *= 1 if num > 0 else -1 if num < 0 else 0\n        sum_magnitude += abs(num) * product\n    return sum_magnitude"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(i, j, k, path):\n        if k == 0:\n            return path\n        if i < 0 or i >= n or j < 0 or j >= m or grid[i][j] == 0:\n            return None\n        \n        path.append(grid[i][j])\n        \n        for x, y in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_path = dfs(i + x, j + y, k - 1, path)\n            if new_path:\n                return new_path\n        \n        path.pop()\n        return None\n    \n    result = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] != 0:\n                path = dfs(i, j, k, [])\n                if path:\n                    result = path\n    \n    return result"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i - 3])\n        return tri_list"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    lst = [int(x) for x in lst]\n    lst = [x**2 for x in lst]\n    return sum(lst)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isspace():\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n    if not neg_nums or not pos_nums:\n        return (None, None)\n    else:\n        return (max(neg_nums), min(pos_nums))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(',', ''))\n    if isinstance(b, str):\n        b = float(b.replace(',', ''))\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    for i in range(2, n//2+1, 2):\n        if n - i >= i:\n            return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(' ', '_').replace('  ', '-')"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3:\n        return \"No\"\n    if file_name.count('.') != 1:\n        return \"No\"\n    if not file_name.split('.')[0]:\n        return \"No\"\n    if not file_name.split('.')[1] in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    if x_den == n_den:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    return (count[0] * (count[0] - 1) * (count[0] - 2)) // 6 + (count[1] * (count[1] - 1) * (count[1] - 2)) // 6 + (count[2] * (count[2] - 1) * (count[2] - 2)) // 6"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))\n\ndef list_sort(lst):\n    return sorted_list_sum(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return x\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares * 2"}
{"task_id": "HumanEval/152", "completion": "    return [abs(guess[i] - game[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = ''\n    max_strength = -1\n    for extension in extensions:\n        strength = extension.count('A') - extension.count('a')\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    if eaten <= remaining:\n        return [eaten, remaining - eaten]\n    else:\n        return [eaten, 0]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for op in operator:\n        if op == '+':\n            stack.append(operand.pop(0) + operand.pop(0))\n        elif op == '-':\n            stack.append(operand.pop(0) - operand.pop(0))\n        elif op == '*':\n            stack.append(operand.pop(0) * operand.pop(0))\n        elif op == '/':\n            stack.append(operand.pop(0) // operand.pop(0))\n        elif op == '**':\n            stack.append(operand.pop(0) ** operand.pop(0))\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits"}
