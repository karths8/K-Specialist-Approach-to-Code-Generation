{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(deviations)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(delimeter)\n        result.append(num)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    def get_depth(s: str) -> int:\n        depth = 0\n        max_depth = 0\n        for char in s:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            else:\n                depth -= 1\n        return max_depth\n    \n    result = []\n    for group in paren_string.split():\n        result.append(get_depth(group))\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    return (sum_numbers, product_numbers)"}
{"task_id": "HumanEval/9", "completion": "    max_list = []\n    rolling_max = []\n    for number in numbers:\n        rolling_max.append(number)\n        if len(rolling_max) > 1:\n            rolling_max.pop(0)\n        if len(rolling_max) == 1:\n            rolling_max.append(max(rolling_max))\n        max_list.append(rolling_max[-1])\n    return max_list"}
{"task_id": "HumanEval/10", "completion": "    for i in range(len(string) - 1, -1, -1):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            return prefix + string + suffix[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(min(len(a), len(b))):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    if len(a) > len(b):\n        result += a[len(b):]\n    else:\n        result += b[len(a):]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    longest_string = strings[0]\n    for s in strings:\n        if len(s) > len(longest_string):\n            longest_string = s\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(x) for x in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    beats_list = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            beats_list.append(4)\n            i += 1\n        elif music_string[i] == 'o|':\n            beats_list.append(2)\n            i += 1\n        elif music_string[i] == '.':\n            beats_list.append(1)\n            i += 1\n        else:\n            raise ValueError(\"Invalid note in music string\")\n    return beats_list"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    index = 0\n    while True:\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        count += 1\n        index += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_map[x]))"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    closest_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < closest_diff:\n            closest_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    result = [(x - min_val) / (max_val - min_val) for x in numbers]\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    prime_factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            prime_factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return prime_factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return list(filter(lambda x: x > 0, l))"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Given a list xs containing coefficients of a polynomial,\n    return the zero point of the polynomial.\n    Find_zero returns only the zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        return None\n    for i in range(len(xs) // 2, -1, -1):\n        if xs[i] == 0:\n            return xs[i + 1]\n    return None"}
{"task_id": "HumanEval/33", "completion": "    result = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            result.append(l[i])\n        else:\n            result.append(sorted([l[i]]))\n    return result"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if len(l) == 0:\n        return None\n    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0):\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    result = l[:]\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result[i] = sorted(l[i])\n    return result"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded string using cyclic decoding.\n    \"\"\"\n    # split string to groups of three characters. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # join elements of each group\n    result = \"\".join(groups)\n    return result"}
{"task_id": "HumanEval/39", "completion": "    fib_nums = [2, 3]\n    while True:\n        new_fib = fib_nums[-1] + fib_nums[-2]\n        fib_nums.append(new_fib)\n        for i in range(2, int(new_fib**0.5)+1):\n            if new_fib % i == 0:\n                break\n        else:\n            return new_fib"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [i + 1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return \"\".join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    a, b, c = 0, 0, 2\n    for _ in range(3, n+1):\n        a, b, c = b, c, a + b + c\n    return c"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    res = 1\n    while n:\n        if n % 2 == 1:\n            res = (res * 2) % p\n        n = n // 2\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character back by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"AEIOUaeiou\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    while y != 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    for bracket in brackets:\n        if bracket in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[bracket] != top_element:\n                return False\n        else:\n            stack.append(bracket)\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    # convert both lists to set to get unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n    # find common elements and sort\n    return sorted(list(set1 & set2))"}
{"task_id": "HumanEval/59", "completion": "    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(n ** 0.5)+1, 2):\n        while n % i == 0:\n            n = n // i\n    return n if n > 2 else 2"}
{"task_id": "HumanEval/60", "completion": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    result = [0] * len(xs)\n    for i in range(len(xs) - 1):\n        result[i] = i * xs[i]\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/67", "completion": "    a = s.split(\" \")\n\tapples = int(a[1])\n\toranges = int(a[0])\n\tmangoes = n - apples - oranges\n\treturn mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_even = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            min_index = i\n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    return [lst.pop(0)] + strange_sort_list(lst[::-1]) + lst.pop(-1)"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    \n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "    for num1 in range(2, a):\n        if a % num1 == 0:\n            num2 = a / num1\n            if num2 >= 2:\n                for num3 in range(2, num2):\n                    if num2 % num3 == 0:\n                        prime1 = num1\n                        prime2 = num2 / num1\n                        prime3 = num3\n                        if prime1 * prime2 * prime3 == a and is_prime(prime1) and is_prime(prime2) and is_prime(prime3):\n                            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if n == 1:\n        return x == 1\n    for i in range(1, x):\n        if x % n == 0:\n            x = x // n\n        else:\n            return False\n    return x == 1"}
{"task_id": "HumanEval/77", "completion": "    if a <= 0:\n        return True\n    root = int(a ** (1 / 3))\n    return root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    count = 0\n\tfor i in range(len(num)):\n\t\tif num[i] in \"2357\":\n\t\t\tcount += 1\n\treturn count\n\ndef isPrime(n: int) -> bool:\n\tif n <= 1:\n\t\treturn False\n\tif n <= 3:\n\t\treturn True\n\tif n % 2 == 0 or n % 3 == 0:\n\t\treturn False\n\ti = 5\n\twhile i * i <= n:\n\t\tif n % i == 0 or n % (i + 2) == 0:\n\t\t\treturn False\n\t\ti += 6\n\treturn True\n\ndef count_prime_hex_digits(num: str) -> int:\n\tcount = 0\n\tfor i in range(len(num)):\n\t\tif isPrime(int(num[i], 16)):\n\t\t\tcount += 1\n\treturn count"}
{"task_id": "HumanEval/79", "completion": "    if decimal < 0:\n        return \"Invalid input. Please enter a non-negative number.\"\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3.0:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2.0:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        elif grade >= 0.0:\n            letter_grades.append(\"D-\")\n        elif grade >= 0.0:\n            letter_grades.append(\"E\")\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    n = len(string)\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return (10 * (10 - 1) + 1) * (10 - 1)"}
{"task_id": "HumanEval/84", "completion": "    cnt = 0\n\twhile (N):\n\t\tcnt += (N % 2)\n\t\tN = N // 2\n\treturn bin(cnt)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "completion": "    sorted_word = ''.join(sorted(s))\n    words = s.split()\n    result = []\n    i = 0\n    for word in words:\n        if len(word) <= 1:\n            result.append(word)\n        else:\n            result.append(sorted_word[i:i+len(word)])\n            i += len(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if len(array) < 2:\n        return array\n    mid = len(array) // 2\n    if (array[0] + array[len(array)-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr((ord(char) - 65 + 2 * 2) % 26 + 65)\n            encrypted_string += shifted_char\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst[:2])\n    for i in range(2, len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    return smallest"}
{"task_id": "HumanEval/91", "completion": "    boredoms = 0\n    for word in S.split():\n        if word == \"I\":\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "    if (x + y == z) or (x + z == y) or (y + z == x):\n        return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "    encoded = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded += chr(ord(char) + 26)\n            else:\n                encoded += chr(ord(char) - 26)\n        elif char in 'aeiouAEIOU':\n            encoded += chr((ord(char) - 97 + 2) % 26 + 97)\n        else:\n            encoded += char\n    return encoded"}
{"task_id": "HumanEval/94", "completion": "    max_prime = float('-inf')\n    for i in range(len(lst)):\n        if lst[i] > 1 and lst[i] not in [0, 1, 4, 6, 8, 9]:\n            j = 2\n            while (i + j) <= len(lst):\n                if (i + j) > len(lst) - 1:\n                    break\n                if lst[i + j] == lst[i] * lst[i + j] and (i + j) > max_prime:\n                    max_prime = i + j\n                j += 1\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    return all(isinstance(key, str) and key.islower() for key in dict.keys()) or all(isinstance(key, str) and key.isupper() for key in dict.keys())"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        if all(num % i != 0 for i in range(2, int(num**0.5)+1)):\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    if value == \"\":\n        return 0\n    num = float(value)\n    return int(num + 0.5)"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i)\n        else:\n            pile.append(i+1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    for num in range(y, x - 1, -2):\n        if num % 2 == 0:\n            return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/104", "completion": "    unique_nums = set()\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            unique_nums.add(num)\n    return sorted(unique_nums)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\n\ndef replaceWithName(arr):\n    return [f\"{i}-digit name\" for i in arr]\n\n\ndef main(arr):\n    arr = [i for i in arr if i in range(1, 10)]\n    arr = by_length(arr)\n    arr.reverse()\n    arr = replaceWithName(arr)\n    return arr"}
{"task_id": "HumanEval/106", "completion": "    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    \n    max_index = arr.index(max(arr))\n    for i in range(max_index):\n        if arr[i] >= arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    count = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            if lst2[i] % 2 != 0:\n                lst1[i] = lst2[i]\n                lst2[i] = lst1[i]\n                count += 1\n            else:\n                lst1[i] = lst2[i]\n    return count == 0"}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    for char in test:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    max_count = max(count.values())\n    return {key: value for key, value in count.items() if value == max_count}"}
{"task_id": "HumanEval/112", "completion": "    if s==c:\n        return (s,False)\n    i=0\n    res=\"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            res+=s[i]\n    return (res,res==res[::-1])"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = sum(int(c) % 2 != 0 for c in s)\n        result.append(f\"the number of odd elements {odd_count} in the str{odd_count}ng \"\n                       f\"string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = float('inf')\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    count = 0\n    for i in range(len(grid)):\n        max_water = 0\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                max_water = max(max_water, capacity)\n        count += math.ceil(max_water/capacity)\n    return count"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        count = sum(1 for c in word if c.lower() not in 'aeiou')\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    last_consonant = -1\n    for i in range(len(word)-1, -1, -1):\n        if word[i] not in vowels:\n            last_consonant = i\n            break\n    if last_consonant == -1:\n        return \"\"\n    for i in range(last_consonant+1, len(word)):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    open_count, close_count = 0, 0\n    for s in lst:\n        for c in s:\n            if c == '(':\n                open_count += 1\n            elif c == ')':\n                open_count -= 1\n            if open_count < 0:\n                return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/120", "completion": "    max_heap = [-x for x in arr]\n    heapq.heapify(max_heap)\n    \n    for _ in range(k):\n        res = -heapq.heappop(max_heap)\n        if res != -k:\n            heapq.heappush(max_heap, -res)\n    \n    return [-x for x in max_heap]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    collatz_list = []\n    current = n\n    while current != 1:\n        if current % 2 != 0:\n            collatz_list.append(current)\n        if current % 2 == 0:\n            current = current // 2\n        else:\n            current = 3 * current + 1\n    return sorted(collatz_list)"}
{"task_id": "HumanEval/124", "completion": "    try:\n        month, day, year = date.split('/')\n        if not month.isdigit() or not day.isdigit() or not year.isdigit():\n            return False\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12 or day < 1 or day > 31:\n            return False\n        if month == 2:\n            if day < 1 or day > 29:\n                return False\n        if month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        return True\n    except:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split(' ')\n    if len(words) > 1:\n        return words\n    else:\n        return list(filter(lambda x: x.islower(), txt))"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    intersect = (max(start1, start2), min(end1, end2))\n    if intersect[0] >= intersect[1]:\n        return \"NO\"\n    intersectLength = intersect[1] - intersect[0]\n    return \"YES\" if isPrime(intersectLength) else \"NO\"\n\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product_sign = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product_sign *= -1 if num < 0 else 1\n        sum_magnitudes += abs(num)\n    return sum_magnitudes * product_sign"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    dist = [[float('inf')] * m for _ in range(n)]\n    dist[0][0] = 0\n\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    q = []\n    q.append((0, 0, 1))\n\n    while q:\n        x, y, curr_dist = q.pop(0)\n        if curr_dist > k:\n            continue\n        for dx, dy in directions:\n            new_x, new_y = x + dx, y + dy\n            if 0 <= new_x < n and 0 <= new_y < m:\n                temp_dist = curr_dist + 1\n                if temp_dist < dist[new_x][new_y]:\n                    dist[new_x][new_y] = temp_dist\n                    q.append((new_x, new_y, temp_dist))\n                if temp_dist == k:\n                    return [grid[x][y] for x, y in [(0, 0), (new_x, new_y)]]\n    return []"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [3]\n    if n == 1:\n        return [1, 3]\n    tri_sequence = [1, 3]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            tri_sequence.append(1 + i // 2)\n        else:\n            tri_sequence.append(tri_sequence[i-1] + tri_sequence[i-2] + tri_sequence[i])\n    return tri_sequence"}
{"task_id": "HumanEval/131", "completion": "    if n == 0:\n        return 0\n    else:\n        return (n % 10) * digits(n // 10)"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                return True\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    total = 0\n    for num in lst:\n        total += int(num)**2\n    return total"}
{"task_id": "HumanEval/134", "completion": "    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if last_char.isspace():\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            return i+1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    if not lst:\n        return (None, None)\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    if not negatives or not positives:\n        return (None, None)\n    return (max(negatives), min(positives))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) != type(b):\n        return None\n    if isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        if a.replace(',', '') > b.replace(',', ''):\n            return a\n        elif a.replace(',', '') < b.replace(',', ''):\n            return b\n        else:\n            return None\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 4 == 1:\n        return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(' ', '_')"}
{"task_id": "HumanEval/141", "completion": "    if '.' in file_name:\n        parts = file_name.split('.')\n        if len(parts) != 2:\n            return \"No\"\n        \n        before_dot = parts[0]\n        after_dot = parts[1]\n        \n        if not before_dot.isalnum() or not after_dot in ['txt', 'exe', 'dll']:\n            return \"No\"\n    else:\n        return \"No\"\n    \n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i%3 == 0 and i%4 != 0:\n            lst[i] = lst[i]*lst[i]\n        elif i%4 == 0 and i%3 != 0:\n            lst[i] = lst[i]*lst[i]*lst[i]\n        else:\n            pass\n    return sum(lst)"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = [word for word in words if len(word) in {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}]\n    return \" \".join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def simplify_fraction(x, n):\n        lcm = (int(x) * int(n)) // gcd(int(x), int(n))\n        return (lcm // int(x)) * (lcm // int(n))\n    \n    result = simplify_fraction(x, n)\n    return int(result) == result"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (int(str(abs(num))[0]) % 2 != 0 or int(str(abs(num))[-1]) % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    max_count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    max_count += 1\n    return max_count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    lst = [x for x in lst if len(x) % 2 == 0]\n    return sorted(lst)\n\ndef list_sort(lst):\n    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return -1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    odd_nums = [num for num in lst if isinstance(num, int) and num % 2 != 0]\n    return sum(x**2 for x in odd_nums)"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    def extension_strength(extension):\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        return cap_count - sm_count\n\n    strongest_extension = max(extensions, key=extension_strength)\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i + len(b)] == b or a[i:i + len(b)] == a[i:i + len(b)][::-1]:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while (num > 0):\n        digit = num % 10\n        if (digit % 2 == 0):\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number\n    left = remaining - need\n    eaten += need\n    if left < 0:\n        eaten += left\n        left = 0\n    return [eaten, left]"}
{"task_id": "HumanEval/160", "completion": "    result = 0\n    operator_index = 0\n    operand_index = 0\n    while operator_index < len(operator) and operand_index < len(operand):\n        if operator[operator_index] == '+':\n            result += operand[operand_index]\n            operand_index += 1\n        elif operator[operator_index] == '-':\n            result -= operand[operand_index]\n            operand_index += 1\n        elif operator[operator_index] == '*':\n            result *= operand[operand_index]\n            operand_index += 1\n        elif operator[operator_index] == '/':\n            result //= operand[operand_index]\n            operand_index += 1\n        elif operator[operator_index] == '^':\n            result **= operand[operand_index]\n            operand_index += 1\n        operator_index += 1\n    return result"}
{"task_id": "HumanEval/161", "completion": "    stack = []\n    for char in s:\n        if char.isalpha():\n            stack.append(char.lower())\n            stack.append(char.upper())\n        else:\n            stack.append(char)\n    return ''.join(stack)"}
{"task_id": "HumanEval/162", "completion": "    if text == \"\":\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    even_digits = [int(d) for d in str(a) if int(d) % 2 == 0]\n    even_digits += [int(d) for d in str(b) if int(d) % 2 == 0]\n    even_digits.sort()\n    return even_digits"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                result.append(''.join(stack))\n    return result"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n\tdecimal_part = number - integer_part\n\treturn decimal_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    res = []\n    depth = 0\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            res.append(depth)\n            depth -= 1\n    return res"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return (total_sum, total_product)"}
{"task_id": "HumanEval/9", "completion": "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n    return max_list"}
{"task_id": "HumanEval/10", "completion": "    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    carry = 0\n    for i in range(max(len(a), len(b))):\n        x = int(a[-1-i]) if i < len(a) else 0\n        y = int(b[-1-i]) if i < len(b) else 0\n        bit = x ^ y ^ carry\n        carry = (x & y) | (x & carry) | (y & carry)\n        result = str(bit) + result\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    set_chars = set(string.lower())\n    return len(set_chars)"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for char in music_string:\n        if char == 'o':\n            beats.append(4)\n        elif char == 'o|':\n            beats.append(2)\n        elif char == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    n = len(string)\n    m = len(substring)\n    for i in range(n - m + 1):\n        if string[i:i + m] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    numbers_list = [num for num in numbers.split()]\n    numbers_list.sort()\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    pair = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            pair = (numbers[i], numbers[i+1])\n    return pair"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    res = []\n    # Number of 2s that divide n\n    while n % 2 == 0:\n        res.append(2)\n        n = n // 2\n    # n must be odd at this point\n    # So a skip of 2 ( i = i + 2 ) can be used\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n\n        while n % i == 0:\n            res.append(i)\n            n = n // i\n    # If n is a prime number greater than 2\n    if n > 2:\n        res.append(n)\n    return res"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"}
{"task_id": "HumanEval/28", "completion": "    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return list(filter(lambda x: x > 0, l))"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds x such that poly(x) = 0.\n    return x with highest non zero coefficient or zero if all coefficients are zero.\n    \"\"\"\n    roots = []\n    if len(xs) % 2 != 0:\n        return \"Even number of coefficients required\"\n    max_coeff = max([abs(coeff) for coeff in xs if coeff != 0])\n    for i in range(1, int(max_coeff) + 1):\n        if poly(xs, i) == 0:\n            roots.append(i)\n    if len(roots) == 0:\n        return \"No roots found\"\n    return roots[0]"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    for i in range(n):\n        if i % 3 == 0:\n            l[i] = sorted([l[i], l[i]])\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(dict.fromkeys(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l = [i for i in l if i % 2 == 0]\n    l.sort()\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n    count = 0\n    while True:\n        if is_prime(a) and is_fibonacci(a) and count < n:\n            return a\n        a, b = b, a + b\n        count += 1\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_fibonacci(num):\n    if num == 0 or num == 1:\n        return True\n    a, b = 0, 1\n    while b < num:\n        a, b = b, a + b\n    return b == num"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l)-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        l2 = []\n        for j in range(i+1, len(l)):\n            if j > i+1 and l[j] == l[j-1]:\n                continue\n            l2.append(l[j])\n            if -(l[i] + l[j]) in l2:\n                return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [i + 1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]"}
{"task_id": "HumanEval/48", "completion": "    text = text.lower()\n    left, right = 0, len(text) - 1\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet in the opposite direction.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"AEIOUaeiou\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    while (y != 0):\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack[-1] != '<':\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 3:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    result = []\n    for i in l1:\n        if i in l2 and i not in result:\n            result.append(i)\n    return sorted(result)"}
{"task_id": "HumanEval/59", "completion": "    while n % 2 == 0:\n        n //= 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    res = [0] * (n - 1)\n    for i in range(1, n):\n        res[i - 1] = (i * xs[i])\n    return res"}
{"task_id": "HumanEval/63", "completion": "    fib = [0] * (n+1)\n    fib[0] = 0\n    fib[1] = 0\n    if n <= 2:\n        return fib[n]\n    a, b = 0, 1\n    for i in range(3, n+1):\n        fib[i] = a + b + fib[i-1]\n        a, b = b, fib[i]\n    return fib[n]"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    return n - int(s.split()[0]) - int(s.split()[2])"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    smallest_even = float('inf')\n    smallest_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_even:\n            smallest_even = arr[i]\n            smallest_index = i\n    return [smallest_even, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    \n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    lst.remove(min_val)\n    lst.remove(max_val)\n    return [min_val] + strange_sort_list(lst) + [max_val]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) > w or q == q[::-1]:\n        return False\n    return True"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, i):\n                if i % j == 0:\n                    for k in range(2, i//j):\n                        if i == j * k:\n                            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    return x > 0 and (n**int(x**(1/n)) == x)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return True\n    else:\n        cube_root = round(a ** (1/3))\n        return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    hex_digit_primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for char in num:\n        if char.isdigit():\n            num = int(char)\n            if num in range(2, num) and num > 1:\n                count += 1\n        elif char.isupper():\n            num = ord(char) - ord('A') + 10\n            if num > 9 and num > 1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    grade_points = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'F']\n    grade_points_count = [0]*len(grade_points)\n    \n    for grade in grades:\n        for i in range(len(grade_points)):\n            if grade >= grade_points[i]:\n                grade_points_count[i] += 1\n                break\n    \n    result = []\n    for i in range(len(grade_points)):\n        result.append(letter_grades[i])\n    \n    return result"}
{"task_id": "HumanEval/82", "completion": "    if len(string) < 2:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    start = 1\n    end = 10\n    count = 0\n    while start <= end:\n        if start % 10 == 1:\n            count += n\n        elif end % 10 == 1:\n            count += n\n        start += 1\n        end -= 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while N > 0:\n        sum += N % 2\n        N //= 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum([x for x in lst[1::2] if x % 2 == 0])"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_words.append(new_word)\n    return ' '.join(new_words)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "    n = len(array)\n    if (n == 0):\n        return []\n    if (n == 1):\n        return array\n    \n    odd_sum = sum(array[0], array[n-1])\n    if (odd_sum % 2 == 0):\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    return ''.join(chr((ord(c) - ord('a') + 2) % 26 + ord('a')) for c in s)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    first = min(lst)\n    lst.remove(first)\n    second_smallest = min(lst)\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    words = S.split('.')\n    for word in words:\n        if word.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    def swapCase(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    def replaceVowels(char):\n        vowels = \"aeiouAEIOU\"\n        if char in vowels:\n            index = vowels.index(char)\n            if index + 2 < len(vowels):\n                return vowels[index+2]\n            else:\n                return ' '\n        else:\n            return char\n\n    encoded = ''.join([replaceVowels(swapCase(c)) for c in message])\n    return encoded"}
{"task_id": "HumanEval/94", "completion": "    prime_lst = []\n    for num in lst:\n        if num > 1:\n            for i in range(2, int(num**0.5) + 1):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_lst.append(num)\n    if prime_lst:\n        return max(prime_lst)\n    else:\n        return 0\n\ndef digitSum(n):\n    if n == 0:\n        return 0\n    return (n % 10) + digitSum(n // 10)\n\ndef largestPrimeDigitSum(lst):\n    largest_prime = skjkasdkd(lst)\n    if largest_prime:\n        return digitSum(largest_prime)\n    else:\n        return 0"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower() and any(c.isupper() for c in dict[key]):\n            return False\n        if key.isupper() and any(c.islower() for c in dict[key]):\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    if n < 2:\n        return []\n    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for p in primes:\n            if p > num ** 0.5:\n                break\n            if num % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a%10)*(b%10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    return round(float(value))"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i)\n        else:\n            pile.append(i+1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = (n + m) / 2\n    return bin(round(total))"}
{"task_id": "HumanEval/104", "completion": "    return sorted(filter(lambda i: all(int(digit) % 2 != 0 for digit in str(i)), x))"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef by_digit_name(arr):\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n\ndef sortAndReplace(arr):\n    return by_digit_name(sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True))"}
{"task_id": "HumanEval/106", "completion": "    factorial = [1] * (n + 1)\n    for i in range(2, n + 1):\n        factorial[i] = i * factorial[i - 1]\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial[i])\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if int(str(i)[-1]) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n        elif num < 0:\n            num = abs(num)\n            sum_digits = 0\n            while num > 0:\n                sum_digits += num % 10\n                num //= 10\n            if sum_digits > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    return len(arr) > 1"}
{"task_id": "HumanEval/110", "completion": "    diff = sum(lst1) - sum(lst2)\n    if diff % 2 != 0:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    freq = {}\n    for char in test.split():\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    max_freq = max(freq.values())\n    return {k: v for k, v in freq.items() if v == max_freq}"}
{"task_id": "HumanEval/112", "completion": "    for char in c:\n        s = s.replace(char, '')\n    return s, s[::-1] == s"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for digit in s if int(digit) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {s} of the {len(lst)}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    max_fill = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_fill += math.ceil(1 / capacity)\n    return max_fill"}
{"task_id": "HumanEval/116", "completion": "    def ones(num):\n        return bin(num).count('1')\n    return sorted(arr, key=lambda x: (ones(x), x))"}
{"task_id": "HumanEval/117", "completion": "    result = []\n    words = s.split()\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() not in ['a', 'e', 'i', 'o', 'u']:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    closest_vowel = \"\"\n    \n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                closest_vowel = word[i]\n                break\n    \n    return closest_vowel"}
{"task_id": "HumanEval/119", "completion": "    def is_valid(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            concat = lst[i] + lst[j]\n            if is_valid(concat):\n                return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        total += min(arr[i], 9)\n    return total"}
{"task_id": "HumanEval/123", "completion": "    sequence = []\n    if n == 1:\n        return sequence\n    sequence.append(n)\n    while True:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n        if n == 1:\n            break\n    odd_numbers = [x for x in sequence if x % 2 != 0]\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "completion": "    if date == \"\":\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        return month > 0 and month <= 12 and day > 0 and day <= 31 and year > 0\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words\n\ndef count_odd_lowercase_letters(txt):\n    return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n\ndef split_words_and_count(txt):\n    words = split_words(txt)\n    return words, count_odd_lowercase_letters(txt)"}
{"task_id": "HumanEval/126", "completion": "    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "HumanEval/127", "completion": "    l1, r1 = interval1\n    l2, r2 = interval2\n    l = max(l1, l2)\n    r = min(r1, r2)\n    intersection_length = r - l\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length**0.5)+1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign = 1\n    for num in arr:\n        if num < 0:\n            sign *= -1\n    product = 1\n    for num in arr:\n        product *= num\n    return abs(product) * sign * len(arr)"}
{"task_id": "HumanEval/129", "completion": "    if k == 0:\n        return []\n    rows = len(grid)\n    cols = len(grid[0])\n    dist = [[float('inf')] * cols for _ in range(rows)]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    queue = []\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    queue.append((0, 0))\n    visited[0][0] = True\n    dist[0][0] = 0\n    \n    while queue:\n        i, j = queue.pop(0)\n        for dx, dy in directions:\n            x = i + dx\n            y = j + dy\n            if 0 <= x < rows and 0 <= y < cols and not visited[x][y]:\n                if grid[i][j] < grid[x][y] and dist[x][y] > dist[i][j] + 1:\n                    dist[x][y] = dist[i][j] + 1\n                    queue.append((x, y))\n                    visited[x][y] = True\n    \n    result = []\n    i, j = rows - 1, cols - 1\n    while i >= 0 and j >= 0:\n        result.append(grid[i][j])\n        for dx, dy in directions:\n            x = i + dx\n            y = j + dy\n            if 0 <= x < rows and 0 <= y < cols and dist[x][y] == dist[i][j] - 1:\n                i, j = x, y\n                break\n        else:\n            i, j = i - 1, j - 1\n    return result[::-1]"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [0]\n    elif n == 1 or n == 2:\n        return [1, 3]\n    else:\n        tri_list = [1, 3]\n        for i in range(3, n):\n            tri_list.append(tri_list[i-1] + tri_list[i-2] + tri_list[i-3])\n        return tri_list"}
{"task_id": "HumanEval/131", "completion": "    if n == 0:\n        return 1\n    if n < 10:\n        return n\n    return digits(n // 10) * digits(n % 10)"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    return sum(int(x)**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    words = txt.split()\n    if not words:\n        return False\n    last_word = words[-1]\n    if len(last_word) == 0:\n        return False\n    if last_word[-1].isalpha() and (len(last_word) == 1 or not last_word[:-1].isalpha()):\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_index = -1\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "    pos_ints = [x for x in lst if x > 0]\n    neg_ints = [x for x in lst if x < 0]\n    \n    if not pos_ints:\n        return None, None\n    \n    if not neg_ints:\n        return None, None\n    \n    return max(neg_ints), min(pos_ints)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        if float(a) > float(b):\n            return a\n        else:\n            return b\n    elif isinstance(a, float) and isinstance(b, float):\n        if float(a) > float(b):\n            return a\n        else:\n            return b\n    elif isinstance(a, int) and isinstance(b, int):\n        if int(a) > int(b):\n            return a\n        else:\n            return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n < 8:\n        return False\n    for i in range(2, n, 2):\n        if n % i == 0 and n // i >= 2:\n            return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/140", "completion": "    res = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] == \" \":\n            if i+2 < len(text) and text[i+1] == \" \" and text[i+2] == \" \":\n                res += \"-\"\n                i += 3\n            else:\n                res += \"_\"\n                i += 1\n        else:\n            res += text[i]\n            i += 1\n    return res"}
{"task_id": "HumanEval/141", "completion": "    if '..' in file_name or '.' not in file_name or '.'.count('.') > 1 or '.' in file_name[:3] or '.' in file_name[-3:] or file_name[file_name.index('.'):].strip() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if len(word) > 1:\n            if len(word) > 2:\n                for i in range(2, int(len(word)**0.5) + 1):\n                    if len(word) % i == 0:\n                        break\n                else:\n                    result += word + \" \"\n    return result.strip()"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result = x_num * n_num\n    \n    if result % n_den == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and str(abs(num))[0] in ['1', '3', '5', '7', '9'] and str(abs(num))[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    mod3_count = [0, 0, 0]\n    for i in range(1, n + 1):\n        mod3_count[i % 3] += 1\n    return (mod3_count[0] * (mod3_count[0] - 1) // 2) + (mod3_count[1] * (mod3_count[1] - 1) // 2) + (mod3_count[2] * (mod3_count[2] - 1) // 2)"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    startIndex = planets.index(planet1)\n    endIndex = planets.index(planet2)\n    return tuple(planets[startIndex+1:endIndex])"}
{"task_id": "HumanEval/149", "completion": "    lst = [x for x in lst if len(x) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "completion": "    if n == 2 or n == 3 or n == 5 or n == 7:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            sum_of_squares += num**2\n    return sum_of_squares"}
{"task_id": "HumanEval/152", "completion": "    return [abs(x - y) for x, y in zip(game, guess)]"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = ''\n    max_strength = -1\n    for ext in extensions:\n        if len(ext) == 0:\n            continue\n        cap = sum(1 for c in ext if c.isupper())\n        sm = sum(1 for c in ext if c.islower())\n        strength = cap - sm\n        if strength > max_strength or (strength == max_strength and ext < strongest_extension):\n            max_strength = strength\n            strongest_extension = class_name + '.' + ext\n    return strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    length_a = len(a)\n    length_b = len(b)\n    if length_b > length_a:\n        return False\n    \n    if b in a or b in a[1:length_a] or b in a[2:length_a+1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            result = word\n        elif unique_chars == max_unique_chars and word < result:\n            result = word\n    return result"}
{"task_id": "HumanEval/159", "completion": "    if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + remaining, remaining % need]"}
{"task_id": "HumanEval/160", "completion": "    operand = list(map(int, operand))\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '/':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    res = []\n    for char in s:\n        if char.isalpha():\n            res.append(chr(ord(char) ^ 32))\n        else:\n            res.append(char)\n    return ''.join(res[::-1])"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    hash_md5 = hashlib.md5()\n    hash_md5.update(text.encode('utf-8'))\n    return hash_md5.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    while a <= b:\n        if a % 2 == 0:\n            result.append(a)\n        a += 1\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string.replace(\" \", \"\"):\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                raise ValueError(\"Unmatched closing bracket\")\n            stack.pop()\n            result.append(''.join(stack))\n    return result"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    n = len(numbers)\n    mean = sum(numbers) / n\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / n"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    level = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            level += 1\n        elif char == ')':\n            level -= 1\n        if level < 0:\n            level = 0\n        result.append(level)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)"}
{"task_id": "HumanEval/9", "completion": "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n    return max_list"}
{"task_id": "HumanEval/10", "completion": "    if len(string) < 2:\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string[:i] + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    for note in music_string.split():\n        beat = beats[note]\n        result.append(beat)\n    return result"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_dict = {\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    closest_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < closest_diff:\n            closest_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    result = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    filtered_strings = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered_strings.append(s)\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "    return [i for i in l if i > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Find x such that poly(x) = 0.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or max(xs) < 0:\n        return None\n    \n    # Finding the roots of the polynomial using the formula: x = [-b \u00b1 sqrt(b^2 - 4ac)] / 2a\n    # Where a, b, and c are the coefficients of the quadratic equation\n    a = xs[0]\n    b = -xs[1]\n    c = xs[2]\n    discriminant = b * b - 4 * a * c\n    \n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return -b / (2 * a)\n    else:\n        root1 = (-b - math.sqrt(discriminant)) / (2 * a)\n        root2 = (-b + math.sqrt(discriminant)) / (2 * a)\n        return max(root1, root2)"}
{"task_id": "HumanEval/33", "completion": "    l[::3] = sorted(l[::3])\n    return l"}
{"task_id": "HumanEval/34", "completion": "    l.sort()\n    result = []\n    for ele in l:\n        if not result or ele != result[-1]:\n            result.append(ele)\n    return result"}
{"task_id": "HumanEval/35", "completion": "    maximum = l[0]\n    for i in range(1, len(l)):\n        if l[i] > maximum:\n            maximum = l[i]\n    return maximum"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0):\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    return [x if i % 2 != 0 else sorted([l[j] for j in range(len(l)) if j % 2 != 0])[i//2] for i, x in enumerate(l)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    # cycle elements in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    # join groups and return the decoded string.\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    if n == 1:\n        return 2\n    fib = [2, 3]\n    while len(fib) < n:\n        next_num = fib[-1] + fib[-2]\n        if next_num < 1000000:\n            fib.append(next_num)\n        else:\n            break\n    for num in fib:\n        if num < 1000000 and is_prime(num):\n            return num\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n-2):\n        left, right = i+1, n-1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n // 2"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x < 0:\n        return \"-\" + change_base(-x, base)\n    if x == 0:\n        return \"0\"\n    res = \"\"\n    while x > 0:\n        res = str(x % base) + res\n        x = x // base\n    return res"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        a, b, c = 1, 1, 2\n        for _ in range(4, n + 1):\n            d = a + b + c + a + b + c + a + b + c + a + b + c\n            a, b, c = b, c, d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    if not l:\n        return 0\n    n = len(l)\n    l.sort()\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n //= 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    while (y != 0):\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        c = a + b\n        a, b = b, c\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack.pop() != \"<\":\n                return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    if l == []:\n        return True\n    \n    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            n = n // i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    res = []\n    for i in range(1, n):\n        res.append(i * xs[i])\n    return res"}
{"task_id": "HumanEval/63", "completion": "    if n < 3:\n        return n\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = c, c + a + b, a + b + c\n    return c"}
{"task_id": "HumanEval/64", "completion": "    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    total = s.split()[1]\n\ttotal = int(total)\n\tapples = s.split()[0]\n\tapples = int(apples)\n\tmangoes = n - (apples + total)\n\treturn mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return [0, 0]\n    \n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    \n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    max_num = -1\n    for key, value in freq_map.items():\n        if value >= key and key > max_num:\n            max_num = key\n    return max_num"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    return [lst[0]] + strange_sort_list(lst[1:])[::-1] + [lst[-1]]"}
{"task_id": "HumanEval/71", "completion": "    if (a + b > c and a + c > b and b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    if a < 6:\n        return False\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            if i <= 2 or (i > 2 and a % i != 1) or (a % (i ** 2) != 0):\n                return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    for i in range(2, int(x**0.5)+1):\n        if i == n:\n            return True\n        if i**n != x:\n            return False\n    return False"}
{"task_id": "HumanEval/77", "completion": "    if a <= 0:\n        return False\n    return round(a ** (1/3)) ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    count = 0\n    for char in num:\n        if char.isdigit() and isPrime(int(char, 16)):\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    n = len(s)\n    for i in range(n-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    grades.sort(reverse=True)\n    grade_letter = []\n    for grade in grades:\n        if grade >= 4.0:\n            grade_letter.append('A+')\n        elif grade >= 3.7:\n            grade_letter.append('A')\n        elif grade >= 3.3:\n            grade_letter.append('A-')\n        elif grade >= 3.0:\n            grade_letter.append('B+')\n        elif grade >= 2.7:\n            grade_letter.append('B')\n        elif grade >= 2.3:\n            grade_letter.append('B-')\n        elif grade >= 2.0:\n            grade_letter.append('C+')\n        elif grade >= 1.7:\n            grade_letter.append('C')\n        elif grade >= 1.3:\n            grade_letter.append('C-')\n        elif grade >= 1.0:\n            grade_letter.append('D+')\n        elif grade >= 0.7:\n            grade_letter.append('D')\n        elif grade >= 0.0:\n            grade_letter.append('D-')\n        elif grade >= 0.0:\n            grade_letter.append('E')\n    return grade_letter"}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "    return (n+1)**n"}
{"task_id": "HumanEval/84", "completion": "    return bin(N)[2:]"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n    return ' '.join(words)"}
{"task_id": "HumanEval/87", "completion": "    coordinates = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, col_index))\n    coordinates.sort()\n    coordinates.sort(key=lambda coord: (coord[1], coord[0]))\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return []\n    array.sort()\n    return array"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a')) * 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = lst[0]\n    second_smallest = float('inf')\n    for num in lst[1:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    boredoms = 0\n    words = S.split()\n    \n    for word in words:\n        if word.lower().startswith('i'):\n            boredoms += 1\n    \n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "    return (x == y + z) or (x == z + y) or (y == z + x)"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_char = chr(ord(char) + 26)\n            else:\n                encoded_char = chr(ord(char) - 26)\n        else:\n            encoded_char = char\n        for vowel in vowels:\n            encoded_char = encoded_char.replace(vowel, chr(ord(vowel) + 2))\n        encoded_message += encoded_char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    largest_prime = -1\n    for num in lst:\n        if num > 1:\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    break\n            else:\n                largest_prime = num\n                break\n    if largest_prime == -1:\n        return \"No prime values in the list\"\n    else:\n        return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    if all(isinstance(key, str) and key.islower() for key in dict.keys()) or all(isinstance(key, str) and key.isupper() for key in dict.keys()):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return a % 10 * b % 10"}
{"task_id": "HumanEval/98", "completion": "    vowels = set('AEIOU')\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    value = float(value)\n    if value >= 0:\n        return int(value)\n    else:\n        return int(value + 0.5)"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i+1)\n        else:\n            pile.append(i)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(num):\n        while num:\n            if num % 2 == 0:\n                return True\n            num //= 10\n        return False\n    return sorted(set(filter(lambda num: not has_even_digit(num), x)))"}
{"task_id": "HumanEval/105", "completion": "    return arr[::-1]\n\ndef reverse_and_replace(arr):\n    return [\"One\" if num==1 else \"Two\" if num==2 else \"Three\" if num==3 else \"Four\" if num==4 else \"Five\" if num==5 else \"Six\" if num==6 else \"Seven\" if num==7 else \"Eight\" if num==8 else \"Nine\" for num in arr]\n\ndef sortAndReplace(arr):\n    return reverse_and_replace(sorted(filter(lambda x: 1 <= x <= 9, arr))))"}
{"task_id": "HumanEval/106", "completion": "    ans = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            ans.append(factorial(i))\n        else:\n            ans.append(sum(range(1, i + 1)))\n    return ans\n\ndef factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            sign = -1\n        else:\n            sign = 1\n        total = 0\n        while num != 0:\n            num //= 10\n            total += num\n        if total > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    stack = []\n    for i in arr:\n        while stack and stack[-1] > i:\n            arr[stack.pop()] = i\n        stack.append(i)\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            j = lst2.index(lst1[i])\n            if lst2[j] % 2 != 0:\n                return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    max_count = max(hist.values())\n    return {key: value for key, value in hist.items() if value == max_count}"}
{"task_id": "HumanEval/112", "completion": "    new_s = \"\".join(c for c in s if c not in c)\n    return new_s, new_s == new_s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    def count_odd_digits(s):\n        return sum(int(digit) % 2 != 0 for digit in s)\n    \n    return [f\"the number of odd elements {count_odd_digits(s)}\" for s in lst]"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    m, n = len(grid), len(grid[0])\n    min_val = [0] * (n + 1)\n    for i in range(m):\n        for j in range(n):\n            min_val[j + 1] = min(min_val[j + 1], grid[i][j] + j - min_val[j])\n    \n    ans = float('inf')\n    for i in range(min_val[-1] + 1):\n        ans = min(ans, math.ceil(float(min_val[-1]) / capacity) + i)\n    return ans"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    def is_consonant(c):\n        return c.isalpha() and c.lower() not in ['a', 'e', 'i', 'o', 'u']\n    \n    words = s.split()\n    result = []\n    for word in words:\n        if len([c for c in word if is_consonant(c)]) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    last_consonant_idx = -1\n    for i in range(len(word) - 1, -1, -1):\n        if word[i].lower() not in vowels:\n            last_consonant_idx = i\n            break\n    if last_consonant_idx < 1:\n        return \"\"\n    for j in range(last_consonant_idx - 1, -1, -1):\n        if word[j].lower() in vowels:\n            return word[j]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    open_stack = []\n    for char in lst:\n        if char == '(':\n            open_stack.append(char)\n        elif char == ')':\n            if open_stack and open_stack[-1] == '(':\n                open_stack.pop()\n            else:\n                return 'No'\n    if not open_stack:\n        return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/120", "completion": "    max_k = []\n    for i in range(len(arr) - k + 1):\n        max_k.append(max(arr[i:i + k]))\n    return sorted(max_k, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    n = len(arr)\n    sum = 0\n    for i in range(k):\n        if i < 2:\n            sum += arr[i]\n        else:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return [x for x in collatz if x % 2 != 0]"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    \n    if len(date) != 8:\n        return False\n    \n    try:\n        month = int(date[0:2])\n        day = int(date[3:5])\n        year = int(date[6:])\n    except ValueError:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1 or day > 31:\n        return False\n    \n    if day < 1 or day > 30:\n        return False\n    \n    if day < 1 or day > 29:\n        return False\n    \n    if month == 2 and day > 29:\n        return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if c.islower() and ord(c) % 2 != 0])"}
{"task_id": "HumanEval/126", "completion": "    n = len(lst)\n    if n <= 1:\n        return True\n    for i in range(1, n):\n        if lst[i] <= lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    intersect = max(0, min(end1, end2) - max(start1, start2))\n    return \"YES\" if intersect > 1 and is_prime(intersect) else \"NO\"\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    n = len(arr)\n    product = 1\n    for num in arr:\n        product *= abs(num) if num != 0 else 1\n    sign_product = 1\n    for num in arr:\n        sign_product *= 1 if num > 0 else -1 if num < 0 else 0\n    return sum(abs(num) * sign_product for num in arr)"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    directions = [(0,1), (0,-1), (1,0), (-1,0)]\n    min_path = []\n    \n    def helper(i, j, path, k):\n        nonlocal min_path\n        if len(path) == k:\n            min_path.append(path)\n            return\n        for dx, dy in directions:\n            x, y = i + dx, j + dy\n            if 0 <= x < n and 0 <= y < n and grid[x][y] == path[-1]:\n                helper(x, y, path + [grid[x][y]], k)\n    \n    for i in range(n):\n        for j in range(n):\n            helper(i, j, [grid[i][j]], k)\n    \n    min_path.sort()\n    return min_path[0]"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    elif n == 2:\n        return [3, 1, 3]\n    else:\n        a, b, c = 3, 1, 3\n        result = [3, 1, 3]\n        for i in range(3, n + 1):\n            next_value = a + b + c\n            result.append(next_value)\n            a, b, c = b, c, next_value\n        return result"}
{"task_id": "HumanEval/131", "completion": "    if n < 10:\n        return n\n    else:\n        return (n % 10) * digits(n // 10)"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    upper_int = [int(x) for x in lst]\n    return sum([x*x for x in upper_int])"}
{"task_id": "HumanEval/134", "completion": "    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if txt.split()[-1] == last_char:\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg = None\n    pos = None\n    for num in lst:\n        if num < 0:\n            if neg is None:\n                neg = num\n            elif neg > num:\n                neg = num\n        elif num > 0:\n            if pos is None:\n                pos = num\n            elif pos < num:\n                pos = num\n    return (neg, pos)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        return b if float(b) > float(a) else a\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n <= 0:\n        return False\n    for i in range(2, n//2 + 1, 2):\n        for j in range(i, n//2 + 1, 2):\n            for k in range(j, n//2 + 1, 2):\n                for l in range(k, n//2 + 1, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    product = 1\n    for i in range(1, n + 1):\n        product *= i\n    return product"}
{"task_id": "HumanEval/140", "completion": "    return ''.join('_' if char == ' ' else char for char in text).replace('  ', '-')"}
{"task_id": "HumanEval/141", "completion": "    if file_name[-4:].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    dot_index = file_name.index('.')\n    substr1 = file_name[:dot_index]\n    substr2 = file_name[dot_index+1:]\n    if not substr1 or not substr2:\n        return 'No'\n    if len(substr1) > 3:\n        return 'No'\n    if not substr2.isalnum():\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    for i in range(len(lst)):\n        if (i % 3 == 0 and i % 4 != 0) or (i % 4 == 0 and i % 3 != 0):\n            lst[i] = lst[i]**3 if lst[i] > 0 else -lst[i]**3\n    return sum(lst)"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "completion": "    num, den = map(int, x.split(\"/\"))\n    num2, den2 = map(int, n.split(\"/\"))\n    return (num * den2) == (den * num2)"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 in [1, 3, 5, 7, 9]) and (num % 10 == 0 and num % 10 != 0) and (num % 10 == 0 and num % 10 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count_odd = n // 2\n    count_even = n - count_odd\n    return count_odd * (count_odd - 1) * (count_even // 2) + count_even * (count_even - 1) * (count_odd // 2)"}
{"task_id": "HumanEval/148", "completion": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    return tuple(sorted(planets[(planets.index(planet1) + 1):(planets.index(planet2) - 1)], key=lambda x: planets.index(x)))"}
{"task_id": "HumanEval/149", "completion": "    return sum(sorted(lst, key=lambda x: (len(x), x)))"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    return sum([i*i for i in lst if i > 0 and isinstance(i, int)])"}
{"task_id": "HumanEval/152", "completion": "    res=[]\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            res.append(0)\n        else:\n            res.append(abs(game[i]-guess[i]))\n    return res"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = None\n    for extension in extensions:\n        strength = len([c for c in extension if c.isupper()]) - len([c for c in extension if c.islower()])\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if len(a)<len(b):\n        return False\n    for i in range(len(b)):\n        if a.find(b[i:i+len(b)])!=-1:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n\tsides.sort()\n\treturn sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for op in operator:\n        if op == '+':\n            stack.append(operand.pop(0))\n        elif op == '-':\n            stack.append(operand.pop(0))\n            stack.append(-operand.pop(0))\n        elif op == '*':\n            stack.append(operand.pop(0) * operand.pop(0))\n        elif op == '/':\n            stack.append(int(operand.pop(0) / operand.pop(0)))\n        elif op == '**':\n            stack.append(operand.pop(0) ** operand.pop(0))\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    return \"\".join([char.lower() if char.isupper() else char.upper() if char.islower() else char for char in s])"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(int(str(num)[-1]))\n    return sorted(even_digits)"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            result.append(stack.pop())\n        else:\n            stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_level = 0\n    levels = []\n    for group in paren_string.split():\n        level = 0\n        in_depth = False\n        for char in group:\n            if char == '(':\n                level += 1\n                in_depth = True\n            elif char == ')':\n                level -= 1\n                if level < 0:\n                    break\n                in_depth = False\n            if in_depth and level > max_level:\n                max_level = level\n        levels.append(max_level)\n    return levels"}
{"task_id": "HumanEval/7", "completion": "    return list(filter(lambda s: substring in s, strings))"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    \n    product = 1\n    for number in numbers:\n        product *= number\n    \n    return sum(numbers), product"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n    return result"}
{"task_id": "HumanEval/10", "completion": "    n = len(string)\n    for i in range(n, 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(min(len(a), len(b))):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = [4, 2, 1]\n    beats_list = []\n    for char in music_string:\n        if char == 'o':\n            beats_list.append(beats[0])\n        elif char == 'o|':\n            beats_list.append(beats[1])\n        elif char == '.':\n            beats_list.append(beats[2])\n    return beats_list"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += 1\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_to_str = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = [num_to_str[num] for num in numbers.split()]\n    num_list.sort()\n    return ' '.join([str(num_to_str[num]) for num in num_list])"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n\t\tif n % i == 0:\n\t\t\treturn i"}
{"task_id": "HumanEval/25", "completion": "    result = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            result.append(divisor)\n            n //= divisor\n        divisor += 1\n    return result"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    filtered = [s for s in strings if s.startswith(prefix)]\n    return filtered"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Find x such that poly(x) = 0.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0:\n        return None\n    else:\n        mid = n // 2\n        left_sum = 0\n        right_sum = 0\n        for i in range(1, mid + 1):\n            left_sum += xs[i] * math.pow(x, i)\n        for i in range(mid + 1, n):\n            right_sum += xs[i] * math.pow(x, i)\n        return -left_sum / right_sum"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    for i in range(1, n):\n        if i % 3 == 0:\n            l[i] = sorted([l[i]])\n    return l"}
{"task_id": "HumanEval/34", "completion": "    unique_list = []\n    for num in l:\n        if num not in unique_list:\n            unique_list.append(num)\n    return sorted(unique_list)"}
{"task_id": "HumanEval/35", "completion": "    if not l:\n        return None\n    max_val = l[0]\n    for val in l:\n        if val > max_val:\n            max_val = val\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0):\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l = list(l)\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = l[i]\n    for i in range(len(l)):\n        if i % 2 == 1:\n            l[i] = l[i].sort()\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of 3 characters.\n    \"\"\"\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    # cycle elements in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n\tcount = 1\n\twhile True:\n\t\tif is_prime(b):\n\t\t\tcount += 1\n\t\t\tif count == n:\n\t\t\t\treturn b\n\t\ta, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        seen.add(x)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x < 0 or x >= base ** (len(str(x))):\n        return \"Invalid input\"\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    a, b, c = 0, 0, 1\n    for _ in range(n):\n        a, b, c = b, c, a+b+c\n    return c"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    res = 1\n    while n > 0:\n        if n % 2 == 1:\n            res = (res * 2) % p\n        n = n // 2\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    return ''.join(ch for ch in text if ch not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack.pop() != \"<\":\n                return False\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    return list(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            n = n // i\n    if n > 2:\n        return n"}
{"task_id": "HumanEval/60", "completion": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    derivative_terms = [0]*n\n    for i in range(1,n):\n        derivative_terms[i] = i * xs[i]\n    return derivative_terms"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        a, b, c = 0, 1, 2\n        for i in range(3, n + 1):\n            c = a + b + c\n            a, b = b, c\n        return c"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouy\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[shift:] + x_str[:shift]"}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "    if 'apples' in s:\n        a = int(s.split('apples')[1].split('oranges')[0])\n    elif 'oranges' in s:\n        a = int(s.split('oranges')[0].split('apples')[1])\n    else:\n        a = 0\n    if 'mangoes' in s:\n        m = int(s.split('mangoes')[1].split('apples')[0])\n    elif 'apples' in s:\n        m = int(s.split('apples')[0].split('mangoes')[1])\n    else:\n        m = 0\n    return n - a - m"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    \n    min_even = float('inf')\n    min_index = -1\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            min_index = i\n    \n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    for num in sorted(freq, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    return [min(lst)] + [max(lst) if i % 2 == 1 else i for i in lst[1:-1]] + [min(lst)]"}
{"task_id": "HumanEval/71", "completion": "    if a+b>c and a+c>b and b+c>a:\n        s = (a+b+c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum([len(s) for s in lst1])\n    total_chars2 = sum([len(s) for s in lst2])\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(i, a):\n                if a % j == 0:\n                    for k in range(j, a):\n                        if a % k == 0:\n                            if is_prime(i) and is_prime(j) and is_prime(k):\n                                return True\n    return False\n\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    if x % n == 0:\n        return is_simple_power(x // n, n)\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        a = -a\n    root = a ** (1/3)\n    return root.is_integer()"}
{"task_id": "HumanEval/78", "completion": "    num = num.replace(\"A\", \"10\").replace(\"B\", \"11\").replace(\"C\", \"12\").replace(\"D\", \"13\").replace(\"E\", \"14\").replace(\"F\", \"15\")\n    return num.isnumeric() and all(int(num[i]) % 2 != 0 for i in range(1, len(num)))"}
{"task_id": "HumanEval/79", "completion": "    return \"db{0:b}db\".format(decimal)"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('F')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(1, 10):\n        count += 9 - i\n    return count"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while (N > 0):\n        sum += N % 2\n        N = N // 2\n    return str(sum)"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "    words = s.split(' ')\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort()\n    result.sort(key=lambda tup: tup[1], reverse=True)\n    return result"}
{"task_id": "HumanEval/88", "completion": "    total = array[0] + array[-1]\n    if total % 2 == 0:\n        return sorted(array, reverse=True)\n    return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    rotation = 2 * 2\n    encrypted_text = \"\"\n    for char in s:\n        if char.isalpha():\n            encrypted_char = chr(((ord(char) - ord('a') + rotation) % 26) + ord('a'))\n            encrypted_text += encrypted_char\n        else:\n            encrypted_text += char\n    return encrypted_text"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    \n    smallest = min(lst)\n    lst.remove(smallest)\n    second_smallest = min(lst)\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for word in words:\n        if word.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    return (x == y + z) or (y == x + z) or (z == x + y)"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"AEIOUaeiou\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_char = chr(ord(char) + 26) if ord(char) >= ord('a') else chr(ord(char) - 26)\n            else:\n                encoded_char = chr(ord(char) - 26) if ord(char) >= ord('A') else chr(ord(char) + 26)\n        else:\n            encoded_char = char\n        encoded_message += encoded_char\n    \n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    prime = 0\n    for num in lst:\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime = num\n    return sum(int(digit) for digit in str(prime))"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    return all(key.islower() for key in dict) or all(key.isupper() for key in dict)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i*2)\n        else:\n            result.append(i*2-1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = (n + m) / 2\n    return bin(round(average))"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        while n > 0:\n            if n % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    result = []\n    for num in x:\n        if not has_even_digit(num):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef by_name(arr):\n    return sorted(arr, key=lambda x: [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][int(x) - 1])\n\ndef sortAndName(arr):\n    if not arr:\n        return []\n    \n    between_one_and_nine = [x for x in arr if 1 <= x <= 9]\n    between_one_and_nine.sort()\n    reversed_arr = between_one_and_nine[::-1]\n    return list(map(lambda x: \"One\" if x == 1 else \"Nine\" if x == 9 else x, reversed_arr))"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    def isPalindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if isPalindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    for i in range(n):\n        arr[i] = i\n    arr.sort()\n    return arr == list(range(n))"}
{"task_id": "HumanEval/110", "completion": "    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            if lst2[i] % 2 != 0:\n                return \"NO\"\n            else:\n                lst1[i] = lst2[i]\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    for char in test.split():\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    max_count = max(count.values())\n    return {k: v for k, v in count.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "    for char in c:\n        s = s.replace(char, '')\n    return s, s[::-1] == s"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for string in lst:\n        odd_count = sum(1 for digit in string if int(digit) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count} in the string {string}\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    if not nums:\n        return 0\n\n    min_sum = nums[0]\n    current_sum = nums[0]\n\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    buckets = [0] * rows\n    \n    def maxFill(row, col):\n        if row < 0 or row >= rows or col < 0 or col >= cols or buckets[row] == capacity:\n            return 0\n        if grid[row][col] == 0:\n            return 0\n        return max(1 + maxFill(row + 1, col), maxFill(row - 1, col), maxFill(row, col + 1), maxFill(row, col - 1))\n    \n    return maxFill(0, 0)"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for letter in word if letter.isalpha() and letter.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels and word[i + 2] in vowels:\n            return word[i + 1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return \"No\"\n                if stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/121", "completion": "    odd_sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            odd_sum += lst[i]\n    return odd_sum"}
{"task_id": "HumanEval/122", "completion": "    sum_ = 0\n    for i in range(k):\n        sum_ += arr[i]\n    for i in range(k, len(arr)):\n        if len(str(arr[i])) <= 2:\n            sum_ += arr[i]\n    return sum_"}
{"task_id": "HumanEval/123", "completion": "    def collatz(num):\n        sequence = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num = num // 2\n            else:\n                num = num * 3 + 1\n            sequence.append(num)\n        return sequence\n    \n    odd_sequence = []\n    for i in range(1, n+1):\n        sequence = collatz(i)\n        odd_numbers = [x for x in sequence if x % 2 != 0]\n        odd_sequence.extend(odd_numbers)\n    \n    return sorted(odd_sequence)"}
{"task_id": "HumanEval/124", "completion": "    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if day < 1 or day > 30:\n            return False\n        if day < 1 or day > 29:\n            return False\n        return True\n    except:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if \" \" in txt:\n        return txt.split()\n    else:\n        return [txt]\n\ndef odd_alphabet_count(s):\n    return sum(1 for c in s if c.islower() and ord(c) % 2 != 0)\n\ndef split_and_count(txt):\n    words = split_words(txt)\n    count = 0\n    for word in words:\n        count += odd_alphabet_count(word)\n    return count"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersection_length = end - start\n    if intersection_length < 0:\n        return \"NO\"\n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign = 0\n    magnitude_sum = 0\n    for num in arr:\n        if num == 0:\n            return None\n        sign *= 1 if num > 0 else -1\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    min_path = []\n    # Using Breadth First Search to find the minimum path\n    queue = [(i, j, []) for i in range(n) for j in range(m)]\n    visited = set()\n    while queue:\n        (i, j, path) = queue.pop(0)\n        if len(path) == k:\n            min_path = path\n            break\n        for x, y in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n            ni, nj = i + x, j + y\n            if 0 <= ni < n and 0 <= nj < m and (ni, nj) not in visited:\n                visited.add((ni, nj))\n                queue.append((ni, nj, path + [grid[ni][nj]]))\n    return min_path"}
{"task_id": "HumanEval/130", "completion": "    result = [1, 3, 2]\n    a, b, c = 1, 3, 2\n    for _ in range(3, n + 1):\n        d = a + b + c\n        result.append(d)\n        a, b, c = b, c, d\n    return result"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n:\n        product *= n % 10\n        n = n // 10\n    return product if product % 2 != 0 else 0"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == ']':\n            if stack and stack[-1] == '[':\n                return True\n            else:\n                stack.append(char)\n        else:\n            stack.append(char)\n    return False"}
{"task_id": "HumanEval/133", "completion": "    return sum([int(x)**2 for x in lst])"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if not words:\n        return False\n    last_char = words[-1][-1]\n    return last_char.isalpha() and (not last_char.isupper() or last_char.islower())"}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] > arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n    if not neg_nums or not pos_nums:\n        return (None, None)\n    return (max(neg_nums), min(pos_nums))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and isinstance(b, str):\n        return max(float(a), float(b))\n    elif isinstance(a, str) and isinstance(b, (int, float)):\n        return max(float(a), b)\n    elif isinstance(a, (int, float)) and isinstance(b, str):\n        return max(a, float(b))\n    elif isinstance(a, str) and isinstance(b, str):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, (int, float)):\n        return max(float(a), b)\n    elif isinstance(a, (int, float)) and isinstance(b, str):\n        return max(a, float(b))\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n < 8:\n        return False\n    for i in range(2, n//2):\n        for j in range(i+2, n//2):\n            for k in range(j+2, n//2):\n                if i + j + k == n:\n                    return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\" \", \"_\")\n    return text.replace(\"  \", \"-\")"}
{"task_id": "HumanEval/141", "completion": "    valid_substrings = ['txt', 'exe', 'dll']\n    if '.' not in file_name:\n        return 'No'\n    before, after = file_name.split('.', 1)\n    if len(before) > 3 or len(after) > 3:\n        return 'No'\n    if before.isalpha() and after in valid_substrings:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i] ** 3\n    return result"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    # calculate the numerator and denominator of x * n\n    numerator = int(x) * int(n)\n    denominator = int(x) * int(n)\n\n    # check if the result is a whole number\n    return numerator % denominator == 0"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i*i-i+1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    try:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 <= index2:\n            return tuple(planets[index1+1:index2])\n        else:\n            return tuple(planets[index2+1:index1])\n    except ValueError:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "completion": "    if n <= 1:\n        return \"Neither\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return \"Neither\"\n    if n == x:\n        return x\n    return y"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            total += num**2\n    return total"}
{"task_id": "HumanEval/152", "completion": "    res = []\n    for i in range(len(game)):\n        if game[i]==guess[i]:\n            res.append(0)\n        else:\n            res.append(abs(game[i]-guess[i]))\n    return res"}
{"task_id": "HumanEval/153", "completion": "    strengths = {}\n    for extension in extensions:\n        cap = sum(1 for letter in extension if letter.isupper())\n        sm = sum(1 for letter in extension if letter.islower())\n        strength = cap - sm\n        strengths[extension] = strength\n    \n    strongest_extension = max(strengths, key=strengths.get)\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if len(b) > len(a):\n        return False\n    return b in a + a"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M', 900: 'CM', 500: 'D', 400: 'CD',\n        100: 'C', 90: 'XC', 50: 'L', 40: 'XL',\n        10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'\n    }\n\n    result = \"\"\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total = number + need\n    left = remaining - total\n    return [total, left]"}
{"task_id": "HumanEval/160", "completion": "    res = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            res += operand[i]\n        elif operator[i-1] == '-':\n            res -= operand[i]\n        elif operator[i-1] == '*':\n            res *= operand[i]\n        elif operator[i-1] == '/':\n            res //= operand[i]\n        elif operator[i-1] == '**':\n            res **= operand[i]\n    return res"}
{"task_id": "HumanEval/161", "completion": "    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result[::-1])"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b + 1):\n        num_str = str(num)\n        for digit in num_str:\n            if int(digit) % 2 == 0:\n                result.append(int(digit))\n                break\n    return sorted(result)"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            result.append(stack.pop())\n        else:\n            stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation_sum = sum(abs(num - mean) for num in numbers)\n    return deviation_sum / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        else:\n            if stack:\n                stack.pop()\n                max_depth = max(max_depth, len(stack))\n                result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    product = 1\n    for num in numbers:\n        product *= num\n    return (sum(numbers), product)"}
{"task_id": "HumanEval/9", "completion": "    n = len(numbers)\n    result = [0] * n\n    max_element = float('-inf')\n    for i in range(n):\n        max_element = max(max_element, numbers[i])\n        result[i] = max_element\n    return result"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return \"\"\n    \n    for i in range(len(string), 0, -1):\n        postfix = string[i:]\n        if is_palindrome(postfix):\n            return string + postfix[::-1]"}
{"task_id": "HumanEval/11", "completion": "    res = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            res += '0'\n        else:\n            res += '1'\n    return res"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    longest_string = max(strings, key=len)\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.extend([4] * 2)\n        elif note == 'o|':\n            beats.extend([2] * 2)\n        elif note == '.|':\n            beats.extend([1] * 2)\n        else:\n            beats.extend([0] * 2)\n    return [beat for beat in beats if beat != 0]"}
{"task_id": "HumanEval/18", "completion": "    n = len(string)\n    m = len(substring)\n    count = 0\n    for i in range(n-m+1):\n        if string[i:i+m] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    return ' '.join(sorted(numbers.split()))"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (float('inf'), float('inf'))\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n\n    return result"}
{"task_id": "HumanEval/21", "completion": "    minimum = min(numbers)\n    maximum = max(numbers)\n    return [(num - minimum) / (maximum - minimum) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    length = 0\n    for i in range(len(string)):\n        if string[i] != '\\0':\n            length += 1\n    return length"}
{"task_id": "HumanEval/24", "completion": "    if n % 2 == 0:\n        return n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return n // i\n    return n"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return list(filter(lambda s: s.startswith(prefix), strings))"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds the zero of a polynomial with coefficients xs.\n    returns only x such that poly(x) = 0, even if there are many.\n    Moreover, it only takes xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    x = 0\n    n = len(xs)\n    for i in range(1, n, 2):\n        if xs[i] != 0:\n            x = -xs[i] / (2 * xs[i - 1])\n            break\n    return round(x, 2)"}
{"task_id": "HumanEval/33", "completion": "    return [l[i] if i % 3 != 0 else sorted(l[i], reverse=True) for i in range(len(l))]"}
{"task_id": "HumanEval/34", "completion": "    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "    maximum = l[0]\n    for num in l:\n        if num > maximum:\n            maximum = num\n    return maximum"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            num = str(i)\n            count += num.count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cyclic shift of encoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    # cycling elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join back to a string.\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    if n <= 1:\n        return -1\n    a, b = 2, 3\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l)-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i+1, len(l)-1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum < 0:\n                left += 1\n            elif current_sum > 0:\n                right -= 1\n            else:\n                return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    result = ''\n    while x:\n        result = str(x % base) + result\n        x = x // base\n    return result"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    fib = [0] * (n + 1)\n    fib[1] = 0\n    fib[2] = 2\n    fib[3] = 0\n    \n    a, b, c = 1, 1, 0\n    for i in range(4, n + 1):\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4]\n        \n    return fib[n]"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2 - 1] + l[len(l)//2]) / 2\n    else:\n        return l[len(l)//2]"}
{"task_id": "HumanEval/48", "completion": "    if text == text[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n = n // 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"AEIOUaeiou\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        elif l[i] > l[i - 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    return list(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i:\n            i += 2\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            if stack.pop() != '(':\n                return False\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    ans = [0] * n\n    for i in range(1, n):\n        ans[i] = i * xs[i]\n    return ans"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    fib1, fib2, fib3 = 0, 1, 1\n    for _ in range(3, n + 1):\n        fib3 = fib1 + fib2 + fib3\n        fib1 = fib2\n        fib2 = fib3\n    return fib3"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char in ['a', 'e', 'i', 'o', 'u', 'y']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    digits = list(str(x))\n    n = len(digits)\n    shift = shift % n\n    digits = digits[-shift:] + digits[:-shift]\n    return ''.join(digits)"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/67", "completion": "    fruits = s.split(' and ')\n    total_fruits = fruits[0].count('apples') + fruits[0].count('oranges') + fruits[1].count('apples') + fruits[1].count('oranges')\n    mango_fruits = total_fruits - int(fruits[0].replace('apples','').replace('oranges','')) - int(fruits[1].replace('apples','').replace('oranges','')) - n \n    return mango_fruits"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return [\n    ]\n    smallest_value = float('inf')\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_value:\n            smallest_value = num\n            smallest_index = i\n    return [smallest_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    for i in range(max(lst), 0, -1):\n        if i in freq and freq[i] >= i:\n            return i\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result"}
{"task_id": "HumanEval/71", "completion": "    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if area.is_integer() and area > 0:\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    return sum(q) <= w and q == q[::-1]"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    left = [0]*n\n    right = [0]*n\n    for i in range(1,n):\n        left[i] = left[i-1] + 1 if arr[i]!=arr[i-1] else left[i-1]\n    for i in range(n-2,-1,-1):\n        right[i] = right[i+1] + 1 if arr[i]!=arr[i+1] else right[i+1]\n    result = float('inf')\n    for i in range(n):\n        result = min(result, abs(left[i] + right[i] - 1))\n    return result"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "    if a == 1:\n        return False\n    if a < 2:\n        return False\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    for i in range(3, int(a ** 0.5) + 1, 2):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "    if n == 1:\n        return True\n    if x == 1:\n        return True\n    return x == n ** (int(log(x, n)))"}
{"task_id": "HumanEval/77", "completion": "    if a<0:\n        return iscube(-a)\n    if a==0 or a==1:\n        return True\n    for i in range(2, int(a**0.5)+1):\n        if (i*i*i)==a:\n            return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "    count = 0\n    for i in num:\n        if i == 'A' or i == 'B' or i == 'C' or i == 'D' or i == 'E' or i == 'F':\n            count += 1\n    return count\n\ndef count_prime_hexadecimal_digits(num):\n    count = 0\n    for i in num:\n        if i.isdigit():\n            if i == '2':\n                count += 1\n            elif i == '3':\n                count += 1\n            elif i == '5':\n                count += 1\n            elif i == '7':\n                count += 1\n            elif i == 'B':\n                count += 1\n            elif i == 'D':\n                count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('B+')\n        elif gpa >= 3.0:\n            letter_grades.append('B')\n        elif gpa >= 2.7:\n            letter_grades.append('C+')\n        elif gpa >= 2.3:\n            letter_grades.append('C')\n        elif gpa >= 2.0:\n            letter_grades.append('D+')\n        elif gpa >= 1.7:\n            letter_grades.append('D')\n        elif gpa >= 1.3:\n            letter_grades.append('E')\n        elif gpa >= 1.0:\n            letter_grades.append('F')\n        else:\n            letter_grades.append('F')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    if len(string) < 2:\n        return False\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 9\n    start_count = 1\n    end_count = 9\n    for i in range(2, n):\n        start_count = start_count * 10 + 1\n        end_count = end_count * 10 + 9\n    return start_count + end_count"}
{"task_id": "HumanEval/84", "completion": "    return bin(sum(int(digit) for digit in str(N)))[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "    result = ''\n    for word in s.split():\n        sorted_word = ''.join(sorted(word))\n        result += sorted_word + ' '\n    return result.strip()"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result)"}
{"task_id": "HumanEval/88", "completion": "    array.sort()\n    return array"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * ord(char.lower()) - 97\n            shifted_char = chr((shift % 26) + 97)\n            result += shifted_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min1 = min(lst)\n    lst.remove(min1)\n    min2 = min(lst)\n    return min2"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n        elif char in vowels:\n            result += vowels[(vowels.index(char) + 2) % len(vowels)]\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    first_key = next(iter(dict))\n    return first_key.islower() or first_key.isupper()"}
{"task_id": "HumanEval/96", "completion": "    primes = [2]\n\tnum = 3\n\twhile len(primes) < n:\n\t\tis_prime = True\n\t\tfor prime in primes:\n\t\t\tif num % prime == 0:\n\t\t\t\tis_prime = False\n\t\t\t\tbreak\n\t\tif is_prime:\n\t\t\tprimes.append(num)\n\t\tnum += 2\n\treturn primes"}
{"task_id": "HumanEval/97", "completion": "    return (a%10) * (b%10)"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    if value.isnumeric():\n        return int(value)\n    else:\n        return round(float(value), 0)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i+1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    else:\n        average = (n + m) // 2\n        return bin(average)"}
{"task_id": "HumanEval/104", "completion": "    return sorted(set(num for num in x if all(int(digit) % 2 != 0 for digit in str(num))))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef by_desc(arr):\n    return sorted(arr, reverse=True)\n\ndef replace_digits(arr):\n    return [name for num in arr for name in [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n\ndef sum_of_numbers(n):\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/107", "completion": "    count_odd = 0\n    count_even = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return count_even, count_odd"}
{"task_id": "HumanEval/108", "completion": "    def sum_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    for i in range(len(arr)):\n        if arr[i] < arr[i-1] or arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    for num1 in lst1:\n        if num1 % 2 != 0:\n            for num2 in lst2:\n                if num2 % 2 == 0:\n                    lst1[lst1.index(num1)] = num2\n                    lst2[lst2.index(num2)] = num1\n                    break\n    return \"YES\" if all(num % 2 == 0 for num in lst1) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    histogram = {}\n    for char in test:\n        if char in histogram:\n            histogram[char] += 1\n        else:\n            histogram[char] = 1\n    max_occurrence = max(histogram.values())\n    return {k: v for k, v in histogram.items() if v == max_occurrence}"}
{"task_id": "HumanEval/112", "completion": "    new_str = \"\".join([i for i in s if i not in c])\n    return (new_str, new_str == new_str[::-1])"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for string in lst:\n        count = sum(1 for digit in string if int(digit) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {string} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    curr_sum = nums[0]\n    min_sum = float('inf')\n    for num in nums[1:]:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    def isValid(x, y, cap):\n        return (x < len(grid) and \n                y < len(grid[0]) and \n                grid[x][y] == 1 and \n                (x, y) not in filled)\n\n    max_water = 0\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            if grid[row][col] == 1:\n                filled = set()\n                water = 0\n                for x in range(row, len(grid)):\n                    for y in range(col, len(grid[0])):\n                        if isValid(x, y, capacity):\n                            filled.add((x, y))\n                            water += min(grid[x][y], capacity) - 1\n                    max_water = max(max_water, water)\n                    filled.remove((row, col))\n                    water = 0\n    return max_water"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.isalpha() and char.lower() not in \"aeiou\")\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    last_vowel = \"\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            last_vowel = word[i]\n            break\n    if last_vowel == '':\n        return \"\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] not in vowels:\n            return last_vowel\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack or stack.pop() != '(':\n                    return 'No'\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    i = 0\n    while i < k and len(str(arr[i])) <= 2:\n        total += arr[i]\n        i += 1\n    return total"}
{"task_id": "HumanEval/123", "completion": "    collatz = []\n    while n != 1:\n        collatz.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return sorted([x for x in collatz if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n        if (month < 1 or month > 12) or (day < 1 or day > 31) or (year < 1 or year > 3000):\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words\n\n\ndef count_odd_lowercase_letters(txt):\n    count = 0\n    for char in txt:\n        if char.islower() and ord(char) % 2 != 0:\n            count += 1\n    return count\n\n\ndef split_words_and_count_odd_letters(txt):\n    words = split_words(txt)\n    count = count_odd_lowercase_letters(txt)\n    return words, count"}
{"task_id": "HumanEval/126", "completion": "    return lst == sorted(lst) and len(set(lst)) == len(lst)"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = max(0, intersection_end - intersection_start)\n    return \"YES\" if is_prime(intersection_length) else \"NO\"\n\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    signs_sum = 0\n    for num in arr:\n        signs_sum += num\n        product *= signs_sum\n    return sum([abs(num) * product for num in arr])"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    start = (0, 0)\n    end = (n-1, n-1)\n    queue = [(start, [])]\n    visited = set()\n    while queue:\n        pos, path = queue.pop(0)\n        if pos == end:\n            return path\n        if pos in visited:\n            continue\n        visited.add(pos)\n        if len(path) == k:\n            return path\n        x, y = pos\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                queue.append(((nx, ny), path + [grid[nx][ny]]))\n    return []"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [1, 3]\n    \n    ans = [1, 3, 2]\n    a, b, c = 1, 3, 2\n    for i in range(3, n + 1):\n        ans.append(a)\n        a, b, c = b, c, a + b + c\n    return ans"}
{"task_id": "HumanEval/131", "completion": "    result = 1\n    while n:\n        digit = n % 10\n        if digit % 2 != 0:\n            result *= digit\n        n //= 10\n    return result"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    lst = [int(x) for x in lst]\n    return sum([x**2 for x in lst])"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    last_word = words[-1]\n    if last_word[-1].isalpha():\n        return last_word[-1] not in \" \"\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_index = -1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    if not neg or not pos:\n        return (None, None)\n    return (max(neg), min(pos))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, (str, float)) and isinstance(b, (str, float)):\n        if a.replace('.', '') > b.replace('.', ''):\n            return a\n        else:\n            return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    result = []\n    consecutive_spaces = False\n    for char in text:\n        if char == \" \":\n            consecutive_spaces = True\n            result.append(\"-\")\n        else:\n            consecutive_spaces = False\n            result.append(\"_\")\n    return \"\".join(result)"}
{"task_id": "HumanEval/141", "completion": "    if '.' not in file_name or file_name.count('.') > 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2 or parts[0] == '' or parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if (i % 3 == 0 and i % 4 != 0) or (i % 4 == 0 and i % 3 != 0):\n            result += lst[i]**2\n        else:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return x_num * n_den == n_num * x_den"}
{"task_id": "HumanEval/145", "completion": "    if not nums:\n        return []\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    return count[0] * (count[0] - 1) * (count[0] - 2) // 6 + count[1] * count[2]"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 < index2:\n            return tuple(planets[index1+1:index2])\n        else:\n            return tuple(planets[index2+1:index1])\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "    return sum(sorted(lst, key=lambda x: (len(x), x)))"}
{"task_id": "HumanEval/150", "completion": "    if n <= 1:\n\t\treturn y\n\tfor i in range(2, n):\n\t\tif n % i == 0:\n\t\t\treturn y\n\treturn x"}
{"task_id": "HumanEval/151", "completion": "    return 2 * sum(x ** 2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))"}
{"task_id": "HumanEval/152", "completion": "    return [abs(guess[i]-game[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "    def get_strength(extension):\n        upper_count = sum(1 for char in extension if char.isupper())\n        lower_count = sum(1 for char in extension if char.islower())\n        return upper_count - lower_count\n\n    strongest_extension = max(extensions, key=get_strength)\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if len(a)<len(b):\n        return False\n    if b in a+a:\n        return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    num_str = str(abs(num))\n    \n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "completion": "    roman_map = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value, numeral in roman_map.items():\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    if eaten <= remaining:\n        return [eaten, remaining - eaten]\n    else:\n        return [eaten, remaining]"}
{"task_id": "HumanEval/160", "completion": "    # Ensure the length of operator and operand are equal\n    assert len(operator) == len(operand) - 1\n    \n    # Initialize result\n    result = operand[0]\n    \n    # Iterate through the operator list\n    for i in range(1, len(operator), 2):\n        # Get the current operator\n        op = operator[i]\n        \n        # Get the current operand\n        operand_val = operand[i+1]\n        \n        # Perform the operation\n        if op == '+':\n            result += operand_val\n        elif op == '-':\n            result -= operand_val\n        elif op == '*':\n            result *= operand_val\n        elif op == '/':\n            result //= operand_val\n        elif op == '**':\n            result **= operand_val\n    \n    return result"}
{"task_id": "HumanEval/161", "completion": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i] == s[i].lower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n    return \"\".join(s)"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits"}
{"task_id": "HumanEval/0", "completion": "    if len(numbers) < 2:\n        return False\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - numbers[i-1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                group_string = ''\n                while stack:\n                    group_string = stack.pop() + group_string\n                result.append(group_string)\n    \n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op < 0:\n            return True\n        balance += op\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(num - mean) for num in numbers]\n    mean_absolute_deviation = sum(absolute_deviations) / len(absolute_deviations)\n    return mean_absolute_deviation"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(delimeter)\n        result.append(num)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_level = 0\n    result = []\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        else:\n            stack.pop()\n            \n        while stack:\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                result.append(len(stack) - 1)\n                break\n    \n    return result"}
{"task_id": "HumanEval/7", "completion": "    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "completion": "    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[:i+1]))\n    return max_numbers"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(min(len(a), len(b))))"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = max(len(s) for s in strings)\n    for s in strings:\n        if len(s) == max_len:\n            return s\n    return None"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    beat_map = {'o': 4, 'o|': 2, '.|': 1}\n    beats = []\n    current_note = ''\n    current_beats = 0\n    for char in music_string:\n        if char in beat_map:\n            current_note += char\n            current_beats += beat_map[char]\n        elif char == '|':\n            beats.append(current_beats)\n            current_note = ''\n            current_beats = 0\n    beats.append(current_beats)  # Adding the beats of the last note\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = [num_map[num] for num in numbers.split()]\n    nums.sort()\n    result = ' '.join(num_map[num] for num in nums)\n    return result"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = [(x - minimum) / (maximum - minimum) for x in numbers]\n    return rescaled"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    unique_numbers = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            unique_numbers.append(num)\n            seen.add(num)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return list(filter(lambda x: x.startswith(prefix), strings))"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Find x such that poly(x) = 0.\n    \"\"\"\n    if len(xs) % 2 != 0 or xs[-1] <= 0:\n        return \"Invalid input: xs should have even number of coefficients and largest non zero coefficient as it guarantees a solution.\"\n    \n    left = 0\n    right = max(xs)\n    while left < right:\n        mid = (left + right) / 2\n        if poly(xs, mid) > 0:\n            left = mid + 0.0001\n        else:\n            right = mid\n    return round(left, 2)"}
{"task_id": "HumanEval/33", "completion": "    return [l[i] if i % 3 != 0 else sorted(l[i:i+3])[1] for i in range(len(l))]"}
{"task_id": "HumanEval/34", "completion": "    if len(l) == 0:\n        return []\n    unique_elements = [l[0]]\n    for element in l[1:]:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    return unique_elements"}
{"task_id": "HumanEval/35", "completion": "    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0):\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[::2], l[1::2] = l[::2][::-1], sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group.\n    groups = [group[::-1] if len(group) == 3 else group for group in groups]\n    # join elements in each group to form the original string.\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    i = 1\n    while len(fib) < n:\n        fib.append(fib[i-1] + fib[i-2])\n        i += 1\n    primes = [2]\n    for num in fib:\n        if all(num % prime != 0 for prime in primes):\n            primes.append(num)\n    return primes[n-1]"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            curr_sum = l[i] + l[left] + l[right]\n            if curr_sum == 0:\n                return True\n            elif curr_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "    res = ''\n    while x > 0:\n        res = str(x % base) + res\n        x = x // base\n    return res"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 1, 1, 2\n    for _ in range(3, n+1):\n        a, b, c, d = b, c, d, a+b+c+d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    if n%2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    while (n > 0):\n        if (n % 2 != 0):\n            result = (result * 2) % p\n        n = n // 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by -5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"AEIOUaeiou\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    if len(s0) != len(s1):\n        return False\n    freq = {}\n    for char in s0:\n        freq[char] = freq.get(char, 0) + 1\n    for char in s1:\n        if char not in freq or freq[char] == 0:\n            return False\n        freq[char] -= 1\n    return True"}
{"task_id": "HumanEval/55", "completion": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    largest_factor = 1\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            largest_factor = divisor\n            n = n / divisor\n        else:\n            divisor = divisor + 1\n    return largest_factor"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    return [i*x for i, x in enumerate(xs)][1:]"}
{"task_id": "HumanEval/63", "completion": "    if n < 3:\n        return n\n    a, b, c = 0, 1, 1\n    for _ in range(3, n + 1):\n        a, b = b, a + b + c\n        c = a\n    return a"}
{"task_id": "HumanEval/64", "completion": "    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    num_digits = len(str(x))\n    if shift > num_digits:\n        return str(x)[::-1]\n    return str((x * 10 ** shift) % (10 ** num_digits))"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    l = s.split()\n    n_fruit = n\n    for i in range(len(l)):\n        if l[i] == \"apples\":\n            n_fruit -= 1\n        elif l[i] == \"oranges\":\n            n_fruit -= 2\n    return n_fruit"}
{"task_id": "HumanEval/68", "completion": "    if not arr or arr[0] % 2 != 0:\n        return []\n    else:\n        min_val = float('inf')\n        min_index = -1\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0 and arr[i] < min_val:\n                min_val = arr[i]\n                min_index = i\n        return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    sorted_list = [min(lst)] + sorted(lst[1:], reverse=True) + [max(lst[1:])]\n    return sorted_list"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    # Check if it's a palindromic list\n    if q == q[::-1]:\n        # Calculate the sum of the elements\n        total = sum(q)\n        # Check if the sum is less than or equal to the maximum possible weight\n        if total <= w:\n            return True\n    return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total1 = sum([len(s) for s in lst1])\n    total2 = sum([len(s) for s in lst2])\n    \n    return lst1 if total1 < total2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            if is_prime(i) and is_prime(a // i):\n                return True\n    return False\n\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "    if x < 1:\n        return False\n    while x % n == 0:\n        x = x // n\n    return x == 1"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        a = -a\n    if a < 0:\n        a = -a\n    x = a ** (1. / 3)\n    return x.is_integer()"}
{"task_id": "HumanEval/78", "completion": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    hex_map = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    count = 0\n    for c in num:\n        if c.isdigit():\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    grades.sort(reverse=True)\n    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append('A+')\n        elif grade >= 3.7:\n            result.append('A')\n        elif grade >= 3.3:\n            result.append('A-')\n        elif grade >= 3.0:\n            result.append('B+')\n        elif grade >= 2.7:\n            result.append('B')\n        elif grade >= 2.3:\n            result.append('B-')\n        elif grade >= 2.0:\n            result.append('C+')\n        elif grade >= 1.7:\n            result.append('C')\n        elif grade >= 1.3:\n            result.append('C-')\n        elif grade >= 1.0:\n            result.append('D+')\n        elif grade >= 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        elif grade >= 0.0:\n            result.append('E')\n    return result"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    return 10**(n-1) - 1"}
{"task_id": "HumanEval/84", "completion": "    ans = 0\n    while N > 0:\n        ans += N % 2\n        N //= 2\n    return bin(ans)[2:]"}
{"task_id": "HumanEval/85", "completion": "    odd_indexed_evens = [x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0]\n    return sum(odd_indexed_evens)"}
{"task_id": "HumanEval/86", "completion": "    return ' '.join(sorted(s.split()))"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort()\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    for char in s:\n        index = alphabet.find(char)\n        shifted_index = (index - 2 * 2) % 26\n        result += alphabet[shifted_index]\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst[:2])\n    for i in range(2, len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    return smallest"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x + y == z or x + z == y or y + z == x):\n        return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "    encoded = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded += chr((ord(char) - ord('A') + 26) % 26 + ord('A'))\n            else:\n                encoded += chr((ord(char) - ord('a') + 26) % 26 + ord('a'))\n        elif char in \"aeiouAEIOU\":\n            encoded += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            encoded += char\n    return encoded"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = max(filter(is_prime, lst))\n    sum_of_digits = sum(int(digit) for digit in str(largest_prime))\n    return sum_of_digits"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    first_key = list(dict.keys())[0]\n    if not first_key.islower():\n        return False\n    for key in dict.keys():\n        if not key.islower() and not key.isupper():\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return a % 10 * b % 10"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOUaeiou\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    if '.' not in value:\n        return int(value)\n    else:\n        num = float(value)\n        if num >= 0:\n            return int(num + 0.5)\n        else:\n            return int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        result.append(i*2-1 if i%2==1 else i*2)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    if y < x:\n        return -1\n    if y % 2 != 0:\n        return y - 1\n    return y"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = (n + m) / 2\n    return bin(round(average))"}
{"task_id": "HumanEval/104", "completion": "    result = set()\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.add(num)\n    return sorted(list(result))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef reverse_string(arr):\n    return arr[::-1]\n\ndef replace_by_names(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[i] for i in arr]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n\ndef factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n <= 1:\n        return True\n    for i in range(1, n):\n        if arr[i] <= arr[i - 1]:\n            j = 0\n            while j < n and arr[j] > arr[i]:\n                j += 1\n            arr[i] = arr[j]\n            arr[j] = arr[i]\n            arr[i] = arr[j - 1]\n            return True\n    return False"}
{"task_id": "HumanEval/110", "completion": "    if set(lst1).intersection(set(lst2)):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    freq = {}\n    for char in test:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    max_count = max(freq.values())\n    return {key: value for key, value in freq.items() if value == max_count}"}
{"task_id": "HumanEval/112", "completion": "    new_str=''\n    for i in range(len(s)):\n        if s[i] not in c:\n            new_str+=s[i]\n    return new_str, new_str == new_str[::-1]\n\ndef isPalindrome(s):\n    return s == s[::-1]\n\ndef ask(s: str, c: str) -> (str, bool):\n    return reverse_delete(s,c)"}
{"task_id": "HumanEval/113", "completion": "    res = []\n    for s in lst:\n        count = sum(1 for digit in s if int(digit) % 2 != 0)\n        res.append(f\"the number of odd elements {count} in the string {s}.\")\n    return res"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    m, n = len(grid), len(grid[0])\n    max_fill_count = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                bucket_count = math.ceil((i * n + j) / capacity)\n                max_fill_count = max(max_fill_count, bucket_count)\n    return max_fill_count"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char.lower() not in \"aeiou\") == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i].lower() in vowels:\n            if i > 0 and word[i - 1].lower() not in vowels:\n                return word[i]\n            if i < len(word) - 1 and word[i + 1].lower() not in vowels:\n                return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return \"No\"\n            stack.pop()\n    if stack:\n        return \"No\"\n    stack = []\n    for char in lst[1]:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return \"No\"\n            stack.pop()\n    if stack:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sequence"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2 and day > 29:\n            return False\n        if year < 1 or year > 9999:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words if words else [ord(c) for c in txt]\n\ndef count_odd_case_letters(txt):\n    letters = txt.lower()\n    return sum(1 for c in letters if ord(c) % 2 != 0)\n\ndef split_and_count(txt):\n    words = split_words(txt)\n    return words, count_odd_case_letters(txt)"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def countPrimeLength(a, b):\n        count = 0\n        for i in range(max(a[0], b[0]), min(a[1], b[1]) + 1):\n            if isPrime(i):\n                count += 1\n        return count\n    \n    if max(interval1[1], interval2[1]) < min(interval1[0], interval2[0]):\n        return \"NO\"\n    else:\n        return \"YES\" if isPrime(countPrimeLength(interval1, interval2)) else \"NO\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    \n    result = 0\n    for num in arr:\n        if num == 0:\n            result += 0\n        elif num > 0:\n            result += 1\n        else:\n            result += -1\n    \n    return abs(sum(arr)) * result"}
{"task_id": "HumanEval/129", "completion": "    m, n = len(grid), len(grid[0])\n    ans = []\n    stack = [(0, 0, 0)]\n    while stack:\n        i, j, k = stack.pop()\n        if k == k:\n            ans.append(grid[i][j])\n            if i < m - 1 and (i + 1, j) not in stack:\n                stack.append((i + 1, j, k))\n            if j < n - 1 and (i, j + 1) not in stack:\n                stack.append((i, j + 1, k))\n            if i > 0 and (i - 1, j) not in stack:\n                stack.append((i - 1, j, k))\n            if j > 0 and (i, j - 1) not in stack:\n                stack.append((i, j - 1, k))\n    return ans"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    \n    a, b, c = 1, 3, 2\n    res = [1, 3]\n    for _ in range(2, n):\n        if a % 2 == 0:\n            res.append(a + b / 2)\n            a, b = b, c + b / 2\n        else:\n            res.append(a + b + c)\n            a, b, c = b, c, a + b + c\n    return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    for i in range(len(lst)):\n        lst[i] = int(lst[i])\n    total_sum = 0\n    for num in lst:\n        total_sum += num ** 2\n    return total_sum"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    for word in words:\n        if word[-1].isalpha():\n            return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n    \n    if not neg_integers or not pos_integers:\n        return (None, None)\n    \n    return (max(neg_integers), min(pos_integers))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        if isinstance(a, int):\n            if a > b:\n                return a\n            else:\n                return b\n        elif isinstance(a, float):\n            if a > b:\n                return a\n            else:\n                return b\n        elif isinstance(a, str):\n            a_float = float(a)\n            b_float = float(b)\n            if a_float > b_float:\n                return a\n            else:\n                return b\n    return None"}
{"task_id": "HumanEval/138", "completion": "    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                for l in range(k, n):\n                    if i + j + k + l == n and i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and l % 2 == 0:\n                        return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\").replace(\"   \", \"-\")"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') == 1 and '..' not in file_name and '.' not in file_name[:2]:\n        file_parts = file_name.split('.')\n        if len(file_parts) == 2 and file_parts[0][0].isalpha() and file_parts[1] in ['txt', 'exe', 'dll']:\n            return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/142", "completion": "    sum_of_squares = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum_of_squares += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum_of_squares += lst[i] ** 3\n    return sum_of_squares"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = [word for word in words if len(word) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    if x == \"\" or n == \"\":\n        return False\n    x_numerator = int(x.split('/')[0])\n    x_denominator = int(x.split('/')[1])\n    n_numerator = int(n.split('/')[0])\n    n_denominator = int(n.split('/')[1])\n    if x_denominator == 1 and n_denominator == 1:\n        return True\n    elif x_denominator == 1 and n_denominator != 1:\n        return True\n    elif x_denominator != 1 and n_denominator == 1:\n        return False\n    elif x_denominator != 1 and n_denominator != 1:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    ans = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    ans += 1\n    return ans"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        return tuple(sorted(planets[planets.index(planet1)+1:planets.index(planet2)]) + [planet2])\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            sum_of_squares += num * num\n    return sum_of_squares * 2"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    extensions.sort(key=lambda x: (-1 * (sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))), reverse=True)\n    return f\"{class_name}.{extensions[0]}\""}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        last_digit = num % 10\n        if last_digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, symbol in roman_numerals.items():\n        while number >= value:\n            result += symbol\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars or (len(unique_chars) == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = len(unique_chars)\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    if eaten >= remaining:\n        return [eaten, 0]\n    else:\n        return [eaten, remaining - eaten]"}
{"task_id": "HumanEval/160", "completion": "    n = len(operator)\n    result = 0\n    for i in range(n):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    stack = []\n    for char in s:\n        if char.isalpha():\n            stack.append(char.swapcase())\n        else:\n            stack.append(char)\n    return ''.join(stack[::-1])"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            result.append(stack.pop())\n        else:\n            stack[-1] += char\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    return [num for pair in zip(numbers, [delimeter]*len(numbers)) for num in pair] + [numbers[-1]] if numbers else []"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    result = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            max_depth += 1\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(max_depth)\n                max_depth = 0\n            else:\n                max_depth -= 1\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    sum_val = sum(numbers)\n    product_val = 1\n    for num in numbers:\n        product_val *= num\n    return (sum_val, product_val)"}
{"task_id": "HumanEval/9", "completion": "    n = len(numbers)\n    max_elements = []\n    for i in range(n):\n        max_element = max(numbers[:i+1])\n        max_elements.append(max_element)\n    return max_elements"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    return str(int(a) ^ int(b))"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    n = len(string)\n    prefixes = [string[:i+1] for i in range(n)]\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats_list = []\n    for note in music_string.split():\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.':\n            beats_list.append(1)\n    return beats_list"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return ' '.join(numbers)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    \n    return result"}
{"task_id": "HumanEval/21", "completion": "    smallest = min(numbers)\n    largest = max(numbers)\n    return [(num - smallest) / (largest - smallest) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [val for val in values if isinstance(val, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    return [x for x in numbers if not (x in seen or seen.add(x))]"}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return ''\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [i for i in l if i > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds x such that poly(x) = 0.\n    \"\"\"\n    n = len(xs)\n    # We only need to find one zero, so we stop after finding one\n    for i in range(n // 2, 0, -1):\n        if xs[i] == 0:\n            continue\n        if poly(xs[:i], xs[i]) == 0:\n            return xs[i]\n    return 0.0"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l' = [l[i] if i % 3 != 0 else sorted(l[i])[0] for i in range(n)]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_num = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_num:\n            max_num = l[i]\n    return max_num"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l_even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    l_even.sort()\n    l' = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l' += [l[i]]\n        else:\n            l' += [l_even.pop(0)]\n    return l'"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    # join to string\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    fib_lst = [2, 3]\n    while True:\n        next_fib = fib_lst[-1] + fib_lst[-2]\n        if len(fib_lst) < n:\n            fib_lst.append(next_fib)\n        elif len(fib_lst) == n and is_prime(fib_lst[-1]):\n            return fib_lst[-1]\n        elif len(fib_lst) == n:\n            fib_lst = fib_lst[1:]"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return (n*(n-1))//2"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    s = set()\n    for x in l:\n        if -x in s:\n            return True\n        s.add(x)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n < 4:\n        return [0, 0, 1, 2][n]\n    \n    a, b, c = 0, 0, 1\n    for _ in range(n-4):\n        a, b, c = b, c, a + b + c\n    \n    return c"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2-1] + l[n//2])/2"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    res = 1\n    while (n > 0):\n        if (n % 2 == 1):\n            res = (res * 2) % p\n        n = n // 2\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by -5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "    while y != 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return \"Incorrect input\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            if stack[-1] == \"<\":\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    \n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    largest = 1\n    for i in range(2, n // 2 + 1):\n        if n % i == 0 and is_prime(i):\n            largest = i\n    return largest"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    if len(xs) < 2:\n        return []\n    return [xs[i] * i for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "    a, b, c = 0, 0, 1\n    for _ in range(n):\n        a, b, c = b, c, a + b + c\n    return c"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x = str(x)\n    if shift < 0:\n        shift = len(x) + shift\n    shift = shift % len(x)\n    return x[-shift:] + x[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "    fruits = s.split()\n    oranges = int(fruits[1])\n    apples = int(fruits[0])\n    total_fruits = int(s)\n    mangoes = total_fruits - oranges - apples\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    even_nodes = [node for node in arr if node % 2 == 0]\n    if not even_nodes:\n        return []\n    min_val = min(even_nodes)\n    min_index = arr.index(min_val)\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n            \n    result = -1\n    for num, count in freq.items():\n        if count >= num and num > 0 and num > result:\n            result = num\n            \n    return result"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = [lst[0]]\n    for i in range(1, len(lst), 2):\n        result.append(lst[i])\n    for i in range(1, len(lst), 2):\n        result.append(lst[i])\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    return sum(q) <= w and q == q[::-1]"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n        return lst1\n    elif sum(len(s) for s in lst1) > sum(len(s) for s in lst2):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(i, a):\n                if a % j == 0:\n                    for k in range(j, a):\n                        if a % k == 0 and is_prime(i) and is_prime(j) and is_prime(k):\n                            return True\n    return False\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "    return x == 1 or x % n == 0 and is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if (a <= 0):\n        return False\n    root = a ** (1/3)\n    return int(root + 0.5) ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    count = 0\n    for digit in num:\n        if int(digit, 16) in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    def letter_grade(g):\n        if g >= 4.0:\n            return 'A' if g >= 4.0 else 'A+'\n        elif g >= 3.7:\n            return 'B' if g >= 3.7 else 'B+'\n        elif g >= 3.3:\n            return 'C' if g >= 3.3 else 'C+'\n        elif g >= 3.0:\n            return 'D' if g >= 3.0 else 'D+'\n        else:\n            return 'F'\n\n    return [letter_grade(g) for g in grades]"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    start = 10**(n-1)\n    end = 10**n - 1\n    count = 0\n    for i in range(start, end+1):\n        if i % 10 == 1 or i % 10 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while (N > 0):\n        sum += N % 2\n        N = N // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    anti_shuffle_words = [''.join(sorted(word)) for word in words]\n    anti_shuffle_sentence = ' '.join(anti_shuffle_words)\n    return anti_shuffle_sentence"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result)"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    return ''.join([chr(((ord(c) - ord('a')) + 2) % 26 + ord('a')) for c in s])"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst[0], lst[1])\n    second_smallest = float('inf')\n    for num in lst[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    boredoms = 0\n    if words[0] == 'I':\n        boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded += chr((ord(char) - ord('a') + 1) % 26 + ord('a'))\n            else:\n                encoded += chr((ord(char) - ord('A') + 1) % 26 + ord('A'))\n        elif char in vowels:\n            encoded += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            encoded += char\n    return encoded"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n    \n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    return digit_sum(max_prime)"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    product = a * b\n    unit_digit = product % 10\n    return unit_digit"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    number = float(value)\n    return int(number + 0.5) if abs(number - int(number)) > 0.5 else int(number)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i*2)\n        else:\n            result.append(i*2-1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    start = x if x % 2 == 0 else x + 1\n    end = y if y % 2 == 0 else y - 1\n    for i in range(end, start-1, -2):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\n\ndef reverse_array(arr):\n    return arr[::-1]\n\n\ndef replace_digits(arr):\n    def replace_digit(x):\n        name = \"One\"\n        if x == 1:\n            return name\n        elif x == 2:\n            return \"Two\"\n        elif x == 3:\n            return \"Three\"\n        elif x == 4:\n            return \"Four\"\n        elif x == 5:\n            return \"Five\"\n        elif x == 6:\n            return \"Six\"\n        elif x == 7:\n            return \"Seven\"\n        elif x == 8:\n            return \"Eight\"\n        elif x == 9:\n            return \"Nine\"\n        else:\n            return \"Strange number\"\n\n    return [replace_digit(x) for x in arr]\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    arr = replace_digits(arr)\n    arr = reverse_array(arr)\n    arr = by_length(arr)\n    print(arr)\n\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/106", "completion": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum_from_1_to_i(i))\n    return res\n\ndef sum_from_1_to_i(n):\n    if n == 1:\n        return 1\n    return n + sum_from_1_to_i(n-1)\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd"}
{"task_id": "HumanEval/108", "completion": "    def sum_digits(n):\n        s = 0\n        while n:\n            s += n % 10\n            n = n // 10\n        return s\n    return sum(1 for num in arr if sum_digits(abs(num)) > 0)"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    first = arr[0]\n    second = arr[n-1]\n    for i in range(1, n-1):\n        if first <= arr[i] <= second or second <= arr[i] <= first:\n            return True\n    return False"}
{"task_id": "HumanEval/110", "completion": "    return \"YES\" if all(num % 2 == 0 for num in lst1) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    counts = {}\n    for char in test.split():\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    max_count = max(counts.values())\n    result = [key for key, value in counts.items() if value == max_count]\n    return {result[0]: max_count} if len(result) == 1 else {key: max_count for key in result}"}
{"task_id": "HumanEval/112", "completion": "    rev_s = s[::-1]\n\tflag = False\n\tfor ch in c:\n\t\trev_s = rev_s.replace(ch, \"\")\n\tif rev_s == rev_s[::-1]:\n\t\treturn (rev_s,True)\n\telse:\n\t\treturn (rev_s,False)"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(int(c) % 2 != 0 for c in s)\n        result.append(f\"the number of odd elements {count}n the str1ng {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    max_fill = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                max_fill = max(max_fill, math.floor(capacity / 2))\n    return max_fill"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    result = []\n    for word in s.split():\n        if sum(1 for letter in word if letter not in 'aeiouAEIOU') == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    count = [0] * 256\n    max_count = 0\n    max_numbers = []\n    for num in arr:\n        count[num] += 1\n        if count[num] > max_count:\n            max_count = count[num]\n            max_numbers = [num]\n        elif count[num] == max_count:\n            max_numbers.append(num)\n    return sorted(max_numbers)[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    result = 0\n    for i in range(k):\n        result += int(str(arr[i]))\n    for i in range(k, len(arr)):\n        if int(str(arr[i])) < 10:\n            result += arr[i]\n    return result"}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n    return [num for num in collatz_sequence if num % 2 != 0]"}
{"task_id": "HumanEval/124", "completion": "    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2:\n            if day < 1 or day > 29:\n                return False\n        if year < 1900 or year > 2100:\n            return False\n        return True\n    except:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for c in txt if c.islower() and ord(c) % 2 != 0)\n        return [str(count)]"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    return \"NO\" if interval1[1] < interval2[0] or interval1[0] > interval2[1] else \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num\n    return abs(product) * (len(arr) - sum(1 for x in arr if x == 0))"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    ans = []\n\n    for i in range(n):\n        for j in range(m):\n            cnt = 0\n            x, y = i, j\n            while x >= 0 and y >= 0 and x < n and y < m:\n                cnt += 1\n                if cnt == k:\n                    ans.append(grid[x][y])\n                    break\n                if cnt < k:\n                    ans.append(grid[x][y])\n                    if x != 0:\n                        x -= 1\n                    if x != n - 1:\n                        x += 1\n                    if y != 0:\n                        y -= 1\n                    if y != m - 1:\n                        y += 1\n                    break\n                x += 1\n                y += 1\n            if cnt < k:\n                return []\n    return ans"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        arr = [1, 3, 2]\n        for i in range(3, n + 1):\n            arr.append(arr[i - 1] + arr[i - 2] + arr[i - 3])\n        return arr"}
{"task_id": "HumanEval/131", "completion": "    if n < 10:\n        return n\n    else:\n        if (n % 2 == 0):\n            return 0\n        else:\n            odd = int(n % 10)\n            return odd * digits(int(n / 10))"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    rounded_lst = [int(round(num)) for num in lst]\n    squared_lst = [num ** 2 for num in rounded_lst]\n    return sum(squared_lst)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    return last_char.isalpha() and ' ' not in txt"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] >= arr[i - 1]:\n            return i - 1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_lst = [x for x in lst if x < 0]\n    pos_lst = [x for x in lst if x > 0]\n    if len(neg_lst) == 0 or len(pos_lst) == 0:\n        return (None, None)\n    else:\n        return (max(neg_lst), min(pos_lst))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n\t\treturn None\n\telif type(a) == int:\n\t\treturn a if a > b else b\n\telif type(a) == float:\n\t\treturn a if a > b else b\n\telif type(a) == str:\n\t\treturn a if float(a) > float(b) else b"}
{"task_id": "HumanEval/138", "completion": "    if n < 8:\n        return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial // i\n    return result"}
{"task_id": "HumanEval/140", "completion": "    new_text = text.replace(' ', '_')\n    fixed_text = new_text.replace('   ', '-')\n    return fixed_text"}
{"task_id": "HumanEval/141", "completion": "    file_name_parts = file_name.split('.')\n    if len(file_name_parts) != 2:\n        return \"No\"\n    elif len(file_name_parts[0]) > 3 or file_name_parts[0] == '.' or file_name_parts[1] == '.' or file_name_parts[0] == '.' or file_name_parts[1] == '.' or file_name_parts[1] == '.':\n        return \"No\"\n    elif not file_name_parts[0].isalpha():\n        return \"No\"\n    elif not file_name_parts[1] in ['txt', 'exe', 'dll']:\n        return \"No\"\n    else:\n        return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            total_sum += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            total_sum += lst[i]**3\n    return total_sum"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    numerator = int(x) * int(n)\n    return numerator % int(n) == 0"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: sum(int(digit) for digit in str(abs(x))))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and num % 2 != 0 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0] * 3\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    result = 0\n    result += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    result += count[2] * count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    result += count[0] * count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    result += count[1] * count[2] * count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    result *= 3\n    return result"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    \n    return tuple(planets[start:end+1])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(filter(lambda x: len(x) % 2 == 0, lst))"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return None\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            total += num * num\n    return total"}
{"task_id": "HumanEval/152", "completion": "    return [abs(guess[i] - game[i]) if guess[i] != game[i] else 0 for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "    strengths = {}\n    for ext in extensions:\n        if ext in strengths:\n            strengths[ext] += 1\n        else:\n            strengths[ext] = 1\n    strongest = max(strengths, key=strengths.get)\n    return class_name + '.' + strongest"}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(a) - len(b) + 1):\n        if b in a[i:i+len(b)]:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return even, odd"}
{"task_id": "HumanEval/156", "completion": "    if not 1 <= number <= 1000:\n        return \"\"\n    roman_map = {1000: \"M\", 900: \"CM\", 500: \"D\", 400: \"CD\", 100: \"C\", 90: \"XC\", 50: \"L\", 40: \"XL\", 10: \"X\", 9: \"IX\", 5: \"V\", 4: \"IV\", 1: \"I\"}\n    roman_numeral = \"\"\n    for value, letter in roman_map.items():\n        while number >= value:\n            roman_numeral += letter\n            number -= value\n    return roman_numeral"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n\tsides.sort()\n\tif sides[0]**2 + sides[1]**2 == sides[2]**2:\n\t\treturn True\n\telse:\n\t\treturn False"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + min(need, remaining)\n    left = remaining - min(need, remaining)\n    return [eaten, left]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for op in operator:\n        if op == '+':\n            x = stack.pop()\n            y = stack.pop()\n            stack.append(x + y)\n        elif op == '-':\n            x = stack.pop()\n            y = stack.pop()\n            stack.append(y - x)\n        elif op == '*':\n            x = stack.pop()\n            y = stack.pop()\n            stack.append(x * y)\n        elif op == '/':\n            x = stack.pop()\n            y = stack.pop()\n            stack.append(y // x)\n        elif op == '**':\n            x = stack.pop()\n            y = stack.pop()\n            stack.append(y ** x)\n    return stack[0]"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return sorted(result)"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            temp = ''\n            while stack[-1] != '(':\n                temp += stack.pop()\n            stack.pop()\n            stack[-1] += temp\n        else:\n            stack[-1] += char\n    return stack"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(num - mean) for num in numbers]\n    return sum(absolute_deviations) / len(absolute_deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    return result[:-1]"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(0)\n        else:\n            depth = len(stack) - 1\n            stack[depth] += 1\n            max_depth = max(max_depth, stack[depth])\n            result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        product = 1\n        total_sum = 0\n        for num in numbers:\n            product *= num\n            total_sum += num\n        return (total_sum, product)"}
{"task_id": "HumanEval/9", "completion": "    max_list = []\n    window = numbers[:len(numbers)//2]\n    for i in range(len(numbers)//2, len(numbers)):\n        window.append(numbers[i])\n        max_list.append(max(window))\n    return max_list"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Make a palindrome from a supplied string \"\"\"\n    n = len(string)\n    if n == 0:\n        return \"a\"\n    if is_palindrome(string):\n        return string\n    for i in range(n, 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(min(len(a), len(b))):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "    lowercase_chars = set(c.lower() for c in string)\n    return len(lowercase_chars)"}
{"task_id": "HumanEval/17", "completion": "    beats_per_note = {'o': 4, 'o|': 2, '.': 1}\n    beats = [beats_per_note.get(note, 0) for note in music_string]\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    # Dictionary to map numbers to integers\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Split the string into a list of individual numbers\n    numbers_list = numbers.split()\n    \n    # Sort the list of numbers based on their integer representation\n    numbers_list.sort(key=lambda x: number_map[x])\n    \n    # Join the sorted list of numbers back into a string\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    closest_difference = abs(numbers[0] - numbers[1])\n\n    for i in range(1, len(numbers) - 1):\n        current_difference = abs(numbers[i] - numbers[i+1])\n        if current_difference < closest_difference:\n            closest_pair = (numbers[i], numbers[i+1])\n            closest_difference = current_difference\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    if string == '':\n\t\treturn 0\n\treturn 1 + strlen(string[1:])"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    result = \"\"\n    for s in strings:\n        result += s\n    return result"}
{"task_id": "HumanEval/29", "completion": "    filtered_strings = [s for s in strings if s.startswith(prefix)]\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds x such that poly(x) = 0 using binary search.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or n <= 1:\n        return -1\n    \n    left, right = 0, max(xs)\n    while left < right:\n        mid = (left + right) / 2\n        if poly(xs, mid) < 0:\n            left = mid + 0.00001\n        else:\n            right = mid\n    return round(left, 2)"}
{"task_id": "HumanEval/33", "completion": "    return [l[i] if i % 3 != 0 else sorted([l[i], l[i]]) for i in range(len(l))]"}
{"task_id": "HumanEval/34", "completion": "    unique = set()\n    for num in l:\n        unique.add(num)\n    return sorted(unique)"}
{"task_id": "HumanEval/35", "completion": "    if not l:\n        return None\n    max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    even_indicies = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indicies]\n    even_values.sort()\n    new_l = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            new_l.append(l[i])\n        else:\n            new_l.append(even_values.pop(0))\n    return new_l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded string using decode_cyclic function.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 2, 3\n\twhile n > 1:\n\t\tfor i in range(2, int(b**0.5) + 1):\n\t\t\tif b % i == 0:\n\t\t\t\tbreak\n\t\telse:\n\t\t\tn -= 1\n\t\tc = a + b\n\t\ta = b\n\t\tb = c\n\treturn a"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l)-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i+1, len(l)-1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [num+1 for num in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = x // base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n-3):\n            a, b, c, d = b, d, c, a+b+c+d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    mid = n//2\n    if n%2 == 0:\n        return (l[mid-1]+l[mid])/2\n    else:\n        return l[mid]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n        return 1\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    if len(s0) != len(s1):\n        return False\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \">\": \"<\"}\n    for char in brackets:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    while n % 2 == 0:\n        n //= 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            n //= i\n    if n > 2:\n        return n"}
{"task_id": "HumanEval/60", "completion": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * (n - 1)\n    for i in range(1, n):\n        result[i-1] = xs[i] * i\n    return result"}
{"task_id": "HumanEval/63", "completion": "    fib = [0, 1]\n    for _ in range(2, n+1):\n        fib.append(fib[-1] + fib[-2] + fib[-3])\n    return fib[-1]"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    if s[-1] == 'y' and count > 0 and (s[-2] not in vowels):\n        count -= 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    num_len = len(num_str)\n    shift %= num_len\n    return num_str[num_len - shift:] + num_str[:num_len - shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    count_apple = 0\n    count_orange = 0\n    count_mango = 0\n    total_fruits = n\n    fruits = s.split()\n    for fruit in fruits:\n        if 'apple' in fruit:\n            count_apple += 1\n        elif 'orange' in fruit:\n            count_orange += 1\n    count_mango = total_fruits - count_apple - count_orange\n    return count_mango"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n    else:\n        return [min(even_values), arr.index(min(even_values))]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    n = len(lst)\n    result = []\n    i, j = 0, n - 1\n    while i <= j:\n        if i == j:\n            result.append(lst[i])\n        else:\n            result.append(lst[i])\n            result.append(lst[j])\n        i += 1\n        j -= 1\n    return result"}
{"task_id": "HumanEval/71", "completion": "    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if area < 0:\n        return -1\n    return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "    if len(q)<2:\n        return False\n    if q == q[::-1]:\n        return sum(q) <= w\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    if len(lst1) == len(lst2):\n        return lst1\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    prime = []\n    for i in range(2, a):\n        for j in range(2, a):\n            if i * j == a:\n                prime.append(i)\n                prime.append(j)\n                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x % n != 0:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return iscube(-a)\n    x = a ** (1/3)\n    return x.is_integer()"}
{"task_id": "HumanEval/78", "completion": "    count = 0\n    for char in num:\n        if char in ['B', 'D']:\n            count += 1\n    return count\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef count_prime_hex_digits(hex_num):\n    count = 0\n    for char in hex_num:\n        if char.isdigit() and isPrime(int(char)):\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal).replace(\"0b\", \"db\")\n    return binary"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('F')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 10\n    return 9 * starts_one_ends(n - 1)"}
{"task_id": "HumanEval/84", "completion": "    total = 0\n    while (N > 0):\n        total += N % 2\n        N //= 2\n    return str(total)"}
{"task_id": "HumanEval/85", "completion": "    odd_indices_even_elements = [lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0]\n    return sum(odd_indices_even_elements)"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/88", "completion": "    return sorted(array) if sum(array[0], array[-1]) % 2 == 0 else sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "    def rotate(letter):\n        if letter.isalpha():\n            ascii_val = ord(letter)\n            new_ascii_val = (ascii_val - 97 + 2) % 26\n            return chr(new_ascii_val + 97)\n        else:\n            return letter\n    \n    return ''.join([rotate(c) for c in s])"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = lst[0]\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    i = 0\n    while i < len(S):\n        if S[i] == 'I' and i < len(S) - 1 and (S[i + 1] == '.' or S[i + 1] == '?' or S[i + 1] == '!'):\n            count += 1\n        i += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return (x == y + z) or (y == x + z) or (z == x + y)\n    return False"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                encoded_message += chr((ord(char) - 97 + 2) % 26 + 97)\n        elif char.lower() in 'aeiou':\n            encoded_message += chr((ord(char.lower()) - 97 + 2) % 26 + 97)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if isPrime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime == -1:\n        return 0\n    else:\n        return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    \n    key_case = set()\n    for key in dict:\n        key_case.add(key.lower())\n        key_case.add(key.upper())\n    \n    return len(key_case) == 1"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    i = 2\n    while len(primes) < n:\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return int(str(a)[-1]) * int(str(b)[-1])"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOUaeiou\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    # Convert the value to float\n    val = float(value)\n    # Round the value to the closest integer\n    return int(round(val))"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n + 1):\n        if n % 2 == 0:\n            result.append(i + 1)\n        else:\n            result.append(i + 2)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return \"{0:b}\".format(round(avg))"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        return any(int(d) % 2 == 0 for d in str(n))\n    \n    return sorted(set(i for i in x if not has_even_digit(i)))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef reverse_digits(arr):\n    return arr[::-1]\n\ndef replace_digits(arr):\n    digit_names = {\n        0: \"Zero\",\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(digit_names[num])\n    return result"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    odds1 = [num for num in lst1 if num % 2 != 0]\n    odds2 = [num for num in lst2 if num % 2 != 0]\n    if len(odds1) == len(lst1) and len(odds2) == len(lst2):\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    test_list = test.split(' ')\n    freq_map = {}\n    max_freq = 0\n    \n    for word in test_list:\n        if word in freq_map:\n            freq_map[word] += 1\n        else:\n            freq_map[word] = 1\n        \n        if freq_map[word] > max_freq:\n            max_freq = freq_map[word]\n    \n    result = {}\n    for key, value in freq_map.items():\n        if value == max_freq:\n            result[key] = value\n    \n    return result"}
{"task_id": "HumanEval/112", "completion": "    for ch in c:\n        s = s.replace(ch,\"\")\n    return s,s==s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    res = []\n    for s in lst:\n        odd_count = sum(int(x) % 2 != 0 for x in s)\n        res.append(f\"the number of odd elements {odd_count} in the string {s}\")\n    return res"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows, cols = len(grid), len(grid[0])\n    max_water = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                water = min(capacity, rows - i) * min(capacity, cols - j)\n                max_water = max(max_water, water)\n    return max_water\n\ndef max_lower(grid, capacity):\n    return math.ceil(max_fill(grid, capacity) / capacity)"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        count_consonants = sum(1 for char in word if char.lower() not in 'aeiou')\n        if count_consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    n = len(word)\n    for i in range(n - 2, -1, -1):\n        if word[i] not in vowels and word[i + 1] in vowels:\n            return word[i + 1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        if s == '(':\n            stack.append(s)\n        else:\n            if len(stack) == 0:\n                return \"No\"\n            else:\n                stack.pop()\n    return \"Yes\" if len(stack) == 0 else \"No\""}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        sum += min(arr[i], 10)\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    return [num for num in collatz_sequence if num % 2 != 0]"}
{"task_id": "HumanEval/124", "completion": "    if len(date) != 10:\n        return False\n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12 or day < 1 or day > 31 or year < 1:\n        return False\n    \n    if month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    else:\n        if day < 1 or day > 31:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return len([c for c in txt if ord(c)%2!=0])"}
{"task_id": "HumanEval/126", "completion": "    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    intersection_length = end - start + 1\n    \n    if intersection_length < 2:\n        return \"NO\"\n    \n    if intersection_length == 2:\n        return \"YES\"\n    \n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    product = 1\n    for num in arr:\n        product *= 1 if num >= 0 else -1 if num < 0 else 0\n    if len(arr) == 0:\n        return None\n    return sum(abs(num) * product for num in arr)"}
{"task_id": "HumanEval/129", "completion": "    if k == 0:\n        return []\n    \n    # Initializing the dp table to store the results of subproblems\n    dp = [[[float('inf')] * len(grid[0]) for _ in range(len(grid))] for _ in range(k + 1)]\n    \n    # Fill in the base cases\n    for i in range(1, k + 1):\n        for x in range(len(grid)):\n            for y in range(len(grid[0])):\n                dp[i][x][y] = grid[x][y]\n    \n    # Fill in the rest of the dp table using dynamic programming\n    for i in range(2, k + 1):\n        for x in range(len(grid)):\n            for y in range(len(grid[0])):\n                for dx in [-1, 0, 1]:\n                    for dy in [-1, 0, 1]:\n                        if dx == 0 and dy == 0:\n                            continue\n                        new_x = x + dx\n                        new_y = y + dy\n                        if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]):\n                            temp = grid[x][y] + dp[i - 1][new_x][new_y]\n                            dp[i][x][y] = min(dp[i][x][y], temp)\n    \n    return dp[k][0][0]"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [3]\n    elif n == 1:\n        return [1, 3]\n    else:\n        tri_sequence = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                tri_sequence.append(tri_sequence[i-1] + tri_sequence[i-2])\n            else:\n                tri_sequence.append(tri_sequence[i-1] + tri_sequence[i-2] + tri_sequence[i+1])\n        return tri_sequence"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    return sum(int(x**2) for x in lst)"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if last_char.isalpha() and not txt.strip().endswith(last_char):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_idx = -1\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            max_idx = i\n    return max_idx"}
{"task_id": "HumanEval/136", "completion": "    neg_nums = [x for x in lst if x < 0]\n    pos_nums = [x for x in lst if x > 0]\n\n    if not neg_nums or not pos_nums:\n        return (None, None)\n    \n    largest_neg = max(neg_nums)\n    smallest_pos = min(pos_nums)\n\n    return (largest_neg, smallest_pos)"}
{"task_id": "HumanEval/137", "completion": "    if type(a) != type(b):\n        return a\n    if type(a) == int:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n    elif type(a) == float:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n    elif type(a) == str:\n        if a.replace(\".\", \"\").replace(\",\", \"\") > b:\n            return a\n        elif a.replace(\".\", \"\").replace(\",\", \"\") < b:\n            return b\n    return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 4 == 0:\n        return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\")"}
{"task_id": "HumanEval/141", "completion": "    if not file_name.count('.') == 1:\n        return \"Invalid file name\"\n    parts = file_name.split('.')\n    if parts[0] == '' or not parts[0][0].isalpha() or not parts[0][1:].isdigit() or parts[1].lower() not in ['txt', 'exe', 'dll']:\n        return \"Invalid file name\"\n    if len(parts[1]) > 3 or len(parts[1]) < 1:\n        return \"Invalid file name\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        if i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    return (int(x) * int(n)) == (int(n) * int(x))"}
{"task_id": "HumanEval/145", "completion": "    if not nums:\n        return []\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 != 0 and num % 100 % 10 % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    res = 0\n    mod = [0, 0, 0]\n    for i in range(1, n + 1):\n        res += 1\n        mod[i % 3] += 1\n    res *= (res - 1) // 2\n    res += sum(min(mod[i], mod[n - i]) * (mod[n - i] - mod[i]) for i in range(3))\n    return res"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        startIndex = planets.index(planet1)\n        endIndex = planets.index(planet2)\n        if startIndex > endIndex:\n            return ()\n        else:\n            return tuple(planets[startIndex+1:endIndex])"}
{"task_id": "HumanEval/149", "completion": "    lst = [s for s in lst if len(s)%2 == 0]\n    lst.sort(key=len)\n    return lst"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    if not lst:\n        return 0\n    return 2 * sum(x*x for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))"}
{"task_id": "HumanEval/152", "completion": "    return [abs(game[i] - guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "    strengths = {}\n    for ext in extensions:\n        cap = 0\n        sm = 0\n        for char in ext:\n            if char.isupper():\n                cap += 1\n            else:\n                sm += 1\n        strengths[ext] = cap - sm\n    strongest_ext = max(strengths, key=strengths.get)\n    return class_name + '.' + strongest_ext"}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    return b in a + a"}
{"task_id": "HumanEval/155", "completion": "    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = len(num_str) - even_count\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    if not 1 <= number <= 1000:\n        return \"\"\n    roman_numerals = [\n        (1000, \"M\"), (900, \"CM\"), (500, \"D\"), (400, \"CD\"),\n        (100, \"C\"), (90, \"XC\"), (50, \"L\"), (40, \"XL\"),\n        (10, \"X\"), (9, \"IX\"), (5, \"V\"), (4, \"IV\"), (1, \"I\")\n    ]\n    result = \"\"\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return (sides[0]**2 + sides[1]**2) == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    left = remaining - eaten\n    return [eaten, left]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack.append(operand[i])\n        elif operator[i] == '-':\n            stack.append(-operand[i])\n        elif operator[i] == '*':\n            stack[-1] = stack[-1] * operand[i]\n        elif operator[i] == '/':\n            stack[-1] = stack[-1] // operand[i]\n        elif operator[i] == '**':\n            stack[-1] = stack[-1] ** operand[i]\n    return stack[0]"}
{"task_id": "HumanEval/161", "completion": "    new_s = \"\"\n    for char in s:\n        if char.isalpha():\n            new_s += char.swapcase()\n        else:\n            new_s += char\n    return new_s[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    while a <= b:\n        if a % 2 == 0:\n            result.append(a)\n        a += 1\n    return result"}
{"task_id": "HumanEval/0", "completion": "    min_difference = float('inf')\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            difference = abs(numbers[i] - numbers[j])\n            if difference < min_difference:\n                min_difference = difference\n    return min_difference < threshold"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) > 0:\n                temp = ''\n                while len(stack) > 0:\n                    temp += stack.pop()\n                result.append(temp)\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    return [delimeter if i != len(numbers)-1 else num for i, num in enumerate(numbers)]"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    depths = []\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                depth = len(stack)\n                max_depth = max(max_depth, depth)\n                depths.append(depth)\n                stack.pop()\n            else:\n                break\n    \n    return depths"}
{"task_id": "HumanEval/7", "completion": "    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(lambda x, y: x * y, numbers))"}
{"task_id": "HumanEval/9", "completion": "    n = len(numbers)\n    rolling_max_elements = []\n    for i in range(n):\n        max_val = float('-inf')\n        for j in range(i, i + n):\n            max_val = max(max_val, numbers[j % n])\n        rolling_max_elements.append(max_val)\n    return rolling_max_elements"}
{"task_id": "HumanEval/10", "completion": "    \"\"\"\n    Make the given string a palindrome by appending the reverse of the prefix that comes before the longest\n    palindromic suffix.\n    \"\"\"\n    for i in range(len(string), 0, -1):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            prefix = string[:i]\n            return string + prefix[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    beats = {'o': 4, 'o|': 2, '.'|': 1}\n    result = []\n    current_beat = 0\n    for char in music_string:\n        if char in beats:\n            current_beat += beats[char]\n            result.append(current_beat)\n        else:\n            result.append(current_beat)\n            current_beat = 0\n    return result"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    nums = list(map(int, numbers.split()))\n    nums.sort()\n    return ' '.join(map(str, nums))"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_nums = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_nums = (numbers[i], numbers[i + 1])\n    return closest_nums"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    result = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    if string == \"\":\n        return 0\n    return 1 + strlen(string[1:])"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]"}
{"task_id": "HumanEval/27", "completion": "    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return list(filter(lambda s: s.startswith(prefix), strings))"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds x such that poly(x) = 0.\n    return x such that poly(x) = 0.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) != 0:\n        raise ValueError(\"Coefficients list should have even number of coefficients and largest non zero coefficient\")\n    return -xs[0] / (2 * xs[1])"}
{"task_id": "HumanEval/33", "completion": "    res = [l[i] if i % 3 != 0 else sorted(l[i:i+3]) for i in range(len(l))]\n    return res"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if len(l) == 0:\n        return None\n    max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    result = []\n    for i in even_indices:\n        result.append(l[i])\n        if i + 1 < len(l):\n            result.append(even_values.pop(0))\n    return result"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the process of encode_cyclic.\n    \"\"\"\n    # reverse the cycling process\n    reversed_s = s[::-1]\n    # split string to groups. Each of length 3.\n    groups = [reversed_s[(3 * i):min((3 * i + 3), len(reversed_s))] for i in range((len(reversed_s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join the groups to form the decoded string.\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    fib = [1, 2]\n    while len(fib) < n:\n        fib.append(fib[-1] + fib[-2])\n    for num in fib:\n        if is_prime(num):\n            return num\n    return None\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    num_set = set()\n    for num in l:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x < 0 or base < 2:\n        return \"Invalid Input\"\n    res = ''\n    while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return res"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n < 4:\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * p) % p\n        n = n // 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    if len(s0) != len(s1):\n        return False\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a+b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    for bracket in brackets:\n        if bracket in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[bracket] != top_element:\n                return False\n        else:\n            stack.append(bracket)\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    if n <= 1:\n        return 0\n    \n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in brackets:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'  # Treat '#' as a non-existent top element\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    return [coeff*i for coeff, i in zip(xs[1:], range(1, len(xs) + 1))]"}
{"task_id": "HumanEval/63", "completion": "    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n    return fib[n]"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouy\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels and (i == len(s) - 1 or s[i+1].lower() not in vowels):\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    digits = list(str(x))\n    n = len(digits)\n    shift %= n\n    return ''.join(digits[-shift:] + digits[:-shift])"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/67", "completion": "    arr = s.split()\n    if len(arr) != 2:\n        return \"Invalid input\"\n    apples = int(arr[0])\n    oranges = int(arr[1])\n    if apples + oranges != n:\n        return \"Invalid input\"\n    return n - (apples + oranges)"}
{"task_id": "HumanEval/68", "completion": "    even_values = [node for node in arr if node % 2 == 0]\n    if not even_values:\n        return []\n    smallest_even_value = min(even_values)\n    smallest_even_index = arr.index(smallest_even_value)\n    return [smallest_even_value, smallest_even_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    for num, count in freq.items():\n        if num > 0 and count >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    return [lst.pop(0)] + [lst.pop(-1)] + strange_sort_list(lst)"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "    if a < 3:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, i):\n                if i % j == 0:\n                    for k in range(2, i // j):\n                        if i // j % k == 0:\n                            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    while(n ** int <= x):\n        if n ** int == x:\n            return True\n        n *= n\n    return False"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    return sum(int(c, 16) for c in num if c.isdigit() or (c in 'ABCDEF') and c.upper() != 'B')\n\ndef countPrimeDigits(num):\n    count = 0\n    for char in num:\n        if char.isdigit() and int(char) > 1 and all(int(char) % i != 0 for i in range(2, int(char))):\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary_str = bin(decimal)[2:]\n    return 'db' + binary_str + 'db'"}
{"task_id": "HumanEval/80", "completion": "    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return len(s) >= 3"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    return n + n"}
{"task_id": "HumanEval/84", "completion": "    return bin(N)[2:].count('1')"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "completion": "    return ''.join(sorted(s))"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort()\n    result.sort(key=lambda tup: tup[0])\n    return result"}
{"task_id": "HumanEval/88", "completion": "    return sorted(array, reverse=True) if (array[0]+array[-1])%2==0 else sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    result = ''\n    for char in s:\n        result += rotated_alphabet[ord(char) - ord('a')]\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = min(lst[0], lst[1])\n    second_min = float('inf')\n    for num in lst[2:]:\n        if num < min_val:\n            second_min = min_val\n            min_val = num\n        elif num < second_min and num != min_val:\n            second_min = num\n    return second_min if second_min != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    words = S.split()\n    for i in range(len(words)):\n        if words[i].lower() == 'i':\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                encoded_message += chr((ord(char) - 97 + 2) % 26 + 97)\n        elif char in 'AEIOUaeiou':\n            encoded_message += chr((ord(char) - 97 + 2) % 26 + 97)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    max_prime = -1\n    for num in lst:\n        if is_prime(num):\n            max_prime = max(max_prime, num)\n    return sum_of_digits(max_prime)\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            for k in dict:\n                if k.islower() and k != key:\n                    return False\n        elif key.isupper():\n            for k in dict:\n                if k.isupper() and k != key:\n                    return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    primes = [2]\n    i = 3\n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 2\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    value = float(value)\n    return int(value + 0.5)"}
{"task_id": "HumanEval/100", "completion": "    return [i for i in range(1, 2*n+1, 2)]"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    if (x % 2 == 0 and y % 2 == 0):\n        return max(x, y)\n    elif (x % 2 == 0):\n        return x\n    elif (y % 2 == 0):\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = round((n+m)/2)\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "    def containsEven(n):\n        while n:\n            if n % 2 == 0:\n                return True\n            n //= 10\n        return False\n    \n    result = []\n    for num in x:\n        if not containsEven(num):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef sortAndReplace(arr):\n    arr[:] = by_length(arr)\n    return sorted(arr, key=lambda x: int(str(x)[0]), reverse=True)\n\ndef replaceWithNames(arr):\n    return [\"One\" if x == 1 else \"Two\" if x == 2 else \"Three\" if x == 3 else \"Four\" if x == 4 else \"Five\" if x == 5 else \"Six\" if x == 6 else \"Seven\" if x == 7 else \"Eight\" if x == 8 else \"Nine\" for x in arr]"}
{"task_id": "HumanEval/106", "completion": "    def factorial(num):\n        fact = 1\n        for i in range(1, num + 1):\n            fact *= i\n        return fact\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    odd = 0\n    even = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num > 0:\n            if sum(int(digit) for digit in str(num)) > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    count = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count += 1\n    for num in lst2:\n        if num % 2 == 0:\n            count -= 1\n            if count < 0:\n                return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    letter_count = {}\n    for letter in test.split():\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    \n    max_count = max(letter_count.values())\n    most_repeated_letters = [letter for letter, count in letter_count.items() if count == max_count]\n    \n    return {letter: count for letter, count in letter_count.items() if count == max_count}"}
{"task_id": "HumanEval/112", "completion": "    res = \"\"\n    for ch in s:\n        if ch not in c:\n            res += ch\n    return (res,res==res[::-1])\n\ndef isPalindrome(s):\n    return s == s[::-1]\n\ndef isPalindromeAfterDeletion(s,c):\n    result,flag = reverse_delete(s,c)\n    return isPalindrome(result)"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s}\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    def dfs(x, y, well, bucket, moves):\n        if well < 0 or well > len(grid) or y < 0 or y > len(grid[0]) or grid[well][y] == 1:\n            return -math.inf\n        if moves > 0:\n            return -math.inf\n        if well == len(grid)-1:\n            return moves\n        max_moves = -math.inf\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            new_well = well + dx + dy\n            new_bucket = bucket + 1\n            if new_bucket > capacity:\n                continue\n            max_moves = max(max_moves, dfs(new_well, y+dy, well+dx+dy, new_bucket, moves+1))\n        return max_moves\n    \n    max_moves = -math.inf\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                continue\n            max_moves = max(max_moves, dfs(i, j, i, 1, 0))\n    return max_moves"}
{"task_id": "HumanEval/116", "completion": "    def count_ones(x):\n        return bin(x).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char.lower() not in 'aeiou') == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return 'No'\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "    n = len(arr)\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -arr[i])\n    for _ in range(k):\n        max_heapq.heappop(max_heap)\n    return [-x for x in max_heap]"}
{"task_id": "HumanEval/121", "completion": "    total_sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total_sum += lst[i]\n    return total_sum"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    count = 0\n    for num in arr[:k]:\n        if num < 10:\n            sum += num\n            count += 1\n        elif num < 100:\n            sum += num\n            count += 1\n        else:\n            sum += num\n            count += 1\n    return sum + count * 10"}
{"task_id": "HumanEval/123", "completion": "    sequence = []\n    while n != 1:\n        sequence.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = n * 3 + 1\n    return sorted([x for x in sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    parts = date.split('/')\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    try:\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if day < 1 or day > 30:\n        return False\n    if day < 1 or day > 29:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return sum(1 for c in txt if ord(c) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start\n    \n    if intersection_length <= 0:\n        return \"NO\"\n    \n    if intersection_length == 1:\n        return \"YES\"\n    \n    is_prime = True\n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            is_prime = False\n            break\n    \n    return \"YES\" if is_prime else \"NO\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product_sign = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        product_sign *= 1 if num >= 0 else -1 if num < 0 else 0\n        sum_of_magnitudes += abs(num) * product_sign\n    return sum_of_magnitudes"}
{"task_id": "HumanEval/129", "completion": "    m = len(grid)\n    n = len(grid[0])\n    ans = [None] * k\n    for i in range(k):\n        # Add 1 to reach to the cell\n        ans[i] = grid[0][0] + 1\n        grid[0][0] += 1\n    if k > 1:\n        for i in range(1, m):\n            ans[i] = grid[i][0]\n    for j in range(1, n):\n        ans[0] = grid[0][j]\n        grid[0][j] += 1\n    for i in range(1, m):\n        for j in range(1, n):\n            ans[i] = min(grid[i][j], ans[i - 1], ans[i])\n            grid[i][j] += 1\n    return ans"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    else:\n        tribonacci = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append((i - 1) // 2 + tribonacci[i - 2])\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n        return tribonacci"}
{"task_id": "HumanEval/131", "completion": "    if n < 10:\n        if n % 2 != 0:\n            return n\n        else:\n            return 0\n    else:\n        return digits(n % 10) * digits(n // 10)"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    lst = [int(x) for x in lst]\n    lst = [x for x in lst if x >= 0]\n    total_sum = 0\n    for num in lst:\n        total_sum += num * num\n    return total_sum"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    for word in words:\n        if len(word) > 1 and word[-2].isalpha() and word[-1].isalpha():\n            return False\n    return txt[-1].isalpha()"}
{"task_id": "HumanEval/135", "completion": "    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "    if not lst:\n        return None, None\n    neg = None\n    pos = None\n    for num in lst:\n        if num < 0 and (neg is None or num > neg):\n            neg = num\n        elif num > 0 and (pos is None or num < pos):\n            pos = num\n    if neg is None:\n        return None, pos\n    elif pos is None:\n        return neg, None\n    else:\n        return neg, pos"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and isinstance(b, str):\n        if ',' in a:\n            a = float(a.replace(',', '.'))\n        if ',' in b:\n            b = float(b.replace(',', '.'))\n    if isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    if isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    return None"}
{"task_id": "HumanEval/138", "completion": "    return n % 2 == 0 and n <= 20"}
{"task_id": "HumanEval/139", "completion": "    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] == \" \":\n            if i < len(text) - 1 and text[i+1] == \" \":\n                result += \"-\"\n                i += 1\n            else:\n                result += \"_\"\n                i += 1\n        else:\n            result += text[i]\n            i += 1\n    return result"}
{"task_id": "HumanEval/141", "completion": "    if not file_name.endswith(\".txt\"):\n        return \"No\"\n    if not file_name.endswith(\".exe\"):\n        return \"No\"\n    if not file_name.endswith(\".dll\"):\n        return \"No\"\n    dot_index = file_name.rfind('.')\n    if dot_index == -1:\n        return \"No\"\n    sub_string_before_dot = file_name[:dot_index]\n    if sub_string_before_dot.isalpha() or sub_string_before_dot.isnumeric() and len(sub_string_before_dot) > 3:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if (i % 3 == 0 or i % 4 == 0) and not (i % 3 == 0 and i % 4 == 0):\n            sum += lst[i] ** 2 if i % 3 == 0 else lst[i] ** 3\n    return sum"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return \" \".join(result)\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "    num1 = int(x)\n    den1 = int(n)\n    num2 = int(n)\n    den2 = int(x)\n    return (num1 * num2) / (den1 * den2) == 0"}
{"task_id": "HumanEval/145", "completion": "    nums.sort(key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = []\n    for i in range(1, n + 1):\n        a.append(i * i - i + 1)\n    count = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        start = planets.index(planet1)\n        end = planets.index(planet2)\n        return tuple(planets[start + 1:end])\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "    return sorted(filter(lambda x: len(x) % 2 == 0, lst))"}
{"task_id": "HumanEval/150", "completion": "    if isPrime(n):\n        return x\n    else:\n        return y\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    count = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num * num\n            count += 1\n    return total"}
{"task_id": "HumanEval/152", "completion": "    return [abs(x-y) for x,y in zip(game, guess)]"}
{"task_id": "HumanEval/153", "completion": "    def strength(extension):\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        return cap - sm\n    \n    strongest_extension = max(extensions, key=lambda x: (strength(x), extensions.index(x)))\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    return b in a+a"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count or (count == max_count and word < max_word):\n            max_word = word\n            max_count = count\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if remaining < need:\n        return [number + remaining, 0]\n    return [number + remaining, remaining - need]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for op in operator:\n        if op in ['+', '-', '*', '/']:\n            b = stack.pop()\n            a = stack.pop()\n            if op == '+':\n                stack.append(a + b)\n            elif op == '-':\n                stack.append(a - b)\n            elif op == '*':\n                stack.append(a * b)\n            elif op == '/':\n                stack.append(a // b)\n        else:\n            stack.append(int(op))\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for c in s:\n        if c.isalpha():\n            result += c.swapcase()\n        else:\n            result += c\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if text:\n        h = hashlib.md5()\n        h.update(text.encode('utf-8'))\n        return h.hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff < threshold"}
{"task_id": "HumanEval/1", "completion": "    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            group = stack.pop()\n            result.append(group)\n            if stack:\n                stack[-1] += group\n            else:\n                result[-1] = result[-1].strip()\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return (number - int(number))"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    abs_deviations = [abs(num - mean) for num in numbers]\n    return sum(abs_deviations) / len(abs_deviations)"}
{"task_id": "HumanEval/5", "completion": "    return [delimeter]*(len(numbers)-1) + [numbers[-1]]"}
{"task_id": "HumanEval/6", "completion": "    max_nesting = 0\n    curr_nesting = 0\n    max_levels = []\n    for char in paren_string:\n        if char == '(':\n            curr_nesting += 1\n            max_levels.append(curr_nesting)\n            max_nesting = max(max_nesting, curr_nesting)\n        elif char == ')':\n            curr_nesting -= 1\n    return max_levels"}
{"task_id": "HumanEval/7", "completion": "    return list(filter(lambda s: substring in s, strings))"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)"}
{"task_id": "HumanEval/9", "completion": "    max_length = 0\n    result = []\n    for i in range(len(numbers)):\n        max_length = max(max_length, i + 1)\n        result.append(max(numbers[i:i + max_length]))\n    return result"}
{"task_id": "HumanEval/10", "completion": "    n = len(string)\n    if n < 2:\n        return string\n    for i in range(n - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    res = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            res += '1'\n        else:\n            res += '0'\n    return res"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    longest_string = max(strings, key=len)\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    n = len(string)\n    prefixes = []\n    for i in range(n):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = music_string.count('o') * 4 + music_string.count('o|') * 2 + music_string.count('.|')\n    return [beats] * len(music_string.split())"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    numbers_list = numbers.split()\n    numbers_list.sort()\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n**0.5) + 1, 6):\n        if n % i == 0 or n %(i + 2) == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    # Check if xs has even number of coefficients\n    if len(xs) % 2 != 0:\n        return \"Coefficients list should have an even number of coefficients\"\n    \n    # Find all possible x points\n    x_points = [i/10 for i in range(-100, 101)]\n    zero_points = [x for x in x_points if poly(xs, x) == 0]\n    \n    # Return the zero point with largest non zero coefficient\n    return max(zero_points, key=lambda x: xs[x_points.index(x)])"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l' = [0]*n\n    for i in range(n):\n        if i % 3 != 0:\n            l'[i] = l[i]\n    for i in range(n):\n        if i % 3 == 0:\n            l'[i] = sorted(l[i])[0]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    res = []\n    for el in l:\n        if el not in res:\n            res.append(el)\n    return res"}
{"task_id": "HumanEval/35", "completion": "    if len(l) == 0:\n        return None\n    max_elem = l[0]\n    for elem in l:\n        max_elem = max(max_elem, elem)\n    return max_elem"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count('7') > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l = list(l)\n    l[0::2] = sorted(l[0::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of 3 characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # cycle elements in each group. Unless group has fewer than 3 elements.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 2, 3\n    count = 0\n    while count < n:\n        if is_prime(b):\n            count += 1\n            yield b\n        a, b = b, a + b\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l)-2):\n        left, right = i+1, len(l)-1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x < 0:\n        return '-' + change_base(-x, base)\n    if x < base:\n        return str(x)\n    return change_base(x // base, base) + str(x % base)"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    a, b, c, d = 0, 0, 1, 2\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text.casefold() == text[::-1].casefold()"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, p-2, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character back by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            if stack.pop() != \"<\":\n                return False\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    return list(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i== 0:\n            n = n // i\n    if n > 2:\n        return n\n    return 1"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif not stack:\n            return False\n        else:\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        return [xs[i] * i for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        c = a + b + a + b\n        a, b = b, c\n    return b"}
{"task_id": "HumanEval/64", "completion": "    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    a = n.split(\"apples \")\n    o = n.split(\"oranges \")\n    total_apples = a[1]\n    total_oranges = o[1]\n    return n - int(total_apples) - int(total_oranges)"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return [0, 0]\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    ans = -1\n    for num, count in freq.items():\n        if count >= num:\n            ans = max(ans, num)\n    return ans"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    return [lst.pop(0)] + strange_sort_list(sorted(lst, reverse=True)) + [lst.pop(-1)]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    return sum(q) <= w and q == q[::-1]"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(i, a):\n                if a % j == 0:\n                    for k in range(j, a):\n                        if a % k == 0:\n                            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x % n != 0:\n        return False\n    temp = x\n    count = 0\n    while temp % n == 0:\n        temp /= n\n        count += 1\n    if count != 1:\n        return False\n    return True"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return True\n    if a == 0:\n        return True\n    return (a ** (1/3)) == int(a ** (1/3))"}
{"task_id": "HumanEval/78", "completion": "    key = {'A': 11, 'B': 12, 'C': 13, 'D': 14, 'E': 15, 'F': 16}\n    count = 0\n    for char in num:\n        if char.isdigit():\n            count += 1\n        else:\n            count += key.get(char, 0)\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    grade_map = {\n        'A+': 4.0,\n        'A': 4.0,\n        'A-': 3.7,\n        'B+': 3.3,\n        'B': 3.0,\n        'B-': 2.7,\n        'C+': 2.3,\n        'C': 2.0,\n        'C-': 1.7,\n        'D+': 1.3,\n        'D': 1.0,\n        'D-': 0.7,\n        'F': 0.0\n    }\n    \n    grades_sorted = sorted(grades, reverse=True)\n    result = []\n    \n    for grade in grades_sorted:\n        letter_grade = 'F'\n        for key in grade_map:\n            if grade_map[key] <= grade:\n                letter_grade = key\n                break\n        result.append(letter_grade)\n        \n    return result"}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return n * starts_one_ends(n-1)"}
{"task_id": "HumanEval/84", "completion": "    sum_of_digits = 0\n    while N:\n        sum_of_digits += N % 2\n        N //= 2\n    return bin(sum_of_digits)[2:]"}
{"task_id": "HumanEval/85", "completion": "    ans = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            ans += lst[i]\n    return ans"}
{"task_id": "HumanEval/86", "completion": "    def anti_shuffle_word(word):\n        return ''.join(sorted(word))\n    \n    words = s.split()\n    words = [anti_shuffle_word(word) for word in words]\n    result = ' '.join(words)\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            result.append((i, lst[i].index(x)))\n    result.sort()\n    result.sort(key=lambda x: (x[1], x[0]))\n    return result"}
{"task_id": "HumanEval/88", "completion": "    return sorted(array) if (array[0] + array[-1]) % 2 == 0 else sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted_str = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = (2 * (alphabet.index(char) + 1)) % 26\n            new_char = alphabet[(alphabet.index(char) + shift) % 26]\n            encrypted_str += new_char\n        else:\n            encrypted_str += char\n    return encrypted_str"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for i in range(len(S)):\n        if S[i:].startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    return (x + y == z) or (x + z == y) or (y + z == x)"}
{"task_id": "HumanEval/93", "completion": "    message = message.lower()\n    vowels = \"aeiou\"\n    result = \"\"\n    for char in message:\n        if char in vowels:\n            result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            result += char.swapcase()\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        return sum(int(digit) for digit in str(n))\n\n    max_prime = float('-inf')\n    for num in lst:\n        if isPrime(num) and num > max_prime:\n            max_prime = num\n    return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    return all(isinstance(key, str) and key.islower() for key in dict.keys()) or all(isinstance(key, str) and key.isupper() for key in dict.keys())"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return int(str(a)[-1]) * int(str(b)[-1])"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == int(num):\n        return int(num)\n    else:\n        return int(num + 0.5) if num > 0 else int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    if n % 2 == 0:\n        pile.append(n)\n    else:\n        pile.append(n)\n        pile.append(n+2)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    start = max(x, y) // 2 * 2\n    end = start + 2\n    return start if start <= y and start >= x else -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    return bin(round(avg))"}
{"task_id": "HumanEval/104", "completion": "    res = set()\n    for i in x:\n        if all(int(digit)%2 != 0 for digit in str(i)):\n            res.add(i)\n    return sorted(res)"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef by_digit(arr):\n    return arr\n\ndef is_between(arr, a, b):\n    return a <= arr <= b\n\ndef replace_with_name(arr):\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n\ndef sortAndReplace(arr):\n    n = len(arr)\n    for i in range(n):\n        if 1 <= arr[i] <= 9:\n            arr[i] = replace_with_name(arr[i])\n    arr.sort()\n    return arr[::-1]"}
{"task_id": "HumanEval/106", "completion": "    ans = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            ans.append(factorial(i))\n        else:\n            ans.append(sum(range(1, i + 1)))\n    return ans\n\ndef factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact"}
{"task_id": "HumanEval/107", "completion": "    def isPalindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if isPalindrome(i) and i % 2 == 0:\n            even_count += 1\n        elif isPalindrome(i) and i % 2 != 0:\n            odd_count += 1\n    return even_count, odd_count"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(x) for x in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    \n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        if arr[i] != i:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    if len(lst1) != len(lst2):\n        return \"NO\"\n    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    if even_count == 0:\n        return \"NO\"\n    even_lst1 = [num for num in lst1 if num % 2 == 0]\n    if len(even_lst1) < even_count:\n        return \"NO\"\n    odd_count = len(lst1) - even_count\n    if odd_count < len(lst2) - even_count:\n        return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    words = test.split()\n    for word in words:\n        for char in word:\n            if char in count:\n                count[char] += 1\n            else:\n                count[char] = 1\n    max_count = max(count.values())\n    most_repetition = [key for key, value in count.items() if value == max_count]\n    return {key: value for key, value in count.items() if value == max_count}"}
{"task_id": "HumanEval/112", "completion": "    s_list = list(s)\n    for i in s_list:\n        if i in c:\n            s_list.remove(i)\n    reverse_str = s_list[::-1]\n    return (\"\".join(reverse_str), reverse_str==reverse_str[::-1])"}
{"task_id": "HumanEval/113", "completion": "    return [f\"the number of odd elements {len([x for x in s if int(x)%2!=0])} in the string {s} of the input.\" for s in lst]"}
{"task_id": "HumanEval/114", "completion": "    if not nums:\n        return 0\n    current_sum = nums[0]\n    min_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    m = len(grid)\n    n = len(grid[0])\n    max_height = [0] * n\n    for i in range(m):\n        for j in range(n):\n            max_height[j] = max(max_height[j], grid[i][j])\n    \n    ans = 0\n    for j in range(n):\n        for i in range(m - 1, -1, -1):\n            if max_height[j] >= grid[i][j]:\n                ans += max(0, max_height[j] - grid[i][j])\n    \n    return ans"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels:\n            for j in range(i - 1, -1, -1):\n                if word[j] in vowels:\n                    return word[j]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for p in s:\n            if p == '(':\n                stack.append(p)\n            else:\n                if not stack or stack.pop() != '(':\n                    return \"No\"\n    return \"Yes\" if not stack else \"No\""}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    arr.sort(key = lambda x: x // 10)\n    i, j = 0, len(arr) - 1\n    ans = 0\n    while i <= j:\n        if arr[i] <= 9:\n            ans += arr[i]\n            i += 1\n        elif j - i < k:\n            ans += arr[i]\n            i += 1\n            j -= 1\n        else:\n            break\n    return ans"}
{"task_id": "HumanEval/123", "completion": "    sequence = []\n    while n != 1:\n        sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    sequence.append(1)\n    return [num for num in sequence if num % 2 != 0]"}
{"task_id": "HumanEval/124", "completion": "    import re\n    pattern = \"^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|[12][0-9]|30|31)-[0-9]{4}$\"\n    if re.match(pattern, date):\n        month, day, year = date.split('-')\n        if month.isdigit() and month.isalpha():\n            month = int(month)\n        if day.isdigit() and day.isalpha():\n            day = int(day)\n        if year.isdigit() and year.isalpha():\n            year = int(year)\n        if month > 12 or month < 1 or day > 31 or day < 1 or month == 2 and day > 29 or month == 4 or month == 6 or month == 9 or month == 11:\n            return False\n        return True\n    return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words if ' ' in txt else txt.split(',')"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersect_length = max(0, end - start + 1)\n    if intersect_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersect_length ** 0.5) + 1):\n        if intersect_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    total = 1\n    sign_sum = 0\n    for num in arr:\n        if num == 0:\n            continue\n        if num < 0:\n            total *= -1\n        else:\n            total *= 1\n        sign_sum += int(num < 0)\n    return abs(total) * sign_sum"}
{"task_id": "HumanEval/129", "completion": "    row = len(grid)\n    col = len(grid[0])\n    dp = [[float('inf')] * col for _ in range(row)]\n    dp[0][0] = 0\n    for i in range(row):\n        for j in range(col):\n            for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                x, y = i + dx, j + dy\n                if 0 <= x < row and 0 <= y < col:\n                    dp[x][y] = min(dp[x][y], dp[i][j] + abs(grid[i][j] - grid[x][y]))\n    res = []\n    x, y = row - 1, col - 1\n    while x >= 0 and y >= 0:\n        res.append(grid[x][y])\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            x, y = x + dx, y + dy\n            if x >= 0 and y >= 0 and dp[x][y] + abs(grid[x][y] - grid[x][y]) == k:\n                break\n        x, y = x - 1, y - 1\n    return res[::-1]"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return tri(n // 2) + [tri(n // 2)[-1] + tri(n // 2)[-2] + 1]\n    else:\n        return tri(n - 1) + [tri(n - 2) + tri(n - 3) + 1]"}
{"task_id": "HumanEval/131", "completion": "    result = 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            result *= digit\n        n //= 10\n    return result"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == ']':\n            if stack and stack[-1] == '[':\n                return True\n            else:\n                stack.pop()\n        else:\n            stack.append(char)\n    return False"}
{"task_id": "HumanEval/133", "completion": "    lst = [int(num) for num in lst]\n    return sum([x*x for x in lst])"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    if len(txt) == 1:\n        return txt.isalpha()\n    last_char = txt[-1]\n    if last_char.isalpha():\n        last_char_word_boundary = ' '\n        if last_char.isspace():\n            return False\n        if txt.split()[-1].endswith(last_char_word_boundary):\n            return False\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_index = -1\n    \n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    \n    return max_index"}
{"task_id": "HumanEval/136", "completion": "    neg = None\n    pos = None\n    for num in lst:\n        if num < 0:\n            neg = num\n        elif num > 0:\n            pos = num\n    if neg is None:\n        return (None, pos)\n    elif pos is None:\n        return (neg, None)\n    else:\n        return (neg, pos)"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == str and type(b) == str:\n        return max(a, b)\n    elif type(a) == str and type(b) == int or type(a) == int and type(b) == str:\n        if a.count(',') > 0:\n            a = a.replace(',', '')\n            if '.' in a:\n                a = float(a)\n        else:\n            a = int(a)\n        if b.count(',') > 0:\n            b = b.replace(',', '')\n            if '.' in b:\n                b = float(b)\n        else:\n            b = int(b)\n        if type(a) == float and type(b) == int or type(a) == int and type(b) == float:\n            return max(a, b)\n        else:\n            return a\n    elif type(a) == str and type(b) == float or type(a) == float and type(b) == str:\n        if a.count(',') > 0:\n            a = a.replace(',', '')\n            if '.' in a:\n                a = float(a)\n        else:\n            a = int(a)\n        if b.count(',') > 0:\n            b = b.replace(',', '')\n            if '.' in b:\n                b = float(b)\n        else:\n            b = int(b)\n        if type(a) == float and type(b) == int or type(a) == int and type(b) == float:\n            return max(a, b)\n        else:\n            return a\n    else:\n        return a if a > b else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    else:\n        return (n / 4) % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        return fact"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char.isspace():\n            if result[-1].isspace() and result[-2].isspace():\n                result += \"-\"\n                continue\n            result += \"_\"\n        result += char\n    return result"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    dot_pos = file_name.index('.')\n    before_dot = file_name[:dot_pos]\n    after_dot = file_name[dot_pos+1:]\n    if len(before_dot) <= 3 and before_dot.isalpha() and after_dot in ['txt', 'exe', 'dll']:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i, num in enumerate(lst):\n        if (i % 3 == 0) and (i % 4 != 0):\n            num = num**2\n        elif (i % 4 == 0) and (i % 3 == 0):\n            num = num**3\n        else:\n            num = num\n        result += num\n    return result"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return \" \".join(result)"}
{"task_id": "HumanEval/144", "completion": "    x = int(x)\n    n = int(n)\n    result = x * n\n    return result % 1 == 0"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    freq = [0, 0, 0]\n    for i in range(1, n + 1):\n        freq[i % 3] += 1\n    ans = 0\n    ans += (freq[0] * (freq[0] - 1)) // 2\n    ans += freq[1] * freq[2]\n    ans += (freq[1] * (freq[1] - 1)) // 2\n    ans += (freq[2] * (freq[2] - 1)) // 2\n    ans += (freq[0] * (freq[0] - 1) * (freq[0] - 2)) // 6\n    ans += (freq[1] * (freq[1] - 1) * (freq[1] - 2)) // 6\n    ans += (freq[2] * (freq[2] - 1) * (freq[2] - 2)) // 6\n    return ans"}
{"task_id": "HumanEval/148", "completion": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    startIndex = planets.index(planet1)\n    endIndex = planets.index(planet2)\n    \n    if startIndex > endIndex:\n        startIndex, endIndex = endIndex, startIndex\n    \n    result = tuple(planets[startIndex+1:endIndex])\n    return result"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return \"Invalid input\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num * num\n    return total * 2"}
{"task_id": "HumanEval/152", "completion": "    return [abs(game[i]-guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = None\n    strongest_strength = float('-inf')\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = class_name + '.' + extension\n    return strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if len(b) > len(a):\n        return False\n    return (a.find(b) != -1) or (a.find(b[-1] + b[:-1]) != -1)"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_map = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n    result = ''\n    for value, numeral in sorted(roman_map.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    if a > b and a > c:\n        max_side = a\n    elif b > a and b > c:\n        max_side = b\n    else:\n        max_side = c\n    \n    other_sides = [x for x in [a, b, c] if x != max_side]\n    \n    return (other_sides[0]**2 + other_sides[1]**2 == max_side**2)"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total = number + min(need, remaining)\n    left = max(0, remaining - need)\n    return [total, left]"}
{"task_id": "HumanEval/160", "completion": "    # Write your code here\n    pass"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                groups.append(''.join(stack))\n                stack.clear()\n            else:\n                stack.pop()\n    if len(stack) > 0:\n        groups.append(''.join(stack))\n    return groups"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op < 0:\n            return True\n        balance += op\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(absolute_deviations)"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    depth = 0\n    result = []\n    for paren in paren_string.split():\n        if paren == '(':\n            stack.append(depth)\n            depth += 1\n        else:\n            if not stack:\n                stack.append(depth)\n                depth += 1\n            else:\n                stack.pop()\n                max_depth = max(max_depth, depth)\n    for i in range(len(stack)):\n        result.append(max_depth - stack[i] + 1)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "    if len(numbers) == 0:\n        return (0, 1)\n    product = 1\n    total_sum = 0\n    for num in numbers:\n        product *= num\n        total_sum += num\n    return (total_sum, product)"}
{"task_id": "HumanEval/9", "completion": "    max_values = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        max_values.append(max_so_far)\n    return max_values"}
{"task_id": "HumanEval/10", "completion": "    for i in range(len(string), 0, -1):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            return prefix + suffix[::-1]"}
{"task_id": "HumanEval/11", "completion": "    xor_result = int(a, 2) ^ int(b, 2)\n    return bin(xor_result)[2:]"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    if not string:\n        return []\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(map(str, range(n+1)))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    beats_per_note = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats_per_note[note] for note in music_string]"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = [num_dict[word] for word in numbers.split()]\n    nums.sort()\n    return ' '.join(str(num) for num in nums)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    max_num = max(numbers)\n    min_num = min(numbers)\n    scale_factor = max_num - min_num\n    return [(num - min_num) / scale_factor for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    result = [val for val in values if isinstance(val, int)]\n    return result"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    unique_numbers = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            unique_numbers.append(num)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    result = \"\"\n    for s in strings:\n        result += s\n    return result"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [i for i in l if i > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2 == 0 and xs[-1] != 0:\n        if poly(xs, xs[-1] / 2) == 0:\n            return xs[-1] / 2\n    return -1"}
{"task_id": "HumanEval/33", "completion": "    return [l[i] if i % 3 != 0 else sorted([l[i] for i in range(len(l)) if i % 3 == 0])[0] for i in range(len(l))]"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_num = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_num:\n            max_num = l[i]\n    return max_num"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    return [l[i] if i % 2 == 1 else sorted(l[i:i + 2]) for i in range(len(l))]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    a, b = 1, 1\n    count = 0\n    while True:\n        if is_prime(a) and a == b:\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l)-2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    for i in range(len(l)):\n        l[i] += 1\n    return l"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n\t\treturn \"0\"\n\tres = \"\"\n\twhile x > 0:\n\t\tres = str(x % base) + res\n\t\tx //= base\n\treturn res"}
{"task_id": "HumanEval/45", "completion": "    return (1/2) * a * h"}
{"task_id": "HumanEval/46", "completion": "    fib = [0, 0, 2, 0]\n    a, b, c = fib[:4]\n    for _ in range(4, n+1):\n        a, b, c = b, c, a + b + c + c\n        fib.append(a)\n    return fib[n]"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    if n == 0:\n        return None\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text.lower() == text[::-1].lower()"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, p-2, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by -5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    while (y != 0):\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append('>')\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    if n == 0:\n        return 0\n    return n + sum_to_n(n - 1)"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    return [xs[i] * i for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    a, b, c = 0, 0, 1\n\tfor _ in range(n):\n\t\ta, b, c = b, c, (b + c) % 10\n\treturn int(str(c))"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/67", "completion": "    # Split the string by comma to get the number of apples and oranges\n    fruits = s.split(',')\n    apples = fruits[0].strip()\n    oranges = fruits[1].strip()\n    # Get the total number of fruits in the basket\n    total_fruits = int(apples) + int(oranges)\n    # Get the number of mangoes\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    min_val = float('inf')\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            index = i\n    return [min_val, index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    return sorted(lst, key=lambda x: (-x, x))"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q)<=w"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total1 = sum(len(word) for word in lst1)\n    total2 = sum(len(word) for word in lst2)\n    return lst1 if total1 < total2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, i):\n                if i % j == 0:\n                    for k in range(2, j):\n                        if j % k == 0 and i // j // k == 3:\n                            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if n == 1:\n        return x == 1\n    \n    if x == 1:\n        return True\n    \n    if x < n:\n        return False\n    \n    return is_simple_power(x//n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    if a == 0:\n        return True\n    root = int(a ** (1 / 3))\n    return root * root * root == a"}
{"task_id": "HumanEval/78", "completion": "    hex_num = num.replace('0', '').replace('1', '')\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for char in hex_num:\n        if char in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A')\n        elif grade >= 3.7:\n            letter_grades.append('A-')\n        elif grade >= 3.3:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    return 10**(n-1) + 9**(n-1)"}
{"task_id": "HumanEval/84", "completion": "    sum_of_digits = 0\n    while N > 0:\n        sum_of_digits += N % 2\n        N = N // 2\n    return bin(sum_of_digits).replace(\"0b\", \"\")"}
{"task_id": "HumanEval/85", "completion": "    odd_indices_elements = [num for i, num in enumerate(lst) if i % 2 != 0 and num % 2 == 0]\n    return sum(odd_indices_elements)"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    new_words = [''.join(sorted(word)) for word in words]\n    result = ' '.join(new_words)\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "    n = len(array)\n    total_sum = array[0] + array[n-1]\n    if total_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    encrypted_str = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = ord(char) + 2 * 2\n            if char.islower():\n                if shift > ord('z'):\n                    shift -= 26\n                encrypted_str += chr(shift)\n            else:\n                if shift > ord('Z'):\n                    shift -= 26\n                encrypted_str += chr(shift)\n        else:\n            encrypted_str += char\n    return encrypted_str"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"}
{"task_id": "HumanEval/91", "completion": "    boredoms = 0\n    words = S.split()\n    for word in words:\n        if word.lower().startswith(\"i\"):\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "    if x+y == z or x+z == y or y+z == x:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += chr(ord(char) - 2)\n        elif char.lower() in vowels:\n            encoded_message += vowels[(vowels.index(char.lower()) + 2) % len(vowels)]\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    max_prime = float('-inf')\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return sum_of_digits(max_prime)"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    first_key = list(dict.keys())[0]\n    if first_key.islower() or first_key.isupper():\n        for key in dict.keys():\n            if not (key.islower() or key.isupper()):\n                return False\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "    prime_numbers = []\n    i = 2\n    while len(prime_numbers) < n:\n        if is_prime(i):\n            prime_numbers.append(i)\n        i += 1\n    return prime_numbers\n\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/97", "completion": "    product = a % 10 * b % 10\n    return product"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    if \".\" not in value:\n        return int(value)\n    else:\n        n = int(value)\n        return n if n >= 0 else -n"}
{"task_id": "HumanEval/100", "completion": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [2 * i + 1 for i in range(1, n)]\n    else:\n        return [2 * i + 1 for i in range(1, n + 1)]"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    return bin(rounded_avg)"}
{"task_id": "HumanEval/104", "completion": "    return sorted(set(i for i in x if all(int(j) % 2 != 0 for j in str(i))))"}
{"task_id": "HumanEval/105", "completion": "    arr.sort(key=lambda x: (len(str(x)), x))\n    return arr\n\n\ndef replace_with_names(arr):\n    numbers = [str(x) for x in arr if 1 <= x <= 9]\n    numbers.sort()\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for num in numbers:\n        result.append(names[int(num) - 1])\n    return result\n\n\ndef reverse_and_replace(arr):\n    arr = by_length(arr)\n    arr = replace_with_names(arr)\n    return arr[::-1]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result\n\ndef sum_of_numbers(n):\n    return sum(range(1, n+1))\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"task_id": "HumanEval/107", "completion": "    even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if int(str(i)[-1]) % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    return even_palindromes, odd_palindromes"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            if abs(num) % 10 == 0:\n                count += 1\n        else:\n            if sum(int(digit) for digit in str(num)) > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i+1) % n]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    if even_count != odd_count:\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            if lst2[i] % 2 == 0:\n                return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    hist = {}\n    for char in test.split():\n        if char in hist:\n            hist[char] += 1\n        else:\n            hist[char] = 1\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "    s = s.replace(c,'')\n    return s, s[::-1]==s"}
{"task_id": "HumanEval/113", "completion": "    def count_odd_digits(s: str) -> int:\n        return sum(1 for digit in s if int(digit) % 2 != 0)\n    \n    result = []\n    for s in lst:\n        count = count_odd_digits(s)\n        result.append(f\"the number of odd elements {count}n the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    def max_fill_recursive(x, y, capacity):\n        if (x, y) in memo:\n            return memo[(x, y)]\n        if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == 1 or grid[x][y] == 2:\n            return 0\n        if (x, y) == (m - 1, n - 1):\n            return 1\n        if grid[x][y] == 0:\n            return 0\n        \n        max_fill_count = 0\n        for dx, dy in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n            if dx != 0 or dy != 0:\n                new_grid = [row[:] for row in grid]\n                new_grid[x][y] = 0\n                if (x + dx) < m and (y + dy) < n:\n                    new_grid[x + dx][y + dy] = 2\n                max_fill_count = max(max_fill_count, max_fill_recursive(x + dx, y + dy, capacity) + 1)\n        memo[(x, y)] = max_fill_count\n        return max_fill_count\n    \n    m, n = len(grid), len(grid[0])\n    memo = {}\n    return max_fill_recursive(0, 0, capacity)"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    def is_consonant(c):\n        return c.isalpha() and c.lower() not in \"aeiou\"\n    \n    words = s.split()\n    return [word for word in words if sum(is_consonant(c) for c in word) == n]"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    n = len(word)\n    i = n-1\n    while i>=0:\n        if word[i] in vowels:\n            return word[i]\n        i-=1\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    if not lst:\n        return \"Yes\"\n    stack = []\n    for s in lst:\n        if s.count('(') > s.count(')'):\n            stack.append('(')\n        else:\n            stack.append(')')\n    return 'Yes' if stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum([x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 != 0])"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(min(k, len(arr))):\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return [x for x in sequence if x % 2 != 0]"}
{"task_id": "HumanEval/124", "completion": "    try:\n        date_parts = date.split('-')\n        month = int(date_parts[0])\n        day = int(date_parts[1])\n        year = int(date_parts[2])\n        \n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month == 2:\n            if day < 1 or day > 29:\n                return False\n        if day > 31:\n            return False\n        \n        return True\n    except:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words if ' ' in txt else txt.split(',')"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    if not interval1 or not interval2:\n        return \"NO\"\n    \n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start >= end:\n        return \"NO\"\n    \n    length = end - start\n    if length < 2:\n        return \"NO\"\n    \n    for i in range(2, length//2 + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    result = 1\n    magnitude_sum = 0\n    for num in arr:\n        result *= 1 if num >= 0 else -1 if num < 0 else 0\n        magnitude_sum += abs(num)\n    return result * magnitude_sum"}
{"task_id": "HumanEval/129", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    def dfs(x, y, path):\n        if k == 0:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in path:\n                newPath = dfs(nx, ny, path + [(nx, ny)])\n                if newPath and len(newPath) <= k:\n                    return newPath\n        return None\n    \n    return dfs(0, 0, [(0, 0)])[:k]"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        a, b, c, d, e = 1, 3, 2, 8, 16\n        for i in range(3, n + 1):\n            a, b, c, d, e = b, c, d, e, a + b + c + d + e\n        return [a, b, c, d, e]"}
{"task_id": "HumanEval/131", "completion": "    if n == 0:\n        return 0\n    res = 1\n    while n != 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            res = res * digit\n        n = n // 10\n    return res"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    res = 0\n    for num in lst:\n        res += int(num * num)\n    return res"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    last_chars = [word[-1] for word in words]\n    last_chars.sort()\n    for char in last_chars:\n        if char.isalpha() and (not last_chars.index(char) == last_chars.count(char)-1):\n            return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "    neg_ints = [x for x in lst if x < 0]\n    pos_ints = [x for x in lst if x > 0]\n    \n    if not neg_ints or not pos_ints:\n        return None, None\n    \n    return max(neg_ints), min(pos_ints)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, (int, float, str)):\n        if isinstance(a, str):\n            a = float(a.replace(',', '').replace('.', ''))\n        if isinstance(b, (int, float, str)):\n            if isinstance(b, str):\n                b = float(b.replace(',', '').replace('.', ''))\n            return max(a, b)\n    return None"}
{"task_id": "HumanEval/138", "completion": "    if n < 8:\n        return False\n    for i in range(2, n // 2 + 1, 2):\n        if (n - i) % 2 == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 0 or n == 1:\n        return 1\n    fact = 1\n    for i in range(2, n + 1):\n        fact *= i\n    return fact"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\" \", \"_\")\n    words = text.split()\n    new_text = \"\"\n    for word in words:\n        if \"  \" in word:\n            new_word = word.replace(\"  \", \"-\")\n            new_text += new_word + \"_\"\n        else:\n            new_text += word + \"_\"\n    return new_text.strip(\"_\")"}
{"task_id": "HumanEval/141", "completion": "    if '.' in file_name:\n        parts = file_name.split('.')\n        if len(parts) != 2:\n            return \"Invalid file name\"\n        before_dot = parts[0]\n        after_dot = parts[1]\n        if len(before_dot) > 3 or len(after_dot) > 3:\n            return \"Invalid file name\"\n        if before_dot == '' or after_dot == '':\n            return \"Invalid file name\"\n        if not before_dot[0].isalpha() or not after_dot in ['txt', 'exe', 'dll']:\n            return \"Invalid file name\"\n    return \"No\""}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_numerator = int(x.split('/')[0])\n    n_denominator = int(n.split('/')[1])\n    return x_numerator / n_denominator == int(x_numerator / n_denominator)"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i + j * j - i + j + k) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 < index2:\n            return tuple(planets[index1+1:index2])\n        else:\n            return tuple(planets[index2+1:index1])\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))\n\n\ndef list_sort(lst):\n    return sorted_list_sum(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return y\n    else:\n        return x"}
{"task_id": "HumanEval/151", "completion": "    if not lst:\n        return 0\n    total = 0\n    for num in lst:\n        if num >= 0 and isinstance(num, int):\n            if num % 2 != 0:\n                total += num ** 2\n    return total * 2"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = ''\n    strongest_strength = float('-inf')\n    for ext in extensions:\n        strength = ord(ext[0]) - ord(ext[-1])\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = class_name + '.' + ext\n    return strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if b in a:\n        return True\n    n = len(a)\n    m = len(b)\n    if n < m:\n        return False\n    for i in range(n - m + 1):\n        if a[i:i + m] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    if num == 0:\n        return (0, 0)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    if not 1 <= number <= 1000:\n        raise ValueError(\"Number must be between 1 and 1000\")\n    \n    roman_numerals = [\n        (1000, 'M'),\n        (900, 'CM'),\n        (500, 'D'),\n        (400, 'CD'),\n        (100, 'C'),\n        (90, 'XC'),\n        (50, 'L'),\n        (40, 'XL'),\n        (10, 'X'),\n        (9, 'IX'),\n        (5, 'V'),\n        (4, 'IV'),\n        (1, 'I')\n    ]\n    \n    result = ''\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "    sides = sorted([a, b, c])\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars and word < max_word:\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + remaining - need, remaining - need]"}
{"task_id": "HumanEval/160", "completion": "    operand = list(map(int, operand))\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result //= operand[i+1]\n        elif operator[i] == '%':\n            result %= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    res = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                res += char.upper()\n            else:\n                res += char.lower()\n        else:\n            res += char\n    return res[::-1]"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash"}
{"task_id": "HumanEval/163", "completion": "    if a > b:\n        a, b = b, a\n    even_digits = []\n    for num in range(a, b+1):\n        if int(str(num)[-1]) % 2 == 0:\n            even_digits.append(num)\n    return sorted(even_digits)"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    separated_groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            subgroup = stack.pop()\n            separated_groups.append(subgroup)\n    return separated_groups"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op < 0:\n            return True\n        balance += op\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    res = []\n    for i in range(len(numbers)):\n        res.append(numbers[i])\n        if i < len(numbers) - 1:\n            res.append(delimeter)\n    return res"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(0)\n        else:\n            if stack:\n                stack[-1] += 1\n            max_depth = max(max_depth, stack[-1])\n    return max_depth"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda x, y: x*y, numbers, 1))"}
{"task_id": "HumanEval/9", "completion": "    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n    return max_list"}
{"task_id": "HumanEval/10", "completion": "    if len(string) == 0:\n        return string\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    count = 0\n    for char in music_string:\n        if char == 'o':\n            count = 4\n        elif char == 'o|':\n            count = 2\n        elif char == '.':\n            count = 1\n        beats.append(count)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    choices = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: choices.index(x))\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_elements = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_elements = (numbers[i], numbers[i + 1])\n    return closest_elements"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i:\n            i += 1\n        factors.append(i)\n        n //= i\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Find and return zero point of polynomial.\n    It returns only the first zero point.\n    \"\"\"\n    n = len(xs)\n    for i in range(n):\n        if xs[i] != 0 and xs[i] != -math.inf:\n            return i / xs[i]\n    return -1"}
{"task_id": "HumanEval/33", "completion": "    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = sorted(l[i])\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0):\n            if str(i).count('7') > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    for i in range(1, len(l), 2):\n        l[i] = l[i]\n    for i in range(0, len(l), 2):\n        l[i] = sorted(l[i])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    count = 0\n    while True:\n        if is_prime(b) and b == n:\n            return b\n        a, b = b, a+b"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        l_index = i + 1\n        r_index = len(l) - 1\n        while l_index < r_index:\n            sum = l[i] + l[l_index] + l[r_index]\n            if sum < 0:\n                l_index += 1\n            elif sum > 0:\n                r_index -= 1\n            else:\n                return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    if n % 2 == 0:\n        return n // 2\n    else:\n        return (n // 2) + 1"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    if len(l) < 2:\n        return False\n    else:\n        seen = set()\n        for num in l:\n            if -num in seen:\n                return True\n            seen.add(num)\n        return False"}
{"task_id": "HumanEval/44", "completion": "    if x < base:\n        return str(x)\n    return change_base(x // base, base) + str(x % base)"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    a = [0] * (n + 1)\n    b = [0] * (n + 1)\n    c = [0] * (n + 1)\n    d = [0] * (n + 1)\n    a[0] = 0\n    b[0] = 0\n    c[0] = 2\n    d[0] = 0\n    for i in range(1, n + 1):\n        a[i] = a[i - 1] + b[i - 1] + c[i - 1] + d[i - 1]\n        b[i] = a[i - 1]\n        c[i] = b[i - 1]\n        d[i] = c[i - 1]\n    return a[n]"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    return ''.join(c for c in text if c.lower() not in 'aeiou')"}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) <= 1:\n        return True\n    if l[0] > l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i+1]:\n                return False\n    else:\n        for i in range(1, len(l) - 1):\n            if l[i] < l[i+1]:\n                return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "    l1_set = set(l1)\n    l2_set = set(l2)\n    return sorted(list(l1_set.intersection(l2_set)))"}
{"task_id": "HumanEval/59", "completion": "    if n < 2:\n        raise ValueError(\"n must be greater than or equal to 2\")\n    factor = 2\n    while factor * factor <= n:\n        if n % factor:\n            factor += 1\n        else:\n            n //= factor\n    return n"}
{"task_id": "HumanEval/60", "completion": "    result = 0\n    for i in range(1, n + 1):\n        result += i\n    return result"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n <= 1:\n        return [0]\n    else:\n        return [i * xs[i] for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "    return sum(1 for c in s if c in 'aeiouAEIOU')"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    upper_sum = 0\n    for char in s:\n        if char.isupper():\n            upper_sum += ord(char)\n    return upper_sum"}
{"task_id": "HumanEval/67", "completion": "    fruits = s.split(' and ')\n    apples = int(fruits[0].split()[0])\n    oranges = int(fruits[1].split()[0])\n    total_fruits = int(fruits[0].split()[1]) + int(fruits[1].split()[1])\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    min_val = float('inf')\n    min_idx = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_idx = i\n    return [min_val, min_idx]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    return sorted(lst[:1]) + [lst[-1]] + strange_sort_list(lst[1:-1])"}
{"task_id": "HumanEval/71", "completion": "    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    return is_balanced(q) and sum(q) <= w\n\ndef is_balanced(lst):\n    return lst == lst[::-1]"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total1_chars = sum(len(word) for word in lst1)\n    total2_chars = sum(len(word) for word in lst2)\n    return lst1 if total1_chars < total2_chars else lst2"}
{"task_id": "HumanEval/75", "completion": "    if a == 1:\n        return False\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "    if n == 1:\n        return True\n    if n == 0 or x == 1:\n        return False\n    return x % n == 0 and is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    n = int(a ** (1 / 3))\n    return n * n * n == a"}
{"task_id": "HumanEval/78", "completion": "    prime_count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7']:\n            prime_count += 1\n        elif digit in ['B', 'D']:\n            prime_count += 1\n    return prime_count"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    grades.sort(reverse=True)\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('F')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    return is_prime(len(string))\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    start_ones = 0\n    end_ones = 0\n    for i in range(1, 10):\n        start_ones += str(i).count('1')\n    for i in range(1, 10):\n        end_ones += str(i).count('1')\n    return start_ones - end_ones"}
{"task_id": "HumanEval/84", "completion": "    while (N != 0):\n        N = (N - (N % 10)) // 10\n    return str(N)"}
{"task_id": "HumanEval/85", "completion": "    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    res = []\n    for word in words:\n        res.append(''.join(sorted(word)))\n    return ' '.join(res)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for row in lst:\n        if x in row:\n            result.append((lst.index(row), row.index(x)))\n    return sorted(result)"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return []\n    \n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = ''\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a')) * 2 + 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    second_smallest = float('inf')\n    for num in lst:\n        if num > smallest and num < second_smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    words = S.split()\n    for i in range(len(words)):\n        if words[i].startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) :\n        return (x == y + z or y == x + z or z == x + y)\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    def swap_case(char):\n        if char.islower():\n            return char.upper()\n        else:\n            return char.lower()\n    \n    def replace_vowels(char):\n        if char in 'aeiouAEIOU':\n            return chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return char\n    \n    return ''.join([replace_vowels(swap_case(char)) for char in message])"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    key_case = set(key.isupper() for key in dict.keys())\n    return len(key_case) <= 1"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        if len(primes) == n:\n            break\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return int(str(a)[-1]) * int(str(b)[-1])"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOUaeiou'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    if value.isnumeric():\n        return int(value)\n    else:\n        return round(float(value))"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i)\n        else:\n            pile.append(i + 1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    even_num = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and (even_num == -1 or num > even_num):\n            even_num = num\n    return even_num"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = (n + m) / 2\n    return bin(round(average))"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(num):\n        while num>0:\n            if num%10%2 == 0:\n                return True\n            num = num//10\n        return False\n    \n    unique_nums = []\n    for num in x:\n        if not has_even_digit(num):\n            unique_nums.append(num)\n    unique_nums.sort()\n    return unique_nums"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\n\ndef by_name(arr):\n    return sorted(arr, key=lambda x: (x in \"OneTwoThreeFourFiveSixSevenEightNine\".split()))\n\n\ndef reverse_and_replace(arr):\n    return by_name(arr)[::-1]"}
{"task_id": "HumanEval/106", "completion": "    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = i * fact[i - 1]\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(fact[i])\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n < 2:\n        return True\n    stack = [arr[0]]\n    for i in range(1, n):\n        if arr[i] <= stack[-1]:\n            stack.append(arr[i])\n        else:\n            while stack and arr[i] < stack[-1]:\n                stack.pop()\n            stack.append(arr[i])\n    return len(stack) == n"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    exchange_count = 0\n    for num in lst2:\n        if num % 2 != 0:\n            exchange_count += 1\n    return \"YES\" if even_count <= exchange_count and odd_count <= exchange_count else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    freq = {}\n    maxFreq = 0\n    for char in test:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n        if freq[char] > maxFreq:\n            maxFreq = freq[char]\n    result = {}\n    for char, count in freq.items():\n        if count == maxFreq:\n            result[char] = count\n    return result"}
{"task_id": "HumanEval/112", "completion": "    if any(c in s for c in c):\n        return (s.replace(c, ''), False)\n    else:\n        return (s, True)"}
{"task_id": "HumanEval/113", "completion": "    def countOdd(s: str) -> int:\n        return sum(1 for c in s if int(c) % 2 != 0)\n    return [f\"the number of odd elements {countOdd(s)}\" for s in lst]"}
{"task_id": "HumanEval/114", "completion": "    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    current_sum = nums[0]\n\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    max_water = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                water = math.gcd(i, j)\n                if water > 0:\n                    max_water = max(max_water, water)\n    return max_water"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    selected_words = []\n    for word in words:\n        if count_consonants(word) == n:\n            selected_words.append(word)\n    return selected_words\n\ndef count_consonants(word):\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    count = 0\n    for char in word:\n        if char.lower() in consonants:\n            count += 1\n    return count"}
{"task_id": "HumanEval/118", "completion": "    vowels = set(\"aeiouAEIOU\")\n    last_consonant = -1\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels and i > last_consonant:\n            last_consonant = i\n        elif word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for p in s:\n            if p == '(':\n                stack.append(p)\n            else:\n                if len(stack) == 0 or stack.pop() != '(':\n                    return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "    result = 0\n    for i in range(k):\n        result += arr[i]\n    return result"}
{"task_id": "HumanEval/123", "completion": "    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    return [x for x in collatz_seq if x % 2 != 0]"}
{"task_id": "HumanEval/124", "completion": "    if date:\n\t\tmonth, day, year = map(int, date.split('-'))\n\t\tif (month>12 or month<1) or (day>31 or day<1) or (year<0):\n\t\t\treturn False\n\t\tif month in [4,6,9,11] and day>30:\n\t\t\treturn False\n\t\tif month in [1,3,5,7,8,10,12] and day<1:\n\t\t\treturn False\n\t\tif month==2 and day<1 and day>29:\n\t\t\treturn False\n\t\treturn True\n\treturn False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    else:\n        return [str(ord(c) - ord('a') * (ord(c) - ord('a') % 2)) for c in txt]"}
{"task_id": "HumanEval/126", "completion": "    n = len(lst)\n    for i in range(1, n):\n        if lst[i] < lst[i - 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    left = max(interval1[0], interval2[0])\n    right = min(interval1[1], interval2[1])\n    intersect = right - left\n    if intersect <= 0:\n        return \"NO\"\n    return \"YES\" if isPrime(intersect) else \"NO\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = [1 if num > 0 else -1 if num < 0 else 0 for num in arr]\n    product = 1\n    magnitudes_sum = 0\n    for sign in signs:\n        product *= sign\n        magnitudes_sum += abs(product)\n    return magnitudes_sum"}
{"task_id": "HumanEval/129", "completion": "    if len(grid) < 2 or k < 2 or k > len(grid[0])*len(grid):\n        return []\n    rows, cols = len(grid), len(grid[0])\n    dp = [[[float('inf'), float('inf')] for _ in range(cols)] for _ in range(rows)]\n    dp[0][0][0] = (0, [grid[0][0]])\n    for i in range(1, rows):\n        for j in range(cols):\n            for k in range(1, min(rows-i, cols-j)+1):\n                for x in range(i-k, i):\n                    for y in range(j-k, j):\n                        dp[i][j][k] = min(dp[i][j][k], (dp[x][y][k-1][0] + 1, dp[x][y][k-1][1] + [grid[i][j]]))\n    return dp[rows-1][cols-1][k-1][1]"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        arr = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                arr.append((1 + i // 2) * arr[i - 1])\n            else:\n                arr.append(arr[i - 1] + arr[i - 2] + arr[i - 3])\n        return arr"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while (n):\n        digit = n % 10\n        if (digit % 2 != 0):\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    return sum([int(ceil(i))**2 for i in lst])"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    \n    last_char = txt[-1]\n    return last_char.isalpha() and not last_char.isupper()"}
{"task_id": "HumanEval/135", "completion": "    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "    negatives = []\n    positives = []\n    for num in lst:\n        if num < 0:\n            negatives.append(num)\n        elif num > 0:\n            positives.append(num)\n    if not negatives and not positives:\n        return (None, None)\n    elif not negatives:\n        return (None, min(positives))\n    elif not positives:\n        return (max(negatives), None)\n    else:\n        return (max(negatives), min(positives))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) != type(b):\n        return None\n    if type(a) == str:\n        a = float(a)\n    if type(b) == str:\n        b = float(b)\n    return a if a > b else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n % 4 == 0"}
{"task_id": "HumanEval/139", "completion": "    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/140", "completion": "    res = []\n    count = 0\n    for char in text:\n        if char == ' ':\n            count += 1\n            if count > 2:\n                res.append('-')\n            else:\n                res.append('_')\n        else:\n            res.append(char)\n            count = 0\n    return ''.join(res)"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name.split('.')[0]) <= 3:\n        parts = file_name.split('.')\n        if len(parts) == 2 and parts[0].isalpha() and parts[1] in ['txt', 'exe', 'dll']:\n            return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/142", "completion": "    res = 0\n    for i in range(len(lst)):\n        if (i % 3 == 0) and (i % 4 != 0):\n            res += lst[i] ** 2\n        elif (i % 4 == 0):\n            res += lst[i] ** 3\n    return res"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    x_num, x_den = map(int, x.split(\"/\"))\n    n_num, n_den = map(int, n.split(\"/\"))\n\n    common_divisor = gcd(x_den, n_den)\n\n    x_num *= n_den // common_divisor\n    n_num *= x_den // common_divisor\n\n    return x_num * n_den == int(x_num * n_den)"}
{"task_id": "HumanEval/145", "completion": "    nums.sort(key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [1] * n\n    for i in range(1, n):\n        a[i] = (i * i - i + 1) % 3\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    ans += 1\n    return ans"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        idx1 = planets.index(planet1)\n        idx2 = planets.index(planet2)\n        result = planets[max(idx1, idx2):min(idx1, idx2)+1]\n        return tuple(result)\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "    return sum(sorted(lst, key=lambda x: (len(x), x)))"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return \"n should be greater than 1\"\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    odd_squares_sum = 0\n    for num in lst:\n        if num >= 0 and isinstance(num, int):\n            if num % 2 != 0:\n                odd_squares_sum += num ** 2\n    return 2 * odd_squares_sum"}
{"task_id": "HumanEval/152", "completion": "    return [abs(score-guess[i]) for i,score in enumerate(game)]"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap = sum(1 for ch in extension if ch.isupper())\n        sm = sum(1 for ch in extension if ch.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = class_name + \".\" + extension\n    return strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = -1\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    if eaten <= remaining:\n        return [eaten, remaining - eaten]\n    else:\n        return [eaten, 0]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for op in operator:\n        if op == '+':\n            stack.append(operand.pop(0) + operand.pop(0))\n        elif op == '-':\n            stack.append(operand.pop(0) - operand.pop(0))\n        elif op == '*':\n            stack.append(operand.pop(0) * operand.pop(0))\n        elif op == '/':\n            stack.append(int(operand.pop(0) / operand.pop(0)))\n        elif op == '**':\n            stack.append(operand.pop(0) ** operand.pop(0))\n    return stack.pop(0)"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    return [int(d) for d in str(a) + str(b) if int(d) % 2 == 0 and int(d) >= a and int(d) <= b]"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    paren_stack = []\n    groups = []\n    \n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if paren_stack:\n                paren_stack.pop()\n                if not paren_stack:\n                    groups.append(''.join(paren_stack))\n    \n    return groups"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance -= operation\n        else:\n            balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    nested_levels = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(0)\n        elif char == ')':\n            cur_level = stack.pop()\n            nested_levels.append(cur_level + 1)\n    return nested_levels"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), reduce(lambda x, y: x*y, numbers)"}
{"task_id": "HumanEval/9", "completion": "    rolling_max_list = []\n    max_so_far = float('-inf')\n    for number in numbers:\n        max_so_far = max(max_so_far, number)\n        rolling_max_list.append(max_so_far)\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n    n = len(string)\n    for i in range(n - 1, 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(max(len(a), len(b))):\n        if i < len(a) and i < len(b):\n            result += str(int(a[i]) ^ int(b[i]))\n        elif i < len(a):\n            result += a[i]\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    if not string:\n        return ['']\n    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "    seen = set()\n    for char in string.lower():\n        seen.add(char)\n    return len(seen)"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for char in music_string:\n        if char == 'o':\n            beats.append(4)\n        elif char == 'o|':\n            beats.append(2)\n        elif char == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    i = 0\n    while i <= len(string) - len(substring):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    def compare(x, y):\n        if x + y > y + x:\n            return 1\n        if x + y < y + x:\n            return -1\n        return 0\n    \n    nums = numbers.split()\n    nums.sort(key=lambda x: (int(x), x))\n    return ' '.join(nums)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Find x such that poly(x) = 0.\n    Return x where the polynomial is 0,\n    or return an empty list if there is no solution.\n    \"\"\"\n    for i in range(len(xs) - 1):\n        if xs[i] == 0:\n            if poly(xs, i) == 0:\n                return i\n    return []"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    for i in range(n):\n        if i % 3 == 0:\n            l[i] = l[i]\n    l = l[:n//3] + sorted(l[n//3:])\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if len(l) == 0:\n        return None\n    max_element = l[0]\n    for elem in l:\n        if elem > max_element:\n            max_element = elem\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    n = len(l)\n    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    fib = [1, 2]\n    a, b = 1, 1\n    while len(fib) < n:\n        c = a + b\n        if is_prime(c):\n            fib.append(c)\n        a, b = b, c\n    return fib[-1]\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l)-1, 1, -1):\n        if l[i] < 0:\n            break\n        left = i - 1\n        right = len(l) - 1\n        while left < right:\n            if l[left] + l[right] == -l[i]:\n                return True\n            elif l[left] + l[right] < -l[i]:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    left = 0\n    right = n\n    while left < right:\n        left += 1\n        right -= 1\n        if left < right:\n            return left\n    return 0"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    n = len(l)\n    for i in range(n):\n        for j in range(i+1, n):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    fib_dict = {0: 0, 1: 0, 2: 2}\n    for i in range(3, n + 1):\n        fib_dict[i] = fib_dict[i - 1] + fib_dict[i - 2] + fib_dict[i - 3] + fib_dict[i - 4]\n    return fib_dict[n]"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n        return 1\n    return pow(n, (p - 1) // 2, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by -5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"AEIOUaeiou\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    if (x < 0 and y < 0) or (x > 0 and y > 0):\n\t\treturn -((x + y) + 1)\n\telse:\n\t\treturn (x + y)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append('>')\n        elif len(stack) > 0 and stack[-1] == '<':\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    \n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    if n < 4:\n        return None\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3,int(n ** 0.5)+1,2):\n        while n % i == 0:\n            n = n / i\n    if n > 2:\n        return n\n    else:\n        return None"}
{"task_id": "HumanEval/60", "completion": "    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if len(stack) == 0:\n                return False\n            if stack[-1] != '(':\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "    derivative_result = []\n    for i in range(1, len(xs)):\n        derivative_result.append(i * xs[i])\n    return derivative_result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(2, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/64", "completion": "    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    n = len(num_str)\n    shift = shift % n\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    num_apples = int(s.split('apples ')[1])\n\tnum_oranges = int(s.split('oranges ')[1])\n\tnum_fruits = num_apples + num_oranges\n\tnum_mangoes = n - num_fruits\n\treturn num_mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < min_val:\n                min_val = arr[i]\n                min_index = i\n    if min_val == float('inf'):\n        return []\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        mid_lst = [x for x in lst if x != min_val and x != max_val]\n        return [min_val] + strange_sort_list(mid_lst) + [max_val]"}
{"task_id": "HumanEval/71", "completion": "    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n        return lst1\n    elif sum(len(s) for s in lst1) > sum(len(s) for s in lst2):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(i, a):\n                if a % j == 0:\n                    for k in range(j, a):\n                        if a % k == 0:\n                            if i*j*k == a:\n                                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if (a > 0 and int(round(a**(1/3)))**3 == a):\n        return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "    n = len(num)\n    cnt = 0\n    for i in range(n):\n        if (int(num[i], 16) >= 2 and int(num[i], 16) <= 10):\n            cnt += 1\n    return cnt\n    \ndef is_prime(x):\n    if x < 2:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\n\ndef count_prime_digits(hex_num):\n    prime_digits = 0\n    for digit in hex_num:\n        if is_prime(int(digit, 16)):\n            prime_digits += 1\n    return prime_digits"}
{"task_id": "HumanEval/79", "completion": "    binary_str = bin(decimal)[2:]\n    return \"db\" + '0' * (len(binary_str) % 4) + \"db\""}
{"task_id": "HumanEval/80", "completion": "    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append('A+')\n        elif grade >= 3.7:\n            result.append('A')\n        elif grade >= 3.3:\n            result.append('A-')\n        elif grade >= 3.0:\n            result.append('B+')\n        elif grade >= 2.7:\n            result.append('B')\n        elif grade >= 2.3:\n            result.append('B-')\n        elif grade >= 2.0:\n            result.append('C+')\n        elif grade >= 1.7:\n            result.append('C')\n        elif grade >= 1.3:\n            result.append('C-')\n        elif grade >= 1.0:\n            result.append('D+')\n        elif grade >= 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        elif grade >= 0.0:\n            result.append('F')\n    return result"}
{"task_id": "HumanEval/82", "completion": "    if len(string) < 2:\n        return False\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    return (10 ** (n - 1)) + (9 ** (n - 1))"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = bin(N).count('1')\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/86", "completion": "    def sortWord(word):\n        return ''.join(sorted(word))\n\n    words = s.split()\n    result = []\n    for word in words:\n        result.append(sortWord(word))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                res.append((i, j))\n    res.sort()\n    return res"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = ''\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(((ord(char) - 97) * 2) + 2)\n            result += shifted_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"}
{"task_id": "HumanEval/91", "completion": "    return S.split()[0] == 'I'"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiou\"\n    encoded = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded += chr(ord(char) + ord('a')).upper()\n            else:\n                encoded += chr(ord(char) + ord('A')).lower()\n        elif char in vowels:\n            encoded += chr(ord(char) + 2)\n        else:\n            encoded += char\n    return encoded"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if is_prime(num):\n            max_prime = max(max_prime, num)\n    if max_prime == -1:\n        return -1\n    else:\n        return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    if all(isinstance(key, str) and (key.islower() or key.isupper()) for key in dict.keys()):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = set('AEIOU')\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return round(num)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(2*i)\n        else:\n            result.append(2*i+1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0 or y % 2 != 0:\n        return -1\n    else:\n        if x > y:\n            x, y = y, x\n        return x"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(round(avg))"}
{"task_id": "HumanEval/104", "completion": "    def is_odd_digit(num):\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                return False\n            num //= 10\n        return True\n    \n    result = []\n    for num in x:\n        if is_odd_digit(num):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    arr.sort(key=lambda x: (len(str(x)), x))\n    return arr\n\ndef by_name(arr):\n    name = {\n        '0': 'Zero',\n        '1': 'One',\n        '2': 'Two',\n        '3': 'Three',\n        '4': 'Four',\n        '5': 'Five',\n        '6': 'Six',\n        '7': 'Seven',\n        '8': 'Eight',\n        '9': 'Nine'\n    }\n    arr = list(map(lambda x: name[str(x)], arr))\n    return arr\n\ndef sortAndReplace(arr):\n    arr = by_length(arr)\n    arr = by_name(arr)\n    return arr"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    def sum_digits(n):\n        if n < 10:\n            return n\n        return n % 10 + sum_digits(n // 10)\n    \n    count = 0\n    for num in arr:\n        if sum_digits(abs(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    i = 0\n    while i < n - 1:\n        if arr[i] > arr[i + 1]:\n            return False\n        i += 1\n    return True"}
{"task_id": "HumanEval/110", "completion": "    diff_count = 0\n    for num in lst1:\n        if num % 2 != 0:\n            diff_count += 1\n    for num in lst2:\n        if num % 2 != 0:\n            diff_count += 1\n    if diff_count > 2:\n        return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    hist = {}\n    for letter in test.split():\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "    for char in c:\n        s = s.replace(char, '')\n    return (s, s[::-1]==s)"}
{"task_id": "HumanEval/113", "completion": "    def count_odd_digits(s):\n        odd_count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                odd_count += 1\n        return odd_count\n    \n    result = []\n    for s in lst:\n        result.append(f\"the number of odd elements {count_odd_digits(s)}n the str{count_odd_digits(s)}ng of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    if not grid:\n        return 0\n    rows, cols = len(grid), len(grid[0])\n    water = [[0] * cols for _ in range(rows)]\n    max_water = 0\n    for i in range(rows):\n        for j in range(cols):\n            water[i][j] = min(grid[i][j], capacity)\n    for i in range(rows):\n        for j in range(cols):\n            if water[i][j] == 0:\n                continue\n            max_water = max(max_water, water[i][j] * (cols - j))\n    return math.ceil(max_water)"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    vowels = \"aeiouAEIOU\"\n    result = []\n    for word in s.split():\n        count = 0\n        for char in word:\n            if char.isalpha():\n                if char.lower() not in vowels:\n                    count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = 'aeiouAEIOU'\n    last_consonant = ''\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n        elif word[i] not in vowels and word[i] != 'a' and word[i] != 'e' and word[i] != 'i' and word[i] != 'o' and word[i] != 'u':\n            last_consonant = word[i]\n            return ''\n    return ''"}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack or stack.pop() != '(':\n                    return 'No'\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    i = 0\n    while i < k:\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n        i += 1\n    return total"}
{"task_id": "HumanEval/123", "completion": "    seq = [n]\n    while seq[-1] != 1:\n        if seq[-1] % 2 == 0:\n            seq.append(seq[-1] // 2)\n        else:\n            seq.append(3 * seq[-1] + 1)\n    return sorted([x for x in seq if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    try:\n        month, day, year = map(int, date_parts)\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return False\n        elif month in [4, 6, 9, 11]:\n            return False\n        elif month == 2:\n            if year % 4 != 0 or (year % 100 == 0 and year % 400 != 0):\n                return False\n            elif day < 1 or day > 29:\n                return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if \" \" in txt:\n        return txt.split()\n    if \",\" in txt:\n        return txt.split(\",\")\n    return len([x for x in txt if x.islower()]) % 2 == 1"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    \n    product_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        product_signs *= 1 if num >= 0 else -1 if num < 0 else 0\n        sum_of_magnitudes += abs(num) * product_signs\n    return sum_of_magnitudes"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    dp = [[[float('inf') for _ in range(m)] for _ in range(n)] for _ in range(k+1)]\n    dp[1][0][0] = grid[0][0]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    for i in range(1, k+1):\n        for x in range(n):\n            for y in range(m):\n                for dx, dy in directions:\n                    nx = x + dx\n                    ny = y + dy\n                    if nx < 0 or nx >= n or ny < 0 or ny >= m:\n                        continue\n                    dp[i][x][y] = min(dp[i][x][y], dp[i-1][nx][ny] + grid[nx][ny])\n    \n    res = []\n    i, j, k = k, n-1, m-1\n    while i > 0:\n        res.append(grid[i][j])\n        for dx, dy in directions:\n            nx = i + dx\n            ny = j + dy\n            if nx < 0 or nx >= n or ny < 0 or ny >= m:\n                continue\n            if dp[i][nx][ny] + grid[nx][ny] == dp[i][i][j]:\n                i = nx\n                j = ny\n                break\n        i -= 1\n    res.append(grid[0][0])\n    res.reverse()\n    return res"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [1, 3]\n    \n    a = [1, 3, 2]\n    while len(a) < n:\n        if len(a) % 2 == 0:\n            a.append(a[-1] + a[-2] // 2)\n        else:\n            a.append(a[-1] + a[-2] + a[-3])\n    return a"}
{"task_id": "HumanEval/131", "completion": "    if (n == 0 or n == 1):\n        return 1\n    elif (n % 2 == 0):\n        return 0\n    else:\n        odd = n % 10\n        n = n // 10\n        if (n == 0):\n            return odd\n        else:\n            return odd * digits(n)"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)"}
{"task_id": "HumanEval/133", "completion": "    result = sum([int(x)**2 for x in lst])\n    return result"}
{"task_id": "HumanEval/134", "completion": "    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and \" \" not in last_char:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_idx = -1\n    for i in range(1, n):\n        if arr[i] <= arr[i-1]:\n            max_idx = i\n    return max_idx"}
{"task_id": "HumanEval/136", "completion": "    neg_ints = [num for num in lst if num < 0]\n    pos_ints = [num for num in lst if num > 0]\n    if not neg_ints or not pos_ints:\n        return (None, None)\n    return (max(neg_ints), min(pos_ints))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == str:\n        a = a.replace(',', '')\n        a = a.replace('.', '')\n        a = float(a)\n    if type(b) == str:\n        b = b.replace(',', '')\n        b = b.replace('.', '')\n        b = float(b)\n    if type(a) != type(b):\n        return None\n    return a if a > b else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 4 != 0:\n        return False\n    for i in range(n // 4, 0, -1):\n        if i % 2 != 0:\n            continue\n        if (n - i) % 2 != 0:\n            continue\n        if (n - i) % 4 != 0:\n            continue\n        return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    fact = 1\n    for i in range(n, 0, -1):\n        fact *= i\n    return fact"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/141", "completion": "    if '..' in file_name:\n        return 'No'\n    if '.' not in file_name or file_name.index('.') == len(file_name) - 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) > 2:\n        return 'No'\n    if len(parts[0]) > 3:\n        return 'No'\n    if len(parts[1]) < 2:\n        return 'No'\n    if parts[1][0].lower() not in 'abcdefghijklmnopqrstuvwxyz':\n        return 'No'\n    if parts[1][0] == '.' or parts[1][0] == '_':\n        return 'No'\n    if parts[1][1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if (i+1) % 3 == 0:\n            total += lst[i]**2\n        elif (i+1) % 4 == 0:\n            total += lst[i]**3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    numerator = int(x.split(\"/\")[0]) * int(n.split(\"/\")[0])\n    denominator = int(x.split(\"/\")[1]) * int(n.split(\"/\")[1])\n    \n    return numerator == denominator"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 != 0 and num % 100 % 10 % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    ans = 0\n    for i in range(1, n + 1):\n        ans += (i * i - i + 1)\n    return ans"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        index1, index2 = planets.index(planet1), planets.index(planet2)\n        start = max(index1, index2) + 1\n        end = min(index1, index2)\n        return tuple(planets[start:end])\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "    odd_length_words = [word for word in lst if len(word) % 2 != 0]\n    odd_length_words.sort(key=lambda x: (len(x), x))\n    return odd_length_words"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return x\n    else:\n        if n == 2:\n            return y\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x"}
{"task_id": "HumanEval/151", "completion": "    return sum([x**2 for x in lst if isinstance(x, int) and x % 2 != 0])"}
{"task_id": "HumanEval/152", "completion": "    return [abs(x - y) if x != y else 0 for x, y in zip(game, guess)]"}
{"task_id": "HumanEval/153", "completion": "    strongest_ext = \"\"\n    max_strength = -1\n    for extension in extensions:\n        strength = extension.count('A') - extension.count('a')\n        if strength > max_strength or (strength == max_strength and extension < strongest_ext):\n            strongest_ext = extension\n            max_strength = strength\n    return class_name + \".\" + strongest_ext"}
{"task_id": "HumanEval/154", "completion": "    if len(a)<len(b):\n        return False\n    return b in a+a"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n\n    result = ''\n    for value, symbol in roman_numerals.items():\n        while number >= value:\n            result += symbol\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    result_word = \"\"\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            result_word = word\n        elif unique_chars == max_unique_chars and word < result_word:\n            result_word = word\n    \n    return result_word"}
{"task_id": "HumanEval/159", "completion": "    total = number + need\n    if total <= remaining:\n        return [total, remaining - total]\n    else:\n        return [total, remaining]"}
{"task_id": "HumanEval/160", "completion": "    if len(operator) != len(operand) - 1:\n        return -1\n    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    res = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.islower():\n                res += ch.upper()\n            else:\n                res += ch.lower()\n        else:\n            res += ch\n    return res[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    separated_groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            group = stack.pop()\n            if not stack:\n                separated_groups.append(group)\n    return separated_groups"}
{"task_id": "HumanEval/2", "completion": "    truncated_number = int(number)\n    decimal_part = number - truncated_number\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    mads = [abs(x - mean) for x in numbers]\n    return sum(mads) / len(mads)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for num in numbers:\n        result.append(num)\n        if num != numbers[-1]:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    current_depth = 0\n    depth_levels = []\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            depth_levels.append(current_depth)\n        elif char == ')':\n            current_depth -= 1\n            max_depth = max(max_depth, current_depth)\n    return depth_levels"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1)"}
{"task_id": "HumanEval/9", "completion": "    n = len(numbers)\n    result = []\n    max_so_far = float('-inf')\n    for i in range(n):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    n = len(string)\n    for i in range(n, -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    n = max(len(a), len(b))\n    a = a.zfill(n)\n    b = b.zfill(n)\n    res = ''\n    for i in range(n):\n        if a[i] == b[i]:\n            res += '0'\n        else:\n            res += '1'\n    return res"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    n = len(string)\n    for i in range(n + 1):\n        result.append(string[:i])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = [4, 2, 1]\n    notes = music_string.split('|')\n    result = []\n    for note in notes:\n        for i, beat in enumerate(beats):\n            result.extend([beat] * note.count(str(i)))\n    return result"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    numbers_list = list(numbers.split())\n    numbers_list.sort(key=lambda x: int(x))\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_numbers = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_numbers = (numbers[i], numbers[i+1])\n    return closest_numbers"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    prime_factors = []\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n = n // 2\n    for i in range(3,int(n**0.5)+1,2):\n        while n % i== 0:\n            prime_factors.append(i)\n            n = n // i\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]"}
{"task_id": "HumanEval/27", "completion": "    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string"}
{"task_id": "HumanEval/28", "completion": "    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Find x such that poly(x) = 0, where poly is defined by coefficients xs\n    \"\"\"\n    max_non_zero_coeff = max(abs(x) for x in xs if x != 0)\n    if len(xs) % 2 != 0:\n        return None\n    for i in range(len(xs) - 1):\n        if xs[i] == 0:\n            continue\n        x = 0\n        while poly(xs, x) != 0 and poly(xs, x) > 0:\n            x += max_non_zero_coeff\n        x -= max_non_zero_coeff\n        if poly(xs, x) == 0:\n            return x\n    return None"}
{"task_id": "HumanEval/33", "completion": "    return [l[i] if i % 3 != 0 else sorted(l[i:i+3]) for i in range(len(l))]"}
{"task_id": "HumanEval/34", "completion": "    n = len(l)\n    for i in range(n):\n        if i > 0 and l[i] == l[i-1]:\n            l.pop(i)\n            n -= 1\n            continue\n    return l"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l' = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l' += [l[i]]\n        else:\n            l' += [l[i]]\n    return sorted(l')"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from cyclic encoding.\n    \"\"\"\n    # split string to groups of 3. Each of length 3.\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    # get original string by cycling groups of 3 in reverse order.\n    return \"\".join(groups[::-1])"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 2, 3\n    for _ in range(n):\n        if is_prime(a) and is_prime(b):\n            return a\n        a, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    result = []\n    for i in l:\n        if isinstance(i, int):\n            result.append(i + 1)\n        else:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/43", "completion": "    num_set = set()\n    for num in l:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n < 4:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]"}
{"task_id": "HumanEval/48", "completion": "    text = text.lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, p - 2, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by -5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join([c for c in text if c not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    while(y != 0):\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for bracket in brackets:\n        if bracket in mapping:\n            top = stack.pop() if stack else '#'\n            if mapping[bracket] != top:\n                return False\n        else:\n            stack.append(bracket)\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 3:\n        return True\n    if l[1] > l[0]:\n        increasing = True\n    else:\n        increasing = False\n    for i in range(1, len(l)-1):\n        if increasing and l[i] < l[i+1]:\n            return False\n        elif not increasing and l[i] > l[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "    return list(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    if n == 1:\n        return 1\n    return n + sum_to_n(n - 1)"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    if len(xs) == 1:\n        return [0]\n    elif len(xs) == 2:\n        return [2 * xs[1]]\n    else:\n        return [2 * xs[i] * xs[i+1] for i in range(1, len(xs) - 1)] + [xs[i] * (len(xs) - 1) for i in range(1, len(xs) - 1)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    n = len(str(x))\n    shift = shift % n\n    return str(x)[-shift:] + str(x)[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    s = s.split()\n    apples = 0\n    oranges = 0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            if s[i].isdigit():\n                if s[i].isdigit():\n                    if s[i].isdigit():\n                        if s[i].isdigit():\n                            if s[i].isdigit():\n                                if s[i].isdigit():\n                                    if s[i].isdigit():\n                                        if s[i].isdigit():\n                                            if s[i].isdigit():\n                                                if s[i].isdigit():\n                                                    if s[i].isdigit():\n                                                        if s[i].isdigit():\n                                                            if s[i].isdigit():\n                                                                if s[i].isdigit():\n                                                                    if s[i].isdigit():\n                                                                        if s[i].isdigit():\n                                                                            if s[i].isdigit():\n                                                                                if s[i].isdigit():\n                                                                                    if s[i].isdigit():\n                                                                                        if s[i].isdigit():\n                                                                                            if s[i].isdigit():\n                                                                                                if s[i].isdigit():\n                                                                                                    if s[i].isdigit():\n                                                                                                        if s[i].isdigit():\n                                                                                                            if s[i].isdigit():\n                                                                                                                if s[i].isdigit():\n                                                                                                                    if s[i].isdigit():\n                                                                                                                        if s[i].isdigit():\n                                                                                                                              if s[i].isdigit():\n                                                                                                                                  if s[i].isdigit():\n                                                                                                                                      if s[i].isdigit():\n                                                                                                                                          if s[i].isdigit():\n                                                                                                                                              if s[i].isdigit():\n                                                                                                                                                  if s[i].isdigit():\n                                                                                                                                                      if s[i].isdigit():\n                                                                                                                                                          if s[i].isdigit():\n                                                                                                                                                             if s[i].isdigit():\n                                                                                                                                                                 if s[i].isdigit():\n                                                                                                                                                                     if s[i].isdigit():\n                                                                                                                                                                         if s[i].isdigit():\n                                                                                                                                                                             if s[i].isdigit():\n                                                                                                                                                                                 if s[i].isdigit():\n                                                                                                                                                                                     if s[i].isdigit():\n                                                                                                                                                                                         if s[i].isdigit():\n                                                                                                                                                                                            if s[i].isdigit():\n                                                                                                                                                                                                if s[i].isdigit():\n                                                                                                                                                                                                    if s[i].isdigit():\n                                                                                                                                                                                                        if s[i].isdigit():\n                                                                                                                                                                                                            if s[i].isdigit():\n                                                                                                                                                                                                                if s[i].isdigit():\n                                                                                                                                                                                                                    if s[i].isdigit():\n                                                                                                                                                                                                                        if s[i].isdigit():\n                                                                                                                                                                                                                           if s[i].isdigit():\n                                                                                                                                                                                                if s[i].isdigit():\n                                                                                                                                                                                                    if s[i].isdigit():\n                                                                                                                                                                                                        if s[i].isdigit():\n                                                                                                                                                                                                            if s[i].isdigit():\n                                                                                                                                                                                                                if s[i].isdigit():\n                                                                                                                                                                                                                    if s[i].isdigit():\n                                                                                                                                                                                                                        if s[i].isdigit():\n                                                                                                                                                                                                                           if s[i].isdigit():\n                                                                                                                                                                                                if s[i].isdigit():\n                                                                                                                                                                                                    if s[i].isdigit():\n                                                                                                                                                                                                        if s[i].isdigit():\n                                                                                                                                                                                                            if s[i].isdig"}
{"task_id": "HumanEval/68", "completion": "    smallest_even = float('inf')\n    smallest_index = -1\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n            \n    if smallest_index == -1:\n        return [float('inf'), -1]\n    return [smallest_even, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n        \n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    result = []\n    while lst:\n        result.append(lst[0])\n        lst.remove(lst[0])\n        if lst:\n            result.append(lst[-1])\n            lst.remove(lst[-1])\n    return result"}
{"task_id": "HumanEval/71", "completion": "    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2) if area > 0 else -1"}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    if n < 2:\n        return 0\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return min(count, n - count)"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(word) for word in lst1)\n    total_chars2 = sum(len(word) for word in lst2)\n    \n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "    primes = [2, 3, 5]\n    i = 7\n    while i * i <= a:\n        if a % i == 0:\n            is_divisible = False\n            for prime in primes:\n                if i * prime <= a:\n                    if a % (i * prime) == 0:\n                        is_divisible = True\n                        break\n            if is_divisible:\n                return True\n        i += 2\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return x % n == 0 and is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a == 0:\n        return True\n    i = 1\n    while i * i * i <= a:\n        if i * i * i == a:\n            return True\n        i += 1\n    return False"}
{"task_id": "HumanEval/78", "completion": "    hex_to_dec = {'0': 0, '1': 1, '2': 2, '3': 3, \n                  '4': 4, '5': 5, '6': 6, '7': 7, \n                  '8': 8, '9': 9, 'A': 10, 'B': 11, \n                  'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    count = 0\n    for digit in num:\n        if digit in hex_to_dec:\n            decimal = hex_to_dec[digit]\n            if decimal > 1:\n                for i in range(2, decimal):\n                    if decimal % i == 0:\n                        break\n                else:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    if decimal < 0:\n        raise ValueError(\"Decimal value cannot be negative\")\n    \n    binary_str = bin(decimal)[2:]\n    binary_str = '0' * (8 - len(binary_str)) + binary_str  # Ensure binary number has 8 digits\n    \n    return \"db\" + binary_str + \"db\""}
{"task_id": "HumanEval/80", "completion": "    n = len(s)\n    for i in range(n - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    grade_dict = {\n        'A+': (4.0, 4.3),\n        'A': (3.7, 4.0),\n        'A-': (3.3, 3.7),\n        'B+': (2.7, 3.3),\n        'B': (2.3, 2.7),\n        'B-': (2, 2.3),\n        'C+': (1.7, 2.3),\n        'C': (1.3, 1.7),\n        'C-': (1, 1.3),\n        'D+': (0.7, 1),\n        'D': (0.3, 0.7),\n        'D-': (0, 0.3),\n        'F': (0, 0)\n    }\n    letter_grades = []\n    for gpa in grades:\n        for letter, (min_gpa, max_gpa) in grade_dict.items():\n            if gpa >= min_gpa and gpa < max_gpa:\n                letter_grades.append(letter)\n                break\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    if len(string) < 2:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(len(string)**0.5)+1):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 10\n    else:\n        return 9 * starts_one_ends(n - 1)"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = 0\n    while N:\n        binary_sum += N % 2\n        N = N // 2\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    res = []\n    for word in words:\n        res.append(''.join(sorted(word)))\n    return ' '.join(res)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for row in lst:\n        for i, val in enumerate(row):\n            if val == x:\n                result.append((i, row.index(val)))\n    return sorted(result, key=lambda r: (lst.index(r[1]), r[0]))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    \n    n = len(array)\n    prefixSum = [0] * (n + 1)\n    suffixSum = [0] * (n + 1)\n    \n    for i in range(1, n + 1):\n        prefixSum[i] = prefixSum[i - 1] + array[i - 1]\n    \n    for i in range(n - 1, -1, -1):\n        suffixSum[i] = suffixSum[i + 1] + array[i]\n    \n    result = []\n    if (prefixSum[1] + suffixSum[n]) % 2 == 0:\n        result.extend(sorted(array))\n    else:\n        result.extend(sorted(array, reverse=True))\n    \n    return result"}
{"task_id": "HumanEval/89", "completion": "    encrypted_text = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n            encrypted_text += shifted_char\n        else:\n            encrypted_text += char\n    return encrypted_text"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    second_smallest = float('inf')\n    for num in lst:\n        if num != smallest and num < second_smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    s = S.split()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == \"I\" and i+1 < len(s) and s[i+1][0] in ['.','?','!']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    return (x == y + z) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded += chr(((ord(char) - 65 + 2) % 26) + 65)\n            elif char.islower():\n                encoded += chr(((ord(char) - 97 + 2) % 26) + 97)\n        elif char in vowels:\n            encoded += chr(ord(char) + 2)\n        else:\n            encoded += char\n    return encoded"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = -1\n    for num in lst:\n        if isPrime(num) and num > max_prime:\n            max_prime = num\n    \n    sum_of_digits = sum(int(digit) for digit in str(max_prime))\n    return sum_of_digits"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                break\n        else:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    n = float(value)\n    return int(n + 0.5)"}
{"task_id": "HumanEval/100", "completion": "    if n % 2 == 0:\n        return [n] + [n + i for i in range(2, n * 2, 2)]\n    else:\n        return [n] + [n + i for i in range(1, n * 2, 2)]"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for num in range(y, x-1, -2):\n        if num % 2 == 0:\n            return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = sum(range(n, m+1)) / (m - n + 1)\n    return bin(round(average))"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(num):\n        while num:\n            if num % 2 == 0:\n                return True\n            num = num // 10\n        return False\n    \n    return sorted(set(num for num in x if not has_even_digit(num)))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: len(str(x)), reverse=True)\n\n\ndef replace_with_name(arr):\n    res = []\n    for num in arr:\n        if 1 <= num <= 9:\n            res.append(str(num).replace(str(num), ''.join(['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'])))\n    return res"}
{"task_id": "HumanEval/106", "completion": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum(range(1, i+1)))\n    return res\n\ndef factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            digit_sum = 0\n            while num != 0:\n                digit_sum += num % 10\n                num = num // 10\n            if digit_sum > 0:\n                count += 1\n        else:\n            if sum(int(digit) for digit in str(num)) > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n <= 1:\n        return True\n    if arr[-1] <= arr[-2]:\n        return True\n    for i in range(n-2, -1, -1):\n        if arr[i] <= arr[i+1]:\n            return True\n    return False"}
{"task_id": "HumanEval/110", "completion": "    even = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even += 1\n    for num in lst2:\n        if num % 2 == 0:\n            even -= 1\n    return \"YES\" if even == 0 else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    letter_count = {}\n    max_count = 0\n    for char in test:\n        if char.isalpha():\n            char = char.lower()\n            if char in letter_count:\n                letter_count[char] += 1\n            else:\n                letter_count[char] = 1\n            max_count = max(max_count, letter_count[char])\n    return {char: count for char, count in letter_count.items() if count == max_count}"}
{"task_id": "HumanEval/112", "completion": "    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    odd_count_lst = []\n    for s in lst:\n        odd_count_lst.append(str(sum(1 for digit in s if int(digit) % 2 != 0)))\n    return [\"the number of odd elements \" + odd_count_lst[i] + \" in the string \" + lst[i] for i in range(len(lst))]"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows, cols = len(grid), len(grid[0])\n    min_bucket_size = math.ceil(min(rows, cols) / capacity)\n    buckets_needed = [min_bucket_size] * capacity\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                buckets_needed[grid[i][j] - 1] += 1\n    return max(buckets_needed)"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    def is_consonant(c):\n        return c.isalpha() and c.lower() not in ['a', 'e', 'i', 'o', 'u']\n    \n    words = s.split()\n    result = [word for word in words if sum(1 for c in word if is_consonant(c)) == n]\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    n = len(word)\n    left, right = -1, n - 1\n    while left < n - 1:\n        if word[left] not in vowels and word[left + 1] in vowels:\n            return word[left + 1]\n        left += 1\n    while right >= 0:\n        if word[right] not in vowels and word[right - 1] in vowels:\n            return word[right - 1]\n        right -= 1\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    open_count = 0\n    close_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                close_count += 1\n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    return sum(arr[:k])"}
{"task_id": "HumanEval/123", "completion": "    sequence = []\n    while n != 1:\n        sequence.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    return sequence"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    try:\n        date_parts = date.split('-')\n        if len(date_parts) != 3:\n            return False\n        month, day, year = map(int, date_parts)\n        if month < 1 or month > 12:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        return True\n    except:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    words = []\n    if \" \" in txt:\n        words = txt.split(\" \")\n    else:\n        words = txt.split(\",\")\n    return words"}
{"task_id": "HumanEval/126", "completion": "    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start >= end:\n        return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num == 0:\n            return None\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        magnitude_sum += abs(num)\n        sign_product *= sign\n    return magnitude_sum * sign_product"}
{"task_id": "HumanEval/129", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    \n    def backtrack(row, path, k, visited):\n        if k == 0:\n            return path\n        if row < 0 or row >= rows or col < 0 or col >= cols or (row, col) in visited:\n            return None\n        visited.add((row, col))\n        next_paths = [backtrack(row+1, path + [grid[row][col]], k-1, visited),\n                       backtrack(row-1, path + [grid[row][col]], k-1, visited),\n                       backtrack(row, path + [grid[row][col]], k-1, visited),\n                       backtrack(row+1, path + [grid[row][col]], k-1, visited),\n                       backtrack(row-1, path + [grid[row][col]], k-1, visited),\n                       backtrack(row, path + [grid[row][col]], k-1, visited)]\n        return min(next_paths, key=lambda x: x) if next_paths else None\n    \n    return backtrack(0, [], k, set())"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [3]\n    if n == 2:\n        return [3, 1]\n    \n    res = [3, 1, 1]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            res.append(res[-1] + (i // 2))\n        else:\n            res.append(res[-1] + res[-2] + res[-3])\n    return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    return sum(int(i)**2 for i in lst)"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    for word in words:\n        if len(word) > 0 and word[-1].isalpha():\n            return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] <= arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n    if not neg_integers or not pos_integers:\n        return (None, None)\n    else:\n        return (max(neg_integers), min(pos_integers))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and '.' in a:\n        a = float(a)\n    if isinstance(b, str) and '.' in b:\n        b = float(b)\n    if isinstance(a, str) and ',' in a:\n        a = float(a)\n    if isinstance(b, str) and ',' in b:\n        b = float(b)\n    if isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    if isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    if isinstance(a, str) and isinstance(b, str):\n        if a.isdigit():\n            a = int(a)\n        if b.isdigit():\n            b = int(b)\n        return max(a, b)\n    return None"}
{"task_id": "HumanEval/138", "completion": "    return n % 4 == 0 and n / 4 % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "    if n == 1:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, n+1):\n            factorial *= i\n        return factorial"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\" \", \"_\")\n    return text.replace(\"   \", \"-\")"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 100:  # Assuming file name should not be more than 100 characters\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    dot_index = file_name.find('.')\n    if dot_index == -1:\n        return 'No'\n    prefix = file_name[:dot_index]\n    suffix = file_name[dot_index+1:]\n    if not prefix or not suffix or not prefix.isalnum() or not suffix.isalnum():\n        return 'No'\n    if prefix.lower().isalpha() and suffix.lower() in ['txt', 'exe', 'dll']:\n        return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i] ** 3\n    return result"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    num1 = int(x.split('/')[0])\n    den1 = int(x.split('/')[1])\n    num2 = int(n.split('/')[0])\n    den2 = int(n.split('/')[1])\n\n    if (num1 * den2) % (den1 * num2) == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    if not nums:\n        return []\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    special_count = 0\n    for num in nums:\n        if num > 10 and (str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']):\n            special_count += 1\n    return special_count"}
{"task_id": "HumanEval/147", "completion": "    max_triples = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    max_triples += 1\n    return max_triples"}
{"task_id": "HumanEval/148", "completion": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    return tuple(planets[start:end+1])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(filter(lambda x: len(x) % 2 == 0, lst))"}
{"task_id": "HumanEval/150", "completion": "    if isPrime(n):\n        return x\n    else:\n        return y\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/151", "completion": "    odd_squares_sum = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            odd_squares_sum += num ** 2\n    return odd_squares_sum"}
{"task_id": "HumanEval/152", "completion": "    if len(game)!=len(guess):\n        return []\n    ans = []\n    for i in range(len(game)):\n        if game[i]==guess[i]:\n            ans.append(0)\n        else:\n            ans.append(abs(game[i]-guess[i]))\n    return ans"}
{"task_id": "HumanEval/153", "completion": "    def strength(extension):\n        cap, sm = 0, 0\n        for char in extension:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n        return cap - sm\n    \n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\""}
{"task_id": "HumanEval/154", "completion": "    if (len(a) < len(b)):\n\t\treturn False\n\tfor i in range(len(b)):\n\t\tif (a[i:i + len(b)] == b):\n\t\t\treturn True\n\treturn False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n\todd_count = 0\n\twhile num > 0:\n\t\tdigit = num % 10\n\t\tif digit % 2 == 0:\n\t\t\teven_count += 1\n\t\telse:\n\t\t\todd_count += 1\n\t\tnum //= 10\n\treturn (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    symbols = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n    result = ''\n    for value, symbol in symbols.items():\n        while number >= value:\n            result += symbol\n            number -= value\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "    if (a ** 2 + b ** 2 == c ** 2) or (a ** 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    def unique_char(s):\n        return len(set(s))\n    \n    max_word = \"\"\n    max_unique = 0\n    \n    for word in words:\n        if unique_char(word) > max_unique or (unique_char(word) == max_unique and word < max_word):\n            max_word = word\n            max_unique = unique_char(word)\n            \n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    leftover = max(0, eaten - remaining)\n    return [eaten, leftover]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operand)):\n        if operator[i] == '+':\n            stack.append(operand[i] + stack.pop() if stack else operand[i])\n        elif operator[i] == '-':\n            stack.append(operand[i] - stack.pop() if stack else operand[i])\n        elif operator[i] == '*':\n            stack.append(operand[i] * stack.pop() if stack else operand[i])\n        elif operator[i] == '/':\n            stack.append(operand[i] // stack.pop() if stack else operand[i])\n        elif operator[i] == '**':\n            stack.append(operand[i] ** stack.pop() if stack else operand[i])\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    new_s = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                new_s += char.upper()\n            else:\n                new_s += char.lower()\n        else:\n            new_s += char\n    return new_s[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    def get_even_digits(n):\n        return [int(digit) for digit in str(n) if int(digit) % 2 == 0]\n    \n    result = []\n    while a <= b:\n        result.extend(get_even_digits(a))\n        a += 1\n    return result"}
{"task_id": "HumanEval/0", "completion": "    if len(numbers) < 2:\n        return False\n    numbers.sort()\n    min_diff = float('inf')\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff and diff < threshold:\n            return True\n        min_diff = min(min_diff, diff)\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    group_list = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            group = stack.pop()\n            group_list.append(group)\n    return group_list"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    def find_depth(s: str) -> int:\n        n = len(s)\n        depth = 0\n        max_depth = 0\n        for i in range(n):\n            if s[i] == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif s[i] == ')':\n                depth -= 1\n        return max_depth\n    \n    groups = paren_string.split()\n    return [find_depth(group) for group in groups]"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    product = 1\n    sum = 0\n    for num in numbers:\n        product *= num\n        sum += num\n    return (sum, product)"}
{"task_id": "HumanEval/9", "completion": "    rolling_maxes = []\n    max_seen = float('-inf')\n    for num in numbers:\n        max_seen = max(max_seen, num)\n        rolling_maxes.append(max_seen)\n    return rolling_maxes"}
{"task_id": "HumanEval/10", "completion": "    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]"}
{"task_id": "HumanEval/11", "completion": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b != 0:\n\t\ta, b = b, a % b\n\treturn a"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    string = string.lower()\n    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "    beats = [0] * (music_string.count('|') + music_string.count('o') + music_string.count('.') + 1)\n    index = 0\n    for char in music_string:\n        if char == '|' or char == 'o' or char == '.':\n            beats[index] += 1\n            index += 1\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    n = len(string)\n    m = len(substring)\n    for i in range(n - m + 1):\n        if string[i:i + m] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: int(x))\n    return ' '.join(sorted_numbers)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    rescaled = [(num - min_val) / (max_val - min_val) for num in numbers]\n    return rescaled"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n - 1, 1, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n            break\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return list(filter(lambda s: s.startswith(prefix), strings))"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds the zero of the polynomial.\n    Returns x where poly(x) = 0.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0:\n        return None\n    x_0 = -xs[n // 2] / xs[n // 2 + 1]\n    return x_0"}
{"task_id": "HumanEval/33", "completion": "    l = list(l)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = sorted(l[i])\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if len(l) == 0:\n        return None\n    max_val = l[0]\n    for i in range(1, len(l)):\n        max_val = max(max_val, l[i])\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0):\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    result = []\n    for i in range(0, len(l), 2):\n        result.append(l[i])\n    for i in range(1, len(l), 2):\n        result[i] = sorted(l[i])\n    return result"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded string.\n    \"\"\"\n    # split string into groups of 3.\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    # cycle elements in each group. If group has less than 3 elements, it's not a valid encoded message.\n    groups = [group[-1] + group[:-1] if len(group) < 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(x):\n\t\tif x < 2:\n\t\t\treturn False\n\t\tfor i in range(2, int(x**0.5)+1):\n\t\t\tif x % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\n\ta, b = 2, 3\n\twhile True:\n\t\tc = a + b\n\t\tif c == n:\n\t\t\treturn c\n\t\tif is_prime(c):\n\t\t\treturn c\n\t\ta, b = b, c"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n//2"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    a, b, c = 0, 1, 1\n    for _ in range(n):\n        a, b, c = b, c, a + b + c\n    return c"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    if len(text) < 2:\n        return True\n    if text[0] != text[-1]:\n        return False\n    return is_palindrome(text[1:-1])"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    while (n > 0):\n        result = (result * 2) % p\n        n = (n - 1) % p\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by -5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"AEIOUaeiou\"\n    return \"\".join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n\t\treturn n\n\treturn fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif not stack:\n            return False\n        elif stack.pop() != \"<\":\n            return False\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"}
{"task_id": "HumanEval/58", "completion": "    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            n = n // i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    if len(xs) < 2:\n        return []\n    else:\n        return [xs[i] * (i + 1) for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b, c = 0, 1, 1\n    for i in range(3, n+1):\n        d = a + b + c\n        a, b, c = b, c, d\n    return c"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x = str(x)\n    shift %= len(x)\n    return x[-shift:] + x[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    fruits = s.split()\n    orange = int(fruits[1])\n    apple = int(fruits[0])\n    mango = n - orange - apple\n    return mango"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    \n    min_even = float('inf')\n    min_index = float('inf')\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n                min_even = arr[i]\n                min_index = i\n            elif arr[i] == min_even and i < min_index:\n                min_index = i\n                \n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    n = len(lst)\n    result = []\n    for i in range(n//2):\n        result.append(min(lst[i], lst[n-i-1]))\n    if n % 2 != 0:\n        result.append(max(lst[n//2]))\n    return result + strange_sort_list(lst[n//2:])"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n\t\ts = (a + b + c) / 2\n\t\treturn round((s * (s - a) * (s - b) * (s - c)), 2)\n\telse:\n\t\treturn -1"}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    j = n - 1\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[j]:\n            count += 1\n            j -= 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst2) < len(lst1):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "    prime = False\n    for i in range(2, a):\n        if a % i == 0:\n            prime = True\n    return prime"}
{"task_id": "HumanEval/76", "completion": "    return n**int(x**0.5) == x"}
{"task_id": "HumanEval/77", "completion": "    return round(a**(1/3))**3 == a"}
{"task_id": "HumanEval/78", "completion": "    hex_dict = {'0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0,\n                '6': 0, '7': 0, '8': 0, '9': 0, 'A': 0, 'B': 0,\n                'C': 0, 'D': 0, 'E': 0, 'F': 0}\n    \n    for digit in num:\n        hex_dict[digit] += 1\n    \n    count = 0\n    for digit in hex_dict:\n        if hex_dict[digit] >= 2:\n            count += 1\n        elif hex_dict[digit] == 2 and digit in ['A', 'B', 'D', 'E', 'F']:\n            count += 1\n        elif hex_dict[digit] == 3 and digit in ['A', 'B', 'C', 'D', 'E', 'F']:\n            count += 1\n        elif hex_dict[digit] == 5 and digit in ['A', 'B', 'C', 'D', 'E', 'F']:\n            count += 1\n        elif hex_dict[digit] == 7 and digit in ['A', 'B', 'C', 'D', 'E', 'F']:\n            count += 1\n    \n    return count"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"0\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append('A+')\n        elif grade >= 3.7:\n            result.append('A')\n        elif grade >= 3.3:\n            result.append('A-')\n        elif grade >= 3.0:\n            result.append('B+')\n        elif grade >= 2.7:\n            result.append('B')\n        elif grade >= 2.3:\n            result.append('B-')\n        elif grade >= 2.0:\n            result.append('C+')\n        elif grade >= 1.7:\n            result.append('C')\n        elif grade >= 1.3:\n            result.append('C-')\n        elif grade >= 1.0:\n            result.append('D+')\n        elif grade >= 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        elif grade >= 0.0:\n            result.append('E')\n    return result"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    else:\n        return n + 1"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N = N // 2\n    return str(binary_sum)"}
{"task_id": "HumanEval/85", "completion": "    res = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            res += lst[i]\n    return res"}
{"task_id": "HumanEval/86", "completion": "    return ' '.join([''.join(sorted(word)) for word in s.split()])"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for row in lst:\n        for i in range(len(row)):\n            if row[i] == x:\n                result.append((lst.index(row), i))\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return []\n    first, last = 0, len(array) - 1\n    while first < last:\n        if (first + last) % 2 == 0:\n            array[first], array[last] = array[last], array[first]\n        else:\n            array[first], array[last] = array[last], array[first]\n        first += 1\n        last -= 1\n    return array"}
{"task_id": "HumanEval/89", "completion": "    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shifted = chr((ord(char) - ord('a') + 2 * 2) % 26 + ord('a'))\n            encrypted += shifted\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    second_smallest = float('inf')\n    for num in lst:\n        if num != smallest and num < second_smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    if S[0].lower() == \"i\":\n        return S.count(\".\") + S.count(\"?\") + S.count(\"!\")\n    return 0"}
{"task_id": "HumanEval/92", "completion": "    if x + y == z or x + z == y or y + z == x:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    result = \"\"\n    vowels = \"aeiouAEIOU\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += char.swapcase()\n            else:\n                result += char.swapcase()\n        elif char in vowels:\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    digit_sum = 0\n    while largest_prime > 0:\n        digit_sum += largest_prime % 10\n        largest_prime = largest_prime // 10\n\n    return digit_sum"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    first_key = dict[list(dict.keys())[0]]\n    if first_key.islower() or first_key.isupper():\n        return all(k.islower() or k.isupper() for k in dict)\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "    prime_nums = []\n\tnum = 2\n\twhile len(prime_nums) < n:\n\t\tis_prime = True\n\t\tfor i in range(2, int(num ** 0.5) + 1):\n\t\t\tif num % i == 0:\n\t\t\t\tis_prime = False\n\t\t\t\tbreak\n\t\tif is_prime:\n\t\t\tprime_nums.append(num)\n\t\tnum += 1\n\treturn prime_nums"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    return int(value)"}
{"task_id": "HumanEval/100", "completion": "    result = [n]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            result.append(i + 1)\n        else:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0:\n        x += 1\n    while x < y:\n        if x % 2 == 0:\n            return x\n        x += 2\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = (n + m) // 2\n    return bin(average)"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for i in x:\n        if all(int(d) % 2 != 0 for d in str(i)):\n            result.append(i)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef by_value(arr):\n    return arr\n\ndef convertToNames(arr):\n    if not arr:\n        return []\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num))\n    return result\n\ndef sortAndReplace(arr):\n    result = []\n    arr.sort()\n    result = convertToNames(arr)\n    result.reverse()\n    return result"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    count = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            count += 1\n    return \"YES\" if count <= 1 else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    ans = dict()\n    test = test.split()\n    for t in test:\n        if t not in ans:\n            ans[t] = 1\n        else:\n            ans[t] += 1\n    for i in ans:\n        if ans[i] == max(ans.values()):\n            return {i: ans[i]}"}
{"task_id": "HumanEval/112", "completion": "    for i in range(len(c)):\n        s = s.replace(c[i], \"\")\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng 1 of the 1nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    # Start from the rightmost well\n    for i in range(len(grid)):\n        if grid[i][-1] == 1:\n            # If there is a well with water, then check for its capactiy\n            if capacity > 0:\n                # Add water from the well to the bucket\n                grid[i][-1] = 0\n                capacity -= 1\n    # Move to the leftmost well\n    for i in range(len(grid) - 1, -1, -1):\n        if grid[i][0] == 1:\n            # If there is a well with water, then check for its capactiy\n            if capacity > 0:\n                # Add water from the well to the bucket\n                grid[i][0] = 0\n                capacity -= 1\n    return math.ceil(capacity / bucket_capacity)"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    selected_words = [word for word in words if sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou') == n]\n    return selected_words"}
{"task_id": "HumanEval/118", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    last_vowel = -1\n    last_consonant = -1\n    \n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            last_vowel = i\n        else:\n            last_consonant = i\n            break\n    \n    return word[last_consonant + 1:last_vowel] if last_vowel != -1 else \"\""}
{"task_id": "HumanEval/119", "completion": "    for s in lst:\n        if s.count('(') != s.count(')'):\n            return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "    result = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            result += arr[i]\n    return result"}
{"task_id": "HumanEval/123", "completion": "    collatz = []\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([x for x in collatz if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    if date.strip() == '':\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12 or day < 1 or day > 31 or month == 2 and day < 1 or day > 29:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words\n\n\ndef count_odd_letters(txt):\n    odd_count = 0\n    for char in txt:\n        if char.islower() and ord(char) % 2 != 0:\n            odd_count += 1\n    return odd_count"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    x1, y1 = interval1\n    x2, y2 = interval2\n    \n    start = max(x1, x2)\n    end = min(y1, y2)\n    \n    length = end - start\n    if length <= 1:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    prod = 1\n    sum = 0\n    for i in arr:\n        prod *= abs(i)\n        if i > 0:\n            sum += i\n        elif i < 0:\n            sum -= i\n    return prod * sum"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    \n    def dfs(row, col, d, parent, visited):\n        if d == k:\n            return True\n        visited[row][col] = 1\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < n and 0 <= new_col < n and not visited[new_row][new_col]:\n                if dfs(new_row, new_col, d + 1, (row, col), visited):\n                    return True\n        visited[row][col] = 0\n        return False\n    \n    for i in range(n):\n        for j in range(n):\n            visited = [[0] * n for _ in range(n)]\n            if dfs(i, j, 1, (i, j), visited):\n                return visited[i][j]"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2]\n    else:\n        prev = tri(n-1)\n        curr = [1] * (n+1)\n        for i in range(2, n+1):\n            curr[i] = prev[i-1] + prev[i-2] + prev[i-3]\n        return curr"}
{"task_id": "HumanEval/131", "completion": "    if n == 0:\n        return 0\n    result = 1\n    while (n > 0):\n        digit = n % 10\n        if (digit % 2 != 0):\n            result *= digit\n        n = n // 10\n    return result"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    return sum(int(max(0, num))**2 for num in lst)"}
{"task_id": "HumanEval/134", "completion": "    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    return last_char.isalpha() and not last_char.isspace()"}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i - 1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    if not lst:\n        return None, None\n    \n    neg_nums = [n for n in lst if n < 0]\n    pos_nums = [n for n in lst if n > 0]\n    \n    if not neg_nums or not pos_nums:\n        return None, None\n    \n    return max(neg_nums), min(pos_nums)"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == str:\n        a = float(a.replace(',', '.'))\n    if type(b) == str:\n        b = float(b.replace(',', '.'))\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 == 1:\n        return False\n    if n <= 0:\n        return False\n    return (n-2) % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(' ', '_')\n    while '  ' in text:\n        text = text.replace('  ', '-')\n    return text"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3:\n        return \"No\"\n    if file_name.count('.') != 1:\n        return \"No\"\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return \"No\"\n    if not parts[0]:\n        return \"No\"\n    if not parts[1].lower() in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    total_sum = 0\n    for i in range(len(lst)):\n        if (i+1) % 3 == 0:\n            total_sum += lst[i]*lst[i]\n        elif (i+1) % 4 == 0 and (i+1) % 3 != 0:\n            total_sum += lst[i]*lst[i]*lst[i]\n    return total_sum"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    num1 = int(x)\n    num2 = int(n)\n    return (num1 * num2) % 1 == 0"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (str(num)[0] in \"13579\" and str(num)[-1] in \"13579\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(n):\n        count[i % 3] += 1\n    return count[0] * (count[0] - 1) * (count[0] - 2) // 6 + count[1] * count[2] * count[0] * (count[0] - 1) // 2"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        start = planets.index(planet1) + 1\n        end = planets.index(planet2)\n        return tuple(planets[i] for i in range(start, end))\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst)\n\n\ndef list_sort(lst):\n    return sorted(lst, key=lambda x: (-len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return \"Invalid input\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num * num\n    return total * 2"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    strengths = []\n    for ext in extensions:\n        if ext.islower():\n            strengths.append(0)\n        else:\n            strengths.append((len(ext) - len(ext.lower())) / len(ext))\n    strongest_index = strengths.index(max(strengths))\n    return class_name + '.' + extensions[strongest_index]"}
{"task_id": "HumanEval/154", "completion": "    return any(a.find(b[i:] + b[:i]) != -1 for i in range(len(b)))"}
{"task_id": "HumanEval/155", "completion": "    num_str = str(abs(num))\n    even_count = 0\n    odd_count = 0\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_map = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n    result = \"\"\n    for value, numeral in roman_map:\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(max_word, word)\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    left = remaining - eaten\n    return [eaten, left]"}
{"task_id": "HumanEval/160", "completion": "    operand.reverse()\n    stack = []\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack.append(operand.pop() + operand.pop())\n        elif operator[i] == '-':\n            stack.append(operand.pop() - operand.pop())\n        elif operator[i] == '*':\n            stack.append(operand.pop() * operand.pop())\n        elif operator[i] == '/':\n            stack.append(int(operand.pop() / operand.pop()))\n        elif operator[i] == '**':\n            stack.append(operand.pop() ** operand.pop())\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    res = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                res += char.upper()\n            else:\n                res += char.lower()\n        else:\n            res += char\n    return res[::-1]"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if text:\n        hash_md5 = hashlib.md5(text.encode()).hexdigest()\n        return hash_md5\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                continue\n            result.append(stack.pop())\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    def count_nested_parens(s: str) -> int:\n        count = 0\n        depth = 0\n        for char in s:\n            if char == '(':\n                count += 1\n                depth += 1\n            elif char == ')':\n                depth -= 1\n                count += 1\n        return count\n\n    result = []\n    for group in paren_string.split():\n        result.append(count_nested_parens(group))\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return list(filter(lambda s: substring in s, strings))"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "completion": "    rolling_maxes = []\n    max_so_far = float('-inf')\n    for number in numbers:\n        max_so_far = max(max_so_far, number)\n        rolling_maxes.append(max_so_far)\n    return rolling_maxes"}
{"task_id": "HumanEval/10", "completion": "    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(min(len(a), len(b))):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n\t\ta, b = b, a % b\n\treturn a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    if n == 0:\n        return '0'\n    else:\n        return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats_per_note = {'o': 4, 'o|': 2, '.|': 1}\n    beats = [beats_per_note[note] for note in music_string]\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    return \" \".join(sorted(numbers.split()))"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    minimum = min(numbers)\n    maximum = max(numbers)\n    return [(x - minimum) / (maximum - minimum) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    if n <= 2:\n        return 1\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/25", "completion": "    prime_factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            prime_factors.append(divisor)\n            n /= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                prime_factors.append(n)\n            break\n    return prime_factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]"}
{"task_id": "HumanEval/27", "completion": "    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        else:\n            flipped_string += char.lower()\n    return flipped_string"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [i for i in l if i > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero of a polynomial with coefficients xs.\n    return x such that poly(x) = 0.\n    \"\"\"\n    a = xs[-1]\n    b = 0\n    for i in range(len(xs) - 1, 0, -2):\n        a, b = b, a - b * xs[i]\n    return -b / a"}
{"task_id": "HumanEval/33", "completion": "    l' = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l'[i] = sorted(l[i])\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    unique_set = set()\n    for num in l:\n        unique_set.add(num)\n    return list(unique_set)"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded string using encode_cyclic function.\n    \"\"\"\n    encoded = encode_cyclic(s)\n    # return original string\n    return encoded[::3]"}
{"task_id": "HumanEval/39", "completion": "    a, b, c = 1, 1, 2\n    while c <= n:\n        if is_prime(c):\n            return c\n        a, b = b, c\n        c = a + b\n    return -1\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l)-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i+1, len(l)-1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [num + 1 for num in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        seen.add(x)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    res = \"\"\n    while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return res"}
{"task_id": "HumanEval/45", "completion": "    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 4\n        for _ in range(3, n+1):\n            a, b, c, d = b, c, d, a+b+c+d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    if n % 2 == 1:\n        return sorted(l)[n // 2]\n    else:\n        return (sorted(l)[n // 2 - 1] + sorted(l)[n // 2]) / 2.0"}
{"task_id": "HumanEval/48", "completion": "    return text.lower() == text[::-1].lower()"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    while n > 0:\n        result = (result * 2) % p\n        n = (n // 2) % p\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by -5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'AEIOUaeiou'\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    while(y != 0):\n\t\tcarry = x & y\n\t\tx = x ^ y\n\t\ty = carry << 1\n\treturn x"}
{"task_id": "HumanEval/54", "completion": "    if len(s0) != len(s1):\n        return False\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    a = 0\n\tb = 1\n\tfor i in range(n-1):\n\t\ta, b = b, a+b\n\treturn b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return False\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    return list(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * n\n    for i in range(1, n):\n        result[i] = result[i - 1] + (i * xs[i])\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n    a, b, c = 0, 1, 1\n    for _ in range(3, n+1):\n        a, b, c = c, a + b + c, c\n    return c"}
{"task_id": "HumanEval/64", "completion": "    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    if shift < 0:\n        shift = shift % len(str(x))\n    return str(x)[-shift:] + str(x)[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    s1=s.split()\n    apples=int(s1[0])\n    oranges=int(s1[1])\n    mangoes=n-apples-oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    smallest_even = float('inf')\n    smallest_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_even:\n            smallest_even = arr[i]\n            smallest_index = i\n    return [smallest_even, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    return [lst[i] for i in range(len(lst)) if (i % 2 == 0) or (i % 2 == 1 and lst[i] % 2 != 0)]"}
{"task_id": "HumanEval/71", "completion": "    if (a + b > c and a + c > b and b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if sum(q)>w:\n        return False\n    return q==q[::-1]"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    cnt = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            cnt += 1\n    return cnt"}
{"task_id": "HumanEval/74", "completion": "    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n        return lst1\n    return lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, a):\n                if a % j == 0:\n                    for k in range(2, a):\n                        if a % k == 0:\n                            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if n == 1:\n        return x == 1\n    elif x == 1:\n        return True\n    elif x < 1:\n        return False\n    else:\n        return is_simple_power(x//n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    else:\n        cube_root = round(a ** (1 / 3))\n        return cube_root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    result = 0\n    for i in range(len(num)):\n        if num[i] in ['2', '3', '5', '7']:\n            result += 1\n        elif num[i] in ['B', 'D']:\n            result += 1\n        elif num[i] in ['0', 'A', 'C', 'E', 'F']:\n            pass\n    return result"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db00db\"\n    else:\n        binary = bin(decimal)[2:]\n        return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    if grades < 1.0:\n        return 'F'\n    elif grades < 1.7:\n        return 'E'\n    elif grades < 2.3:\n        return 'D'\n    elif grades < 3.0:\n        return 'C'\n    elif grades < 3.7:\n        return 'B'\n    elif grades < 4.3:\n        return 'A'\n    else:\n        return 'A+'"}
{"task_id": "HumanEval/82", "completion": "    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    first = 10 ** (n - 1)\n    last = 10 ** n - 1\n    count = 0\n    for i in range(first, last + 1):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "    return bin(N).lstrip('0b').rjust(8, '0')"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "    coordinates = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            coordinates.append((i, lst[i].index(x)))\n    coordinates.sort(key=lambda k: (k[0], -k[1]))\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = ''\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - 97 + 2 * 2) % 26) + 97)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i] == 'I':\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    return (x == y + z) or (y == x + z) or (z == x + y)"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'AEIOUaeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += chr(ord(char) + 26)\n            elif char.islower():\n                encoded_message += chr(ord(char) + 26)\n            elif char in vowels:\n                encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if isPrime(num) and num > max_prime:\n            max_prime = num\n    \n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    case = keys[0].isupper()\n    for key in keys:\n        if key.isupper() != case:\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    if n < 2:\n        return []\n    result = [2]\n    i = 3\n    while len(result) < n:\n        if all(i % j != 0 for j in range(2, int(i ** 0.5) + 1)):\n            result.append(i)\n        i += 2\n    return result"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOUaeiou\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            if s[i].isupper():\n                count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    try:\n        num = float(value)\n        if num >= 0:\n            return int(num + 0.5)\n        else:\n            return int(num - 0.5)\n    except ValueError:\n        return None"}
{"task_id": "HumanEval/100", "completion": "    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            pile.append(pile[i-1] + 2)\n        else:\n            pile.append(pile[i-1] + 1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.split(\", \")"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y)\n    elif x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "    res = []\n    for i in x:\n        temp = i\n        while (temp != 0):\n            digit = temp % 10\n            if (digit % 2 == 0):\n                break\n            res.append(i)\n            i = i - 1\n            temp = temp // 10\n    res.sort()\n    return res"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len, reverse=True)\n\ndef by_name(arr):\n    return [str(num) for num in arr]\n\ndef sortAndName(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num))\n    result.sort()\n    result.reverse()\n    return by_name(result)"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if int(str(i)[-1]) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n        digit_sum = sum(int(digit) for digit in str(num))\n        if digit_sum > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))"}
{"task_id": "HumanEval/110", "completion": "    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n    for num in lst2:\n        if num % 2 == 0:\n            even_count -= 1\n    if even_count == 0:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    if len(test) == 0:\n        return {}\n    counts = {}\n    for char in test.split():\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    max_count = max(counts.values())\n    result = {char: count for char, count in counts.items() if count == max_count}\n    return result"}
{"task_id": "HumanEval/112", "completion": "    for char in c:\n        s = s.replace(char,'')\n    return s[::-1], s == s[::-1]\n\nprint(reverse_delete(\"abcde\", \"ae\"))  # Output: ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))  # Output: ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # Output: ('cdedc', True)"}
{"task_id": "HumanEval/113", "completion": "    return [f\"the number of odd elements {' '.join(str(len(filter(lambda x: int(x) % 2 != 0, str(s))))} in the string {i} of the input.\" for i, s in enumerate(lst)]"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    m = len(grid)\n    n = len(grid[0])\n    \n    max_water = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                water = capacity\n                water_filled = min(capacity, grid[i][j])\n                for x in range(i, m):\n                    for y in range(j, n):\n                        if grid[x][y] == 1:\n                            water -= min(water, grid[x][y])\n                            water_filled -= min(water, grid[x][y])\n                            if water_filled == 0:\n                                return math.ceil((i - x) * (j - y))\n    \n    return 0"}
{"task_id": "HumanEval/116", "completion": "    def ones_count(n):\n        return bin(n).count('1')\n    return sorted(arr, key=lambda x: (ones_count(x), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for letter in word if letter not in 'aeiouAEIOU') == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    last_vowel = \"\"\n    last_consonant = \"\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i].lower() in vowels:\n            last_vowel = word[i]\n            last_consonant = word[i - 1]\n            break\n    if not last_vowel:\n        return \"\"\n    else:\n        for i in range(len(word) - 1, -1, -1):\n            if word[i].lower() in vowels and word[i - 1].lower() != last_consonant:\n                return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    open_count = 0\n    close_count = 0\n    for s in lst:\n        for c in s:\n            if c == '(':\n                open_count += 1\n            elif c == ')':\n                close_count += 1\n    return 'Yes' if open_count == close_count else 'No'"}
{"task_id": "HumanEval/120", "completion": "    if not arr or k <= 0:\n        return []\n    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) > 2:\n            sum += arr[i]\n        else:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 != 0:\n            result.append(n)\n        n = (n // 2) if n % 2 == 0 else (n * 3 + 1)\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "    if len(date)<8:\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    if int(month) < 1 or int(month) > 12:\n        return False\n    if int(day) < 1 or int(day) > 31:\n        return False\n    if int(day) < 1 or int(day) > 30:\n        return False\n    if int(day) < 1 or int(day) > 29:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words\n\n\ndef count_lower_case_odd(txt):\n    count = 0\n    for char in txt:\n        if ord(char) % 2 != 0 and char.islower():\n            count += 1\n    return count"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start >= end:\n        return \"NO\"\n    else:\n        return \"YES\" if isPrime(end - start) else \"NO\"\n\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product_signs = 1\n    magnitude_sum = 0\n    for num in arr:\n        product_signs *= 1 if num >= 0 else -1 if num < 0 else 0\n        magnitude_sum += abs(num)\n    return magnitude_sum * product_signs"}
{"task_id": "HumanEval/129", "completion": "    def backtrack(x, y, visited, path):\n        if len(path) == k:\n            return path\n        visited.add((x, y))\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited:\n                result = backtrack(nx, ny, visited, path + [grid[nx][ny]])\n                if result:\n                    return result\n        visited.remove((x, y))\n        return None\n\n    N = len(grid)\n    return backtrack(0, 0, set(), [])"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [3]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        arr = [1, 3, 2]\n        for i in range(3, n+1):\n            arr.append(arr[i-1] + arr[i-2] + arr[i-3])\n        return arr"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if stack[-1] == '[':\n                return True\n            else:\n                stack.pop()\n    return False"}
{"task_id": "HumanEval/133", "completion": "    return sum(int(x)**2 for x in lst)"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    last_char = txt[-1].lower()\n    return last_char.isalpha() and last_char not in words[-1]"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] < arr[i + 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg = None\n    pos = None\n    for num in lst:\n        if num < 0 and neg is None:\n            neg = num\n        elif num > 0 and pos is None:\n            pos = num\n    if neg is None and pos is None:\n        return (None, None)\n    elif neg is None:\n        return (pos, None)\n    elif pos is None:\n        return (None, neg)\n    else:\n        return (neg, pos)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    for i in range(2, n - 1):\n        if (n - i*i) % 2 == 0 and (n - i*i)//2 % 2 == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(' ', '_')"}
{"task_id": "HumanEval/141", "completion": "    file_name_parts = file_name.split('.')\n    if len(file_name_parts) == 2 and file_name_parts[0] and file_name_parts[1] in ['txt', 'exe', 'dll']:\n        return \"Yes\"\n    return \"No\""}
{"task_id": "HumanEval/142", "completion": "    return sum(lst[i] ** 2 if i % 3 == 0 else lst[i] for i in range(len(lst)))"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "completion": "    fraction_x = x.split('/')\n    fraction_n = n.split('/')\n    numerator_x = int(fraction_x[0])\n    denominator_x = int(fraction_x[1])\n    numerator_n = int(fraction_n[0])\n    denominator_n = int(fraction_n[1])\n    numerator = numerator_x * numerator_n\n    denominator = denominator_x * denominator_n\n    return numerator == denominator"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    return sorted(nums, key=lambda num: (sum_of_digits(num), nums.index(num)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count_0, count_1, count_2 = [0]*3\n    \n    for i in range(1, n+1):\n        count_0 += (i+1)%3\n        count_1 += (i+2)%3\n        count_2 += (i+3)%3\n    \n    return count_0 * (count_0 - 1) * (count_0 - 2) // 6 + count_1 * (count_1 - 1) * (count_1 - 2) // 6 + count_2 * (count_2 - 1) * (count_2 - 2) // 6"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        i1 = planets.index(planet1)\n        i2 = planets.index(planet2)\n        if i1 < i2:\n            return tuple(planets[i1:i2+1])\n        else:\n            return tuple(planets[i2:i1+1])\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))\n\ndef list_sort(lst):\n    return sorted_list_sum(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    if not lst:\n        return 0\n    return sum(x*x for x in lst if isinstance(x, int) and x > 0)"}
{"task_id": "HumanEval/152", "completion": "    return [abs(x-y) for x,y in zip(game, guess)]"}
{"task_id": "HumanEval/153", "completion": "    def get_strength(extension):\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        return cap - sm\n\n    strongest_extension = max(extensions, key=get_strength)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "    if len(a)<len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:i+len(b)]==b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    result = ''\n    for numeral, letter in sorted(roman_numerals.items(), reverse=True):\n        while number >= numeral:\n            result += letter\n            number -= numeral\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n            \n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + need\n    carrots_left = remaining - total_eaten if remaining > total_eaten else 0\n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    operand = operand[1:]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand.pop(0)\n        elif operator[i] == '-':\n            result -= operand.pop(0)\n        elif operator[i] == '*':\n            result *= operand.pop(0)\n        elif operator[i] == '/':\n            result //= operand.pop(0)\n        elif operator[i] == '**':\n            result **= operand.pop(0)\n    return result"}
{"task_id": "HumanEval/161", "completion": "    stack = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                stack.append(char.upper())\n            else:\n                stack.append(char.lower())\n        else:\n            stack.append(char)\n    result = \"\"\n    for char in stack:\n        result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    hash_object = hashlib.md5(text.encode())\n    return hash_object.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    even_digits = [int(digit) for digit in str(a) if int(digit) % 2 == 0]\n    even_digits.sort()\n    result = []\n    for i in range(len(even_digits)):\n        if even_digits[i] < b:\n            result.append(even_digits[i])\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n                groups.append(''.join(stack))\n    return groups"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            return True\n        balance += operation\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    levels = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(0)\n        elif char == ')':\n            if len(stack) > 0:\n                stack[-1] += 1\n            else:\n                levels.append(len(stack))\n    return levels"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for num in numbers:\n        product_of_numbers *= num\n    return (sum_of_numbers, product_of_numbers)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    # Find the longest postfix of supplied string that is a palindrome\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string"}
{"task_id": "HumanEval/11", "completion": "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "    result = \"\"\n    for i in range(n + 1):\n        result += str(i) + \" \"\n    return result.strip()"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats_per_note = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    for note in music_string.split():\n        beats = beats_per_note[note]\n        result.append(beats)\n    return result"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    n = len(string)\n    m = len(substring)\n    if m == 0:\n        return count\n    if n == 0:\n        return 0\n    if string[:m] == substring:\n        count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    nums = [int(num) for num in numbers.split()]\n    nums.sort()\n    return ' '.join(str(num) for num in nums)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    result = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    largest = 0\n    for i in range(1, n):\n        if n % i == 0:\n            largest = i\n    return largest"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]"}
{"task_id": "HumanEval/27", "completion": "    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return ''\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [i for i in l if i > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Find the zero point of polynomial by using bisection method.\n    Returns the zero point of the polynomial, or -1 if there is no solution.\n    \"\"\"\n    n = len(xs)\n    if n % 2 == 0:\n        start = 0\n        end = 1\n        while start <= end:\n            mid = (start + end) / 2\n            if math.isclose(poly(xs, mid), 0, rel_tol=1e-9):\n                return mid\n            elif poly(xs, mid) < 0:\n                start = mid\n            else:\n                end = mid\n    return -1"}
{"task_id": "HumanEval/33", "completion": "    new_list = []\n    for i in range(len(l)):\n        if (i+1) % 3 != 0:\n            new_list.append(l[i])\n        else:\n            new_list.append(l[i])\n    return new_list"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    return [x if i % 2 != 0 else sorted([y for y in l[i::2] if y == l[i]][0]) for i, x in enumerate(l)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join each group into a string.\n    decoded = \"\".join(groups)\n    return decoded"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    count = 0\n    while True:\n        if is_prime(b) and b == (a + b):\n            count += 1\n            if count == n:\n                return b\n        a, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [i + 1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        a, b, c, d = 1, 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    if text == text[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n        return 1\n    res = 1\n    while n > 0:\n        if n % 2 == 1:\n            res = (res * 2) % p\n        n = n // 2\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by -5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join([c for c in text if c not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack or stack.pop() != \"<\":\n                return False\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            increasing = False\n        if l[i] < l[i+1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    if n <= 1:\n        return \"Not a natural number\"\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i:\n            i += 2\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    if len(xs) < 2:\n        return xs\n    return [xs[i] * i for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b + b\n    return a"}
{"task_id": "HumanEval/64", "completion": "    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)  # Handle shift larger than number of digits\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[1])\n    total = int(s.split()[2])\n    return total - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    \n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_even_value:\n            smallest_even_value = arr[i]\n            smallest_even_index = i\n    \n    return [smallest_even_value, smallest_even_index]"}
{"task_id": "HumanEval/69", "completion": "    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for num in sorted(count, reverse=True):\n        if count[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) == 0:\n        return lst\n    min_val = min(lst)\n    max_val = max(lst)\n    return [min_val] + [max_val] * (len(lst) - 2) + [min_val]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    return sum(q) <= w and q == q[::-1]"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    diff_count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n - i - 1]:\n            diff_count += 1\n    return diff_count"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    primes = []\n\tfor num in range(2, a):\n\t\tif all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n\t\t\tprimes.append(num)\n\tfor i in range(len(primes)):\n\t\tfor j in range(i, len(primes)):\n\t\t\tfor k in range(j, len(primes)):\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a:\n\t\t\t\t\treturn True\n\treturn False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    root = int(a ** (1 / 3))\n    return root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    result = 0\n    for i in range(len(num)):\n        result += int(num[i], 16)\n    return result\n\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef countPrimes(num):\n    result = 0\n    num = hex_key(num)\n    while num:\n        digit = num % 10\n        if digit == 2 or digit == 3 or digit == 5 or digit == 7:\n            result += 1\n        num = num // 10\n    return result"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    if len(string) < 2:\n        return False\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    return 10 ** (n - 1) + 9 ** (n - 1)"}
{"task_id": "HumanEval/84", "completion": "    count = 0\n\twhile (N > 0):\n\t\tN = N // 2\n\t\tcount += 1\n\treturn bin(count)[2:]"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    def anti_shuffle_word(word):\n        return ''.join(sorted(word))\n\n    return ' '.join(anti_shuffle_word(w) for w in s.split())"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result)"}
{"task_id": "HumanEval/88", "completion": "    return sorted(array, reverse=False) if (array[0]+array[-1])%2==0 else sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            new_char = chr((ord(char) - ord('a') + 2*2) % 26 + ord('a'))\n            result += new_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = lst[0]\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "    S = S.split()\n    count = 0\n    for i in range(len(S)):\n        if S[i] == \"I\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or x == y - z or x == z - y or y == z - x:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += chr(ord(char) + 1).upper()\n            elif char.islower():\n                encoded_message += chr(ord(char) + 1).lower()\n            else:\n                encoded_message += char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in lst if isPrime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    sum_of_digits = sum([int(digit) for digit in str(largest_prime)])\n    return sum_of_digits"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    for key in dict:\n        if not (isinstance(key, str) and key.islower() or isinstance(key, str) and key.isupper()):\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a%10)*(b%10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    value = float(value)\n    if value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i*2)\n        else:\n            result.append(i*2-1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    if ',' in s:\n        return s.split(',')\n    elif ' ' in s:\n        return s.split(' ')\n    else:\n        return [s]"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0 or y % 2 != 0:\n        return -1\n    if x > y:\n        x, y = y, x\n    return y"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = (n + m) // 2 * (m - n + 1) // 2\n    return bin(round(total / (m - n + 1)))"}
{"task_id": "HumanEval/104", "completion": "    unique = set()\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            unique.add(num)\n    return sorted(list(unique))"}
{"task_id": "HumanEval/105", "completion": "    if not arr:\n        return []\n    arr.sort()\n    return arr\n\n\ndef by_digits(arr):\n    if not arr:\n        return []\n    arr.sort()\n    return arr\n\n\ndef getName(n):\n    names = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five',\n             6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    return names[n]\n\n\ndef replaceName(arr):\n    if not arr:\n        return []\n    arr.sort()\n    return [getName(num) for num in arr]"}
{"task_id": "HumanEval/106", "completion": "    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum_of_numbers(i))\n    return res\n\ndef sum_of_numbers(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)"}
{"task_id": "HumanEval/107", "completion": "    def isPalindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if isPalindrome(i) and i % 2 == 0:\n            even_count += 1\n        elif isPalindrome(i) and i % 2 != 0:\n            odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))"}
{"task_id": "HumanEval/110", "completion": "    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    for letter in test.split():\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    max_count = max(count.values())\n    return {letter: count[letter] for letter in count if count[letter] == max_count}"}
{"task_id": "HumanEval/112", "completion": "    to_remove = set(c)\n    res = \"\"\n    for char in s:\n        if char not in to_remove:\n            res += char\n    return res, res == res[::-1]\n\n# Example Usage\nprint(reverse_delete(\"abcdef\", \"a\"))"}
{"task_id": "HumanEval/113", "completion": "    res = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        res.append(f\"the number of odd elements {count} in the string {s}\")\n    return res"}
{"task_id": "HumanEval/114", "completion": "    min_sum = nums[0]\n    current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    m, n = len(grid), len(grid[0])\n    if m < 1 or n < 1:\n        return 0\n    \n    max_dist = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                max_dist = max(max_dist, math.sqrt(i**2 + j**2))\n    \n    return int(math.ceil(max_dist / capacity))"}
{"task_id": "HumanEval/116", "completion": "    def count_ones(x):\n        count = 0\n        while x > 0:\n            if x % 2 == 1:\n                count += 1\n            x //= 2\n        return count\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if len([c for c in word if c.isalpha() and c.lower() not in ['a', 'e', 'i', 'o', 'u']]) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    last_consonant_index = -1\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels:\n            last_consonant_index = i\n            break\n    if last_consonant_index == -1:\n        return \"\"\n    for i in range(last_consonant_index + 1, len(word)):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        if not s:\n            continue\n        if s[0] == ')':\n            if not stack or stack.pop() != '(':\n                return 'No'\n        else:\n            stack.append(s)\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    if k >= len(arr):\n        return arr\n    left = 0\n    right = k - 1\n    while left < right:\n        while left < right and arr[left] >= arr[left + 1]:\n            left += 1\n        while left < right and arr[right] <= arr[right - 1]:\n            right -= 1\n        if left < right:\n            arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/122", "completion": "    result = 0\n    for i in range(k):\n        if arr[i] < 100:\n            result += arr[i]\n        else:\n            break\n    return result"}
{"task_id": "HumanEval/123", "completion": "    seq = []\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = n*3 + 1\n        seq.append(n)\n    return sorted([x for x in seq if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    if not date_parts[0].isdigit() or not date_parts[1].isdigit() or not date_parts[2].isdigit():\n        return False\n    if int(date_parts[0]) < 1 or int(date_parts[0]) > 12:\n        return False\n    if int(date_parts[1]) < 1 or int(date_parts[1]) > 31:\n        return False\n    if int(date_parts[2]) < 1 or int(date_parts[2]) > 31:\n        return False\n    if int(date_parts[1]) < 1 or int(date_parts[1]) > 30:\n        return False\n    if int(date_parts[2]) < 1 or int(date_parts[2]) > 30:\n        return False\n    if int(date_parts[1]) < 1 or int(date_parts[1]) > 29:\n        return False\n    if int(date_parts[2]) < 1 or int(date_parts[2]) > 31:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if not txt:\n        return []\n    if ' ' in txt:\n        return txt.split()\n    else:\n        return [word for word in txt.split(',') if word]"}
{"task_id": "HumanEval/126", "completion": "    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start < end:\n        intersection_length = end - start\n        return \"YES\" if intersection_length > 1 and intersection_length <= 1000 else \"NO\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    n = len(arr)\n    res = 1\n    for num in arr:\n        if num == 0:\n            res *= 0\n        elif num > 0:\n            res *= 1\n        else:\n            res *= -1\n    return abs(sum(arr)) * res"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    dp = [[float('inf')] * m for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(m):\n            for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                if 0 <= x < n and 0 <= y < m:\n                    dp[i][j] = min(dp[i][j], dp[x][y] + 1)\n    path = []\n    i, j = n-1, m-1\n    while i > 0 or j > 0:\n        path.append(grid[i][j])\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= x < n and 0 <= y < m:\n                if dp[i][j] == dp[x][y] + 1:\n                    i, j = x, y\n                    break\n    path.reverse()\n    return path"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n    if n == 3:\n        return [1, 3, 2]\n    trib = [1, 3, 2]\n    for i in range(3, n):\n        if i % 2 == 0:\n            trib.append(trib[i//2 - 1] + trib[i//2])\n        else:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i + 1])\n    return trib"}
{"task_id": "HumanEval/131", "completion": "    if n == 0:\n        return 1\n    \n    odd_product = 1\n    while n > 0:\n        if n % 2 != 0:\n            odd_product *= n % 10\n        n //= 10\n    \n    return odd_product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "    sum_squares = 0\n    for num in lst:\n        sum_squares += int(num) ** 2\n    return sum_squares"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if not words:\n        return False\n    last_word = words[-1]\n    if len(last_word) == 1:\n        return last_word.isalpha()\n    else:\n        return not last_word.isalpha()"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    \n    if not neg or not pos:\n        return (None, None)\n    \n    return (max(neg), min(pos))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        return max(a, b)\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    if n == 0 or n == 2:\n        return True\n    return (n == 2) or ((n % 2 == 0) and (n >= 4))"}
{"task_id": "HumanEval/139", "completion": "    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact"}
{"task_id": "HumanEval/140", "completion": "    res = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] == \" \":\n            res += \"_\"\n            i += 1\n        elif text[i:i+2] == \"  \":\n            res += \"-\"\n            i += 2\n        else:\n            res += text[i]\n            i += 1\n    return res"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) <= 3 and '.' in file_name:\n        name_parts = file_name.split('.')\n        if len(name_parts) != 2:\n            return \"Invalid filename\"\n        else:\n            before_dot, after_dot = name_parts\n            if len(before_dot) == 0 or not before_dot[0].isalpha():\n                return \"Invalid filename\"\n            if after_dot not in ['txt', 'exe', 'dll']:\n                return \"Invalid filename\"\n    return \"Invalid filename\""}
{"task_id": "HumanEval/142", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if (i % 3 == 0) and (i % 4 != 0):\n            lst[i] **= 2\n        elif (i % 4 == 0) and (i % 3 == 0):\n            lst[i] **= 3\n        elif (i % 3 != 0) and (i % 4 != 0):\n            pass\n        sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "    if int(x) * int(n) == float(x) * float(n):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    if not nums:\n        return []\n    \n    def get_digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (get_digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    for num in a:\n        count[num % 3] += 1\n    return (count[0] * (count[0] - 1)) // 2 + (count[1] * (count[1] - 1)) // 2 + (count[2] * (count[2] - 1)) // 2"}
{"task_id": "HumanEval/148", "completion": "    planets = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    orbits = list(planets.values())\n    start = orbits.index(planets[planet1])\n    end = orbits.index(planets[planet2])\n    \n    result = []\n    for i in range(start + 1, end):\n        result.append(planets.keys()[orbits.index(i)])\n    \n    return tuple(sorted(result))"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))\n\ndef list_sort(words: list) -> list:\n    return sorted_list_sum(words)"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "    res = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            res.append(0)\n        else:\n            res.append(abs(game[i] - guess[i]))\n    return res"}
{"task_id": "HumanEval/153", "completion": "    strongest = \"\"\n    strongest_strength = -1\n    \n    for ext in extensions:\n        cap_count = 0\n        sm_count = 0\n        for letter in ext:\n            if letter.isupper():\n                cap_count += 1\n            else:\n                sm_count += 1\n        \n        strength = cap_count - sm_count\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest = f\"{class_name}.{ext}\"\n    \n    return strongest"}
{"task_id": "HumanEval/154", "completion": "    return any(b[i:j] in a for i in range(len(b)) for j in range(i+1, len(b)+1))"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError(\"Input must be a positive integer between 1 and 1000\")\n    \n    roman_map = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n    result = ''\n    for value, symbol in roman_map:\n        while number >= value:\n            result += symbol\n            number -= value\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "    if a > b + c or b > a + c or c > a + b:\n        return False\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    if eaten <= remaining:\n        return [eaten, remaining - eaten]\n    else:\n        return [eaten, remaining]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operand)):\n        stack.append(operand[i])\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack[-1] += stack.pop()\n        elif operator[i] == '-':\n            stack[-1] -= stack.pop()\n        elif operator[i] == '*':\n            stack[-1] *= stack.pop()\n        elif operator[i] == '/':\n            stack[-1] //= stack.pop()\n        elif operator[i] == '**':\n            stack[-1] **= stack.pop()\n    return stack[-1]"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash"}
{"task_id": "HumanEval/163", "completion": "    def is_even_digit(x):\n        return x % 2 == 0\n\n    result = []\n    for num in range(a, b + 1):\n        if is_even_digit(num) and is_even_digit(num):\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for paren in paren_string:\n        if paren == '(':\n            stack.append('(')\n        elif paren == ')':\n            stack.pop()\n            if not stack:\n                result.append('')\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    return result[:-1]"}
{"task_id": "HumanEval/6", "completion": "    nested_levels = []\n    for paren_group in paren_string.split():\n        max_depth = 0\n        for paren in paren_group:\n            if paren == '(':\n                max_depth += 1\n            elif paren == ')':\n                max_depth -= 1\n        nested_levels.append(max_depth)\n    return nested_levels"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    product = 1\n    total_sum = 0\n    for num in numbers:\n        product *= num\n        total_sum += num\n    return (total_sum, product)"}
{"task_id": "HumanEval/9", "completion": "    rolling_max_list = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        rolling_max_list.append(current_max)\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Make the supplied string a palindrome \"\"\"\n    n = len(string)\n    for i in range(n, 0, -1):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            return string + suffix[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(min(len(a), len(b))):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(map(str, range(n+1)))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    beats_per_note = {'o': 4, 'o|': 2, '.'|': 1}\n    beats = [beats_per_note[char] for char in music_string]\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = [number_dict[num] for num in numbers.split()]\n    nums.sort()\n    return ' '.join(str(num) for num in nums)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    closest_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < closest_diff:\n            closest_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [v for v in values if isinstance(v, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/25", "completion": "    result = []\n    divisor = 2\n    while (divisor * divisor <= n):\n        if (n % divisor == 0):\n            while (n % divisor == 0):\n                n /= divisor\n            result.append(divisor)\n        else:\n            divisor += 1\n    if (n > 1):\n        result.append(n)\n    return result"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0 or n %(i + 2) == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Find zero point of polynomial with coefficients xs.\n    Return one zero point only if there are multiple zero points.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        return \"Coefficients list should have an even number of coefficients\"\n    \n    xs_even = [x for x in xs if x % 2 == 0]\n    if xs_even:\n        zero_point = xs_even[0] / 2\n        return zero_point\n    else:\n        return \"No zero point found\""}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l' = [0]*n\n    for i in range(n):\n        if (i+1)%3!=0:\n            l'[i] = l[i]\n        else:\n            l'[i] = sorted([l[i], l[i+1], l[i+2]])[0]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    result = []\n    for i in l:\n        if i not in result:\n            result.append(i)\n    return sorted(result)"}
{"task_id": "HumanEval/35", "completion": "    max = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max:\n            max = l[i]\n    return max"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            while i > 0:\n                if i % 10 == 7:\n                    count += 1\n                i //= 10\n    return count"}
{"task_id": "HumanEval/37", "completion": "    even = [l[i] for i in range(0, len(l), 2)]\n    even.sort()\n    for i in range(0, len(l), 2):\n        l[i] = even.pop(0)\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return []\n        if n == 1:\n            return [1]\n        elif n == 2:\n            return [1, 1]\n        else:\n            result = [1, 1]\n            while len(result) < n:\n                next_num = result[-1] + result[-2]\n                result.append(next_num)\n            return result\n\n    fib_nums = fibonacci(n)\n    for num in fib_nums:\n        if is_prime(num):\n            return num\n    return -1"}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [i + 1 for i in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        seen.add(x)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x < 0:\n        return \"-\" + change_base(-x, base)\n    if x < base:\n        return str(x)\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    fib = [0, 0, 2]\n    for _ in range(3, n + 1):\n        fib.append(fib[-1] + fib[-2] + fib[-3] + fib[-4])\n    return fib[n]"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]"}
{"task_id": "HumanEval/48", "completion": "    text = text.lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by -5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack.pop() != '<':\n                return False\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 3:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(int(n ** 0.5), 1, -1):\n        if n % i == 0:\n            return max(i, largest_prime_factor(n // i))\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    if len(xs) < 2:\n        return [0] * len(xs)\n    return [xs[i] * (i + 1) for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    a, b, c = 0, 1, 1\n    for _ in range(2, n+1):\n        a, b, c = b, c, a+b+c\n    \n    return c"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    num_len = len(num_str)\n    shift = shift % num_len\n    return num_str[num_len - shift:] + num_str[:num_len - shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split(' and '))\n    total_fruits = apples + oranges\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if len(arr) == 0:\n        return []\n    min_even = float('inf')\n    min_even_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            min_even_index = i\n    return [min_even, min_even_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    return [lst[0]] + strange_sort_list(lst[1:][::-1]) + [lst[-1]]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    def is_palindrome(lst):\n        return lst == lst[::-1]\n    \n    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    left = [0] * n\n    right = [0] * n\n    for i in range(n):\n        left[i] = right[n - 1 - i] = i\n        j = i\n        while j > 0 and arr[j] == arr[j - 1]:\n            j -= 1\n        k = n - 1 - j\n        while k < n and arr[k] == arr[k + 1]:\n            k += 1\n        if j > 0 and k < n:\n            return 1\n    return 0"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    if a < 3:\n        return False\n    if a == 3:\n        return True\n    for i in range(2, a//3 + 1):\n        if a % i == 0:\n            for j in range(i, a//i + 1):\n                if a % (i*j) == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x < n:\n        return False\n    while (x % n == 0):\n        x = x // n\n    return x == 1"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return True\n    for i in range(1, int(a ** (1 / 3)) + 1):\n        if i ** 3 == a:\n            return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "    hex_key = 0\n    for digit in num:\n        if digit.isdigit():\n            hex_key += 1\n        elif digit.isupper():\n            hex_key += 1\n    return hex_key\n\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    \n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef countPrimeDigits(num):\n    count = 0\n    hex_key = hex_key(num)\n    for i in range(1, hex_key+1):\n        if isPrime(i) and i < 16:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    return \"db\" + bin(decimal)[2:] + \"db\""}
{"task_id": "HumanEval/80", "completion": "    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.3:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('F')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return 1 + starts_one_ends(n - 1) + starts_one_ends(n - 2)"}
{"task_id": "HumanEval/84", "completion": "    total_sum = 0\n    while N:\n        total_sum += N % 2\n        N = N // 2\n    return bin(total_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/86", "completion": "    return ' '.join(''.join(sorted(word)) for word in s.split())"}
{"task_id": "HumanEval/87", "completion": "    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda x: (x[0], -lst[x[0]][x[1]]))\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "    if len(array) <= 1:\n        return array\n    mid = len(array) // 2\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array[:mid]) + sorted(array[mid:], reverse=True)\n    else:\n        return sorted(array[:mid]) + sorted(array[mid:], reverse=True)"}
{"task_id": "HumanEval/89", "completion": "    return ''.join(chr((ord(c) - ord('a') + 2) % 26 + ord('a')) for c in s)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for i in range(len(S)):\n        if S[i] == 'I':\n            j = i+1\n            while j < len(S) and (S[j] == '.' or S[j] == '?' or S[j] == '!'):\n                j += 1\n            if j < len(S) and S[j] == '.':\n                count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    return (x + y == z) and (x + z == y) and (y + z == x) and (x, y, z) == (int(x), int(y), int(z))"}
{"task_id": "HumanEval/93", "completion": "    encoded = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded += char.upper()\n            else:\n                encoded += char.lower()\n            encoded = encoded[:encoded.index(char)] + chr(ord(char) + 2) + encoded[encoded.index(char) + 1:]\n        else:\n            encoded += char\n    return encoded"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    largest_prime = None\n    for num in lst:\n        if isPrime(num):\n            largest_prime = num\n    \n    if largest_prime is None:\n        return 0\n    \n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower() or key.isupper():\n            continue\n        else:\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = set('AEIOUaeiou')\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels and s[i].isupper())"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == int(num):\n        return int(num)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    if n == 1:\n        return [1]\n    else:\n        result = [n]\n        next_level = n + 1 if n % 2 != 0 else n + 2\n        result.append(next_level)\n        return result"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x - 1, -2):\n        if i >= x and i <= y:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = (n + m) / 2\n    rounded_average = round(average)\n    return bin(rounded_average)"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        while n:\n            if n % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    \n    result = []\n    for num in x:\n        if not has_even_digit(num):\n            result.append(num)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef by_digit(arr):\n    for num in arr:\n        if (1 <= num <= 9):\n            return num\n    return None\n\ndef by_name(arr):\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n\ndef sortAndReplace(arr):\n    return by_name([by_length(arr), by_digit(arr), by_name(arr)])"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(i*(i+1)//2)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if abs(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    arr.sort()\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] + 1 == arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for x in lst1 if x % 2 == 0)\n    odd_count = len(lst1) - even_count\n    \n    even_count_2 = sum(1 for x in lst2 if x % 2 == 0)\n    odd_count_2 = len(lst2) - even_count_2\n    \n    if even_count != even_count_2:\n        return \"NO\"\n    \n    exchange_possible = (even_count - odd_count) == (even_count_2 - odd_count_2)\n    return \"YES\" if exchange_possible else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    letter_count = {}\n    max_count = 0\n    max_letters = set()\n    for letter in test.split():\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n        if letter_count[letter] > max_count:\n            max_count = letter_count[letter]\n            max_letters = {letter}\n        elif letter_count[letter] == max_count:\n            max_letters.add(letter)\n    return dict(zip(max_letters, [max_count] * len(max_letters)))"}
{"task_id": "HumanEval/112", "completion": "    result = ''.join(c for c in s if c not in c)\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count} in the string {s}\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    max_water = 0\n    for row in grid:\n        max_water = max(max_water, sum(row))\n    return math.ceil(max_water / capacity)"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        count = sum(1 for letter in word if letter.lower() not in 'aeiou')\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1, 1, -1):\n        if word[i] in vowels and word[i-2] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            else:\n                if not stack or stack.pop() != '(':\n                    return 'No'\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(min(k, len(arr))):\n        total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    return sorted([num for num in collatz_sequence if num % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    if len(date) == 0:\n        return False\n    if date[2] == '-':\n        year, month, day = date.split('-')\n    else:\n        year, month, day = date.split('/')\n    if int(year) < 1 or int(year) > 9999:\n        return False\n    if int(month) < 1 or int(month) > 12:\n        return False\n    if int(day) < 1 or int(day) > 31:\n        return False\n    if int(month) in [1,3,5,7,8,10,12] and int(day) < 1 or int(day) > 31:\n        return False\n    if int(month) in [4,6,9,11] and int(day) < 1 or int(day) > 30:\n        return False\n    if int(month) == 2 and int(day) < 1 or int(day) > 29:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    if ' ' in txt:\n        return words\n    else:\n        return [''.join([x for x in word if ord(x) % 2 != 0]) for word in txt.split(',')]"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    intersect = []\n    for i in range(max(start1, start2), min(end1, end2)+1):\n        intersect.append(i)\n    intersect.sort()\n    if len(intersect) == 0:\n        return \"NO\"\n    else:\n        last_index = len(intersect) - 1\n        for i in range(last_index):\n            if intersect[i] + 1 != intersect[i+1]:\n                return \"NO\"\n        return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num == 0:\n            continue\n        elif num > 0:\n            sign_product *= 1\n            magnitude_sum += abs(num)\n        elif num < 0:\n            sign_product *= -1\n            magnitude_sum += abs(num)\n        else:\n            sign_product *= 0\n    return sign_product * magnitude_sum"}
{"task_id": "HumanEval/129", "completion": "    m, n = len(grid), len(grid[0])\n    visited = [[False] * n for _ in range(m)]\n    \n    def dfs(x, y, steps):\n        if steps == k:\n            return steps\n        ans = float('inf')\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:\n                visited[nx][ny] = True\n                ans = min(ans, dfs(nx, ny, steps + 1))\n                visited[nx][ny] = False\n        return ans\n    \n    min_steps = float('inf')\n    result = []\n    for i in range(m):\n        for j in range(n):\n            if not visited[i][j]:\n                visited[i][j] = True\n                steps = dfs(i, j, 1)\n                min_steps = min(min_steps, steps)\n                visited[i][j] = False\n                if steps == min_steps:\n                    result.append(grid[i][j])\n    return result"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                result.append((i + 1) // 2)\n            else:\n                result.append(result[i - 1] + result[i - 2] + result[i + 1])\n        return result"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n:\n        if n % 2 != 0:\n            product *= n % 10\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                return True\n            stack = []\n    return False"}
{"task_id": "HumanEval/133", "completion": "    rounded_lst = [int(x.ceil()) for x in lst]\n    return sum([x*x for x in rounded_lst])"}
{"task_id": "HumanEval/134", "completion": "    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha():\n        last_char = txt[-1]\n        if not last_char.isupper() and not last_char.islower():\n            return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            return i+1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg = None\n    pos = None\n    for num in lst:\n        if num < 0 and (neg is None or num > neg):\n            neg = num\n        elif num > 0 and (pos is None or num < pos):\n            pos = num\n    return (neg, pos)"}
{"task_id": "HumanEval/137", "completion": "    a_type = type(a)\n    b_type = type(b)\n    if a_type == b_type:\n        if a == b:\n            return None\n        return a if a > b else b\n    if a_type == int:\n        if b.isnumeric():\n            b = float(b)\n    elif a_type == float:\n        if b.isnumeric():\n            b = int(b)\n    if a_type == str and b.isdigit():\n        b = float(b)\n    if a_type == str and b.isnumeric():\n        b = int(b)\n    if a_type == str and b == \"\":\n        return None\n    return a if a > b else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 4 != 0:\n        return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(' ', '_').replace('  ', '-')"}
{"task_id": "HumanEval/141", "completion": "    parts = file_name.split('.')\n    if len(parts) != 2:\n        return \"No\"\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    for char in parts[0]:\n        if not char.isalpha():\n            return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    res = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            res += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            res += lst[i]**3\n    return res"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    num1, den1 = map(int, x.split('/'))\n    num2, den2 = map(int, n.split('/'))\n    result = (num1 * num2) / (den1 * den2)\n    return result.is_integer()"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in {1, 3, 5, 7, 9} and num % 100 in {11, 13, 15, 17, 19}:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [0] * n\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n    count = [0, 0, 0]\n    for i in range(n):\n        count[a[i] % 3] += 1\n    ans = 0\n    if count[0] > 0:\n        ans += (count[0] * (count[0] - 1)) // 2\n    if count[1] > 1:\n        ans += (count[1] * (count[1] - 1)) // 2\n    if count[2] > 2:\n        ans += (count[2] * (count[2] - 1) * (count[2] - 2)) // 6\n    return ans"}
{"task_id": "HumanEval/148", "completion": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    \n    return tuple(planets[start:end+1])"}
{"task_id": "HumanEval/149", "completion": "    lst.sort(key=lambda x: (-len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n\t\treturn x\n\telse:\n\t\treturn y"}
{"task_id": "HumanEval/151", "completion": "    if not lst:\n        return 0\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num * num\n    return total"}
{"task_id": "HumanEval/152", "completion": "    return [abs(g-g1) for g,g1 in zip(game,guess)]"}
{"task_id": "HumanEval/153", "completion": "    max_strength = float('-inf')\n    strongest_extension = ''\n    for extension in extensions:\n        strength = ord(extension[0]) - ord('A') - (len(extension) - 1) * (ord(extension[-1]) - ord('a'))\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = class_name + '.' + extension\n    return strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] == a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError(\"Number should be a positive integer between 1 and 1000\")\n    \n    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    \n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < result):\n            max_unique_chars = unique_chars\n            result = word\n    return result"}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + min(need, remaining)\n    left_over = remaining - min(need, remaining)\n    return [total_eaten, left_over]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for o in operator:\n        if o in ['+', '-', '*', '/', '**']:\n            stack.append(stack.pop() if o == '+' else stack.pop() * -1 if o == '-' else stack.pop() * o if o == '*' else\n                         stack.pop() // o if o == '/' else stack.pop() ** o)\n        else:\n            stack.append(o)\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    for i in range(len(s)):\n        if s[i].isalpha():\n            s = s[:i] + s[i].swapcase() + s[i+1:]\n    return s"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    even_digits = [int(digit) for digit in str(a) if int(digit) % 2 == 0]\n    even_digits.extend([int(digit) for digit in str(b) if int(digit) % 2 == 0])\n    even_digits.sort()\n    return even_digits"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if not stack:\n                continue\n            group = stack.pop()\n            groups.append(group)\n            stack[-1] += '('\n    return groups"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(deviations)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    res = []\n    for i in range(len(numbers)):\n        res.append(numbers[i])\n        if i != len(numbers) - 1:\n            res.append(delimeter)\n    return res"}
{"task_id": "HumanEval/6", "completion": "    result = []\n    for group in paren_string.split():\n        count = 0\n        for char in group:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n            if count < 0:\n                break\n        result.append(count)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for num in numbers:\n        product_of_numbers *= num\n    return (sum_of_numbers, product_of_numbers)"}
{"task_id": "HumanEval/9", "completion": "    max_ending_here = [numbers[0]]\n    for num in numbers[1:]:\n        max_ending_here.append(max(num, max_ending_here[-1]))\n    return max_ending_here"}
{"task_id": "HumanEval/10", "completion": "    n = len(string)\n    for i in range(n-1, -1, -1):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            return prefix + string[i:][::-1]"}
{"task_id": "HumanEval/11", "completion": "    return ''.join(['1' if a[i] != b[i] else '0' for i in range(len(a))])"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    longest_length = max(len(string) for string in strings)\n    longest_strings = [string for string in strings if len(string) == longest_length]\n    return longest_strings[0]"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n\t\treturn a\n\treturn greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats_list = []\n    for note in music_string.split():\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        pos = string.find(substring, start)\n        if pos == -1:\n            break\n        count += 1\n        start = pos + 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = [num_dict[num] for num in numbers.split()]\n    nums.sort()\n    return ' '.join([str(num_dict[str(num)]) for num in nums])"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return list(filter(lambda x: isinstance(x, int), values))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    res = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            res.append(i)\n    if n > 1:\n        res.append(n)\n    return res"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2 != 0:\n        return \"Coefficients should have even number of coefficients\"\n    if xs[-1] == 0:\n        return \"Largest coefficient should be non zero\"\n    # Find the root using Newton's method\n    def derivative(xs):\n        return [coeff * i for i, coeff in enumerate(xs[1:])]\n\n    def find_root_using_newton(f, df, a, b, tol):\n        while abs(b - a) > tol:\n            c = (a + b) / 2\n            if f(c) * f(a) < 0:\n                b = c\n            else:\n                a = c\n        return (a + b) / 2\n\n    return find_root_using_newton(poly, derivative(xs), -1, 1, 1e-6)"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l' = [l[i] if (i+1)%3 != 0 else sorted(l[i:i+3])[0] for i in range(n)]\n    return l'"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count('7') > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join decoded string by cycling each group\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b, count = 1, 2, 0\n    while True:\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b\n        a, b = b, a + b"}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return (n//2)*(n//2-1)//2"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return \"0\"\n    result = \"\"\n    while x > 0:\n        digit = x % base\n        result = str(digit) + result\n        x = x // base\n    return result"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    a, b, c, d = 0, 0, 0, 1\n    for _ in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    if not text:\n        return True\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    res = 1\n    n = n % p\n    while n:\n        if n & 1:\n            res = (res * 2) % p\n        n = n >> 1\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            c = a + b\n            a, b = b, c\n        return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            if stack.pop() != '<':\n                return False\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    if l[1] - l[0] > 0:\n        return all(l[i] - l[i-1] > 0 for i in range(1, len(l)))\n    return all(l[i] - l[i-1] < 0 for i in range(1, len(l)))"}
{"task_id": "HumanEval/58", "completion": "    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif len(stack) > 0 and stack[-1] == '(':\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    return [xs[i] * (n - i) for i in range(1, n)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    a, b, c = 0, 1, 1\n    for _ in range(2, n + 1):\n        c = a + b + c\n        a, b = b, c\n    return c"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    num_len = len(num_str)\n    shift %= num_len\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split(' and '))\n    total_fruits = apples + oranges\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    \n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n            \n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    frequency = {}\n    for num in lst:\n        frequency[num] = frequency.get(num, 0) + 1\n    for num, freq in sorted(frequency.items(), reverse=True):\n        if freq >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return lst\n    max_val = max(lst)\n    min_val = min(lst)\n    middle_index = len(lst) // 2\n    return [min_val] + lst[:middle_index] + [max_val] + lst[middle_index+1:]"}
{"task_id": "HumanEval/71", "completion": "    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2) if s > 0 and s < (a + b + c) else -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes"}
{"task_id": "HumanEval/74", "completion": "    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    \n    return lst1 if total1 < total2 else lst2"}
{"task_id": "HumanEval/75", "completion": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            if primes[i] * primes[j] * primes[primes.index(primes[i] * primes[j]) + 1] == a:\n                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n\t\treturn True\n\tif x < n:\n\t\treturn False\n\treturn x % n == 0"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        a = -a\n    for i in range(1, int(a ** (1/3)) + 1):\n        if i * i * i == a:\n            return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "    # A function to determine if a number is prime\n    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for char in num:\n        if char.isdigit():\n            num = int(char)\n            if isPrime(num):\n                count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3.0:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2.0:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        elif grade >= 0.0:\n            letter_grades.append(\"D-\")\n        elif grade >= 0.0:\n            letter_grades.append(\"F\")\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    return 10**(n-1) + 9*(10**(n-2))"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = 0\n    while N:\n        binary_sum += N % 2\n        N //= 2\n    return str(binary_sum)"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "    def anti_shuffle_word(word):\n        return ''.join(sorted(word))\n    \n    words = s.split()\n    return ' '.join(anti_shuffle_word(word) for word in words)"}
{"task_id": "HumanEval/87", "completion": "    res = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                res.append((i, j))\n    return sorted(res, key=lambda item: (-item[0], -item[1]))"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return []\n    return array[::-1] if sum(array[0], array[-1]) % 2 == 0 else array"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a')) * 2 + 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    first = min(lst)\n    lst.remove(first)\n    return min(lst)"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i].startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x + y == z) or (x + z == y) or (y + z == x):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"AEIOUaeiou\"\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n            if char in vowels:\n                result = result.replace(char, chr((ord(char) - ord('A') + 2) % 26 + ord('A')))\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return \"No prime numbers in the list\"\n    \n    largest_prime = max(primes)\n    digit_sum = sum(int(d) for d in str(largest_prime))\n    return digit_sum"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    first_key = next(iter(dict))\n    if first_key.islower() and first_key.isupper():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    return int(value)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i + 1)\n        else:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = (n + m) // 2\n    return bin(round(average))[2:]"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        while n:\n            if n % 2 == 0:\n                return True\n            n //= 10\n        return False\n\n    res = []\n    for num in x:\n        if not has_even_digit(num):\n            res.append(num)\n    return sorted(res)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef reverseArray(arr):\n    return arr[::-1]\n\ndef replaceDigit(arr):\n    replacements = {\"0\": \"Zero\", \"1\": \"One\", \"2\": \"Two\",\n                    \"3\": \"Three\", \"4\": \"Four\", \"5\": \"Five\",\n                    \"6\": \"Six\", \"7\": \"Seven\", \"8\": \"Eight\", \"9\": \"Nine\"}\n    return [replacements[str(x)] for x in arr]\n\ndef sortAndReplace(arr):\n    arr = [x for x in arr if 1 <= x <= 9]  # Filter out numbers outside the range\n    arr = by_length(arr)  # Sort the filtered array by length\n    arr = reverseArray(arr)  # Reverse the sorted array\n    return replaceDigit(arr)  # Replace each digit with its name"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result\n\ndef sum_of_numbers(n):\n    return n * (n + 1) // 2\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            even += 1\n        elif str(i) == str(i)[::-1] and i % 2 != 0:\n            odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) < 2:\n        return True\n    arr.sort()\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    if len(lst1) != len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != lst2[i] % 2:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n            return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    else:\n        freq = {}\n        for char in test.split():\n            if char in freq:\n                freq[char] += 1\n            else:\n                freq[char] = 1\n        max_count = max(freq.values())\n        return {k: v for k, v in freq.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "    n = len(s)\n    for i in c:\n        s = s.replace(i, \"\")\n    ans = s[::-1]\n    return ans, ans == s"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    max_fill = math.inf\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                max_fill = min(max_fill, math.inf)\n    return max_fill"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char.lower() not in 'aeiou') == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    result = \"\"\n    for i in range(len(word)-1, 1, -1):\n        if word[i] in vowels and word[i-1] not in vowels:\n            result = word[i]\n            break\n    return result"}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        if len(stack) == 0 or stack[-1] != s[0]:\n            stack.append(s[0])\n        else:\n            stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'"}
{"task_id": "HumanEval/120", "completion": "    max_arr = []\n    for i in range(k):\n        max_arr.append(max(arr))\n        arr.remove(max(arr))\n    return max_arr"}
{"task_id": "HumanEval/121", "completion": "    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    sequence = [n]\n    while sequence[-1] != 1:\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence[-1] // 2)\n        else:\n            sequence.append(sequence[-1] * 3 + 1)\n    return [x for x in sequence if x % 2 != 0]"}
{"task_id": "HumanEval/124", "completion": "    if date:\n        day, month, year = date.split('-')\n        try:\n            if int(day) < 1 or int(day) > 31:\n                return False\n            if int(month) < 1 or int(month) > 12:\n                return False\n            if int(year) < 1900 or int(year) > 2100:\n                return False\n        except ValueError:\n            return False\n    return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words\n\ndef odd_lower_case_letters(txt):\n    lowercase_letters = [char for char in txt if char.islower()]\n    odd_count = len([letter for letter in lowercase_letters if ord(letter) % 2 != 0])\n    return odd_count"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersectionLength = end - start\n    \n    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return \"YES\" if isPrime(intersectionLength) else \"NO\""}
{"task_id": "HumanEval/128", "completion": "    product_signs = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num == 0:\n            magnitude_sum += 0\n            product_signs *= 1\n        elif num > 0:\n            magnitude_sum += abs(num)\n            product_signs *= 1\n        else:\n            magnitude_sum += abs(num)\n            product_signs *= -1\n    return magnitude_sum * product_signs if product_signs != 1 else None"}
{"task_id": "HumanEval/129", "completion": "    N = len(grid)\n    res = []\n    \n    def dfs(grid, i, j, k, path, res):\n        if len(path) == k:\n            res.append(path)\n            return\n        for x, y in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = i + x, j + y\n            if 0 <= nx < N and 0 <= ny < N:\n                if (nx, ny) not in path:\n                    dfs(grid, nx, ny, k, path + [(nx, ny)], res)\n        return\n    \n    for i in range(N):\n        for j in range(N):\n            dfs(grid, i, j, k, [(i, j)], res)\n    \n    return min(res)"}
{"task_id": "HumanEval/130", "completion": "    res = [0] * (n + 1)\n    res[1] = 1\n    res[2] = 2\n    for i in range(3, n + 1):\n        res[i] = int(res[i - 1] + res[i - 2] + res[i - 3])\n    return res"}
{"task_id": "HumanEval/131", "completion": "    num = n\n    result = 1\n    while num > 0:\n        digit = num % 10\n        if digit % 2 != 0:\n            result *= digit\n        num //= 10\n    return result if result != 1 else 0"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                return True\n            else:\n                stack.pop()\n    return False"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        rounded_num = int(max(0, num))\n        result += rounded_num**2\n    return result"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    last_char = last_word[-1]\n    return last_char.isalpha() and last_char not in \"\".join(words[:-1])"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    if n < 2:\n        return n\n    else:\n        for i in range(n-1, 0, -1):\n            if arr[i] < arr[i-1]:\n                return i\n        return -1"}
{"task_id": "HumanEval/136", "completion": "    if not lst:\n        return (None, None)\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    return (max(negatives) if negatives else None, min(positives) if positives else None)"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == str and type(b) == str:\n        return max(a, b)\n    elif type(a) == str:\n        a = float(a.replace(',', '').replace('.', ''))\n    elif type(b) == str:\n        b = float(b.replace(',', '').replace('.', ''))\n    return max(float(a), float(b))"}
{"task_id": "HumanEval/138", "completion": "    return (n % 2 == 0) and (n >= 8)"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/141", "completion": "    if '.' in file_name:\n        parts = file_name.split('.')\n        if len(parts) != 2:\n            return 'No'\n        if not parts[0].isalnum():\n            return 'No'\n        if len(parts[0]) > 3:\n            return 'No'\n    return 'No'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if (i % 3 == 0) or (i % 4 == 0 and i % 3 != 0):\n            total += lst[i] ** (i % 4 if i % 4 != 0 else 2)\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    return ' '.join(word for word in words if isPrime(len(word)))"}
{"task_id": "HumanEval/144", "completion": "    numerator, denominator = map(int, x.split('/'))\n    numerator, denominator = map(int, n.split('/'))\n    product = numerator * denominator\n    return product == int(product)"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    def is_first_last_odd(n):\n        first_digit = int(str(n)[0])\n        last_digit = int(str(n)[-1])\n        return first_digit in [1, 3, 5, 7, 9] and last_digit in [1, 3, 5, 7, 9]\n    \n    count = 0\n    for num in nums:\n        if num > 10 and is_first_last_odd(num):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    ans = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i + j + k) % 3 == 0:\n                    ans += 1\n    return ans"}
{"task_id": "HumanEval/148", "completion": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        planets_in_range = planets[min(index1, index2):max(index1, index2)+1]\n        return tuple(sorted(planets_in_range))"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst)\n\ndef list_sort(words):\n    return sorted(words, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n == 2 or n == 3:\n        return x\n    if n % 2 == 0 or n % 3 == 0:\n        return y\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return y\n        i += 6\n    return x"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if num % 2 != 0 and isinstance(num, int) and num > 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares"}
{"task_id": "HumanEval/152", "completion": "    return [abs(x-y) for x,y in zip(game,guess)]"}
{"task_id": "HumanEval/153", "completion": "    strengths = []\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        strengths.append((class_name + '.' + extension, strength))\n    strengths.sort(key=lambda x: (-x[1], extensions.index(x[0])))\n    return strengths[0][0]"}
{"task_id": "HumanEval/154", "completion": "    if len(b) > len(a):\n        return False\n    if len(b) == len(a):\n        return a in b\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i + len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while (num > 0):\n        digit = num % 10\n        if (digit % 2 == 0):\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    if not 1 <= number <= 1000:\n        raise ValueError(\"Number should be between 1 and 1000\")\n    \n    roman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/157", "completion": "    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "completion": "    max_word = ''\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + need\n    if total_eaten <= remaining:\n        return [total_eaten, remaining - total_eaten]\n    else:\n        return [total_eaten, remaining]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack.append(operand[i])\n        elif operator[i] == '-':\n            stack.append(-(operand[i]))\n        elif operator[i] == '*':\n            stack.append(stack.pop() * operand[i])\n        elif operator[i] == '/':\n            stack.append(int(stack.pop() / operand[i]))\n        elif operator[i] == '**':\n            stack.append(stack.pop() ** operand[i])\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    return \"\".join(c.lower() if c.isupper() else c.upper() for c in s[::-1])"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    return sorted(str(i) for i in range(a, b+1) if int(i) % 2 == 0)"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for paren in paren_string:\n        if paren == '(':\n            stack.append('')\n        elif paren == ')':\n            result.append(stack.pop())\n        else:\n            if stack:\n                stack[-1] += paren\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    n = len(numbers)\n    mean = sum(numbers) / n\n    deviations = [abs(n - mean) for n in numbers]\n    return sum(deviations) / n"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    level = 0\n    result = []\n    for paren in paren_string.split():\n        depth = paren.count('(')\n        result.append(depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    product = 1\n    sum = 0\n    for num in numbers:\n        product *= num\n        sum += num\n    return (sum, product)"}
{"task_id": "HumanEval/9", "completion": "    max_ending_here = max_so_far = numbers[0]\n    result = [max_so_far]\n    for num in numbers[1:]:\n        max_ending_here = max(num, max_ending_here + num)\n        max_so_far = max(max_so_far, max_ending_here)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    for i in range(len(string) - 1, -1, -1):\n        postfix = string[i:]\n        if is_palindrome(postfix):\n            return string + postfix[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(map(str, range(n+1)))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beat_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    beats = []\n    for note in music_string:\n        if note in beat_map:\n            beats.append(beat_map[note])\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    n = len(string)\n    m = len(substring)\n    for i in range(n - m + 1):\n        if string[i:i + m] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    return ' '.join(sorted(numbers.split(), key=lambda x: int(x)))"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    minimum = min(numbers)\n    maximum = max(numbers)\n    return [(x - minimum) / (maximum - minimum) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    length = 0\n    for char in string:\n        length += 1\n    return length"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    return [num for num in numbers if num not in seen and not seen.add(num)]"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"}
{"task_id": "HumanEval/28", "completion": "    result = ''\n    for string in strings:\n        result += string\n    return result"}
{"task_id": "HumanEval/29", "completion": "    return list(filter(lambda x: x.startswith(prefix), strings))"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds x such that poly(x) = 0.\n    returns a float value if a root is found, else return None.\n    \"\"\"\n    # If largest coefficient is negative, then we can ignore all the odd degrees of the polynomial.\n    # This approach guarantees that the polynomial has a root at least once.\n    if xs[-1] < 0:\n        degree = len(xs) - 1\n        while degree > 0 and xs[degree] == 0:\n            degree -= 2\n        if degree == 0:\n            return 0\n        return -xs[degree] / xs[degree-1]\n    return None"}
{"task_id": "HumanEval/33", "completion": "    l.sort()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = None\n    l[:] = [x for x in l if x is not None]\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l' = l[:]\n    for i in range(1, len(l)):\n        if i % 2 == 0:\n            l'[i] = l[i]\n    return l'"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling the characters in groups of three.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # cycle elements in each group. Unless group has fewer than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    fib = [2, 3]\n    while len(fib) < n:\n        next_fib = fib[-1] + fib[-2]\n        if is_prime(next_fib):\n            fib.append(next_fib)\n    return fib[-1]"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l)-2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        seen.add(x)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    res = ''\n    while x > 0:\n        x, r = divmod(x, base)\n        res = str(r) + res\n    return res"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    dp = [0]*(n+1)\n    dp[0], dp[1], dp[2], dp[3] = 0, 0, 2, 0\n    for i in range(4, n+1):\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n    return dp[n]"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    if n % 2 == 1:\n        return sorted(l)[n//2]\n    else:\n        return (sorted(l)[n//2-1] + sorted(l)[n//2]) / 2"}
{"task_id": "HumanEval/48", "completion": "    if not text:\n        return True\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n        return 1 % p\n    return pow(n, (p - 2) // 3, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by -5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    if len(s0) != len(s1):\n        return False\n    freq_map = {}\n    for char in s0:\n        if char not in freq_map:\n            freq_map[char] = 1\n        else:\n            freq_map[char] += 1\n    for char in s1:\n        if char not in freq_map:\n            return False\n        else:\n            freq_map[char] -= 1\n            if freq_map[char] < 0:\n                return False\n    return True"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket in \"<>\":\n            stack.append(bracket)\n        else:\n            if not stack or stack.pop() != bracket:\n                return False\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))"}
{"task_id": "HumanEval/58", "completion": "    return list(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif not stack or stack.pop() != '(':\n            return False\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    if len(xs) < 2:\n        return []\n    return [xs[1]*i for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n <= 3:\n        return 1\n    else:\n        a, b, c = 1, 1, 0\n        for _ in range(4, n+1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y' and s[-2] not in vowels:\n        count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    str_x = str(x)\n    n = len(str_x)\n    shift = shift % n\n    return str_x[-shift:] + str_x[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    # Remove all the spaces from the string\n    s = s.replace(\" \", \"\")\n    # Split the string into individual fruit\n    fruits = s.split(\" and \")\n    # Create a dictionary to hold the count of each fruit\n    fruit_count = {}\n    for fruit in fruits:\n        # If the fruit is already in the dictionary, increment its count\n        if fruit in fruit_count:\n            fruit_count[fruit] += 1\n        # Otherwise, add the fruit to the dictionary with a count of 1\n        else:\n            fruit_count[fruit] = 1\n    # Count the number of mango fruits in the basket\n    mango_count = fruit_count.get(\"mango\", 0)\n    # Calculate the total number of mango fruits in the basket\n    total_mango = mango_count * n\n    return total_mango"}
{"task_id": "HumanEval/68", "completion": "    n = len(arr)\n    smallest_value = float('inf')\n    smallest_index = -1\n    for i in range(n):\n        if arr[i] % 2 == 0 and arr[i] < smallest_value:\n            smallest_value = arr[i]\n            smallest_index = i\n    return [smallest_value, smallest_index] if smallest_index != -1 else []"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    for num in sorted(freq, reverse=True):\n        if freq[num] >= num:\n            return num\n    \n    return -1"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(s * (s - a) * (s - b) * (s - c), 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q)<=w:\n        return True\n    return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    change = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            change += 1\n    return change"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum([len(word) for word in lst1])\n    total_chars2 = sum([len(word) for word in lst2])\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            j = a // i\n            if j < i:\n                continue\n            if j > 100:\n                return False\n            if is_prime(i) and is_prime(j):\n                return True\n    return False\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x == n:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x//n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        a = -a\n    x = round(a ** (1 / 3))\n    return x ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    hex_dict = {\"2\": 2, \"3\": 3, \"5\": 5, \"7\": 7, \"B\": 11, \"D\": 13, \"A\": 10, \"C\": 12, \"E\": 15, \"F\": 16}\n    count = 0\n    for digit in num:\n        if digit in hex_dict:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary_str = bin(decimal)[2:]\n    return \"db\" + binary_str + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "    return 10**(n-1) + (n-1)"}
{"task_id": "HumanEval/84", "completion": "    sum_of_digits = sum(int(digit) for digit in bin(N)[2:])\n    return bin(sum_of_digits)[2:]"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort()\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "    return sorted(array) if sum(array[0], array[-1]) % 2 != 0 else sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            encrypted_string += shifted_char\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = lst[0]\n    second_smallest = None\n    for num in lst[1:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and second_smallest is not None:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    S = S.split()\n    count = 0\n    for i in range(len(S)):\n        if S[i] == \"I\":\n            if i == 0:\n                count += 1\n            elif S[i-1] in [\".\", \"?\", \"!\"]:\n                count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                result += chr(((ord(char) - 65) + 2) % 26 + 65)\n            else:\n                result += chr(((ord(char) - 97) + 2) % 26 + 97)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    prime_values = []\n    for num in lst:\n        if num > 1:\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    break\n            else:\n                prime_values.append(num)\n    \n    largest_prime = max(prime_values)\n    digit_sum = sum(int(digit) for digit in str(largest_prime))\n    \n    return digit_sum"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    first_key_case = dict.keys()[0].isupper()\n    for key in dict.keys():\n        if key.islower() and first_key_case:\n            return False\n        elif key.isupper() and not first_key_case:\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    prime_numbers = []\n    count = 0\n    num = 2\n    while count < n:\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n            count += 1\n        num += 1\n    return prime_numbers"}
{"task_id": "HumanEval/97", "completion": "    return (a%10 * b%10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    number = float(value)\n    if number % 1 > 0:\n        return int(number + 0.5)\n    else:\n        return int(number - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + make_a_pile(n - 1)\n    else:\n        return [n] + make_a_pile(n - 2)"}
{"task_id": "HumanEval/101", "completion": "    words = s.split(', ') if ',' in s else s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(round(avg))"}
{"task_id": "HumanEval/104", "completion": "    def is_even(num):\n        return int(str(num)[-1]) % 2 == 0\n    \n    result = []\n    for num in x:\n        if not is_even(num):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return arr\n\ndef by_length_and_reverse(arr):\n    return arr\n\ndef replace_digits(arr):\n    return arr"}
{"task_id": "HumanEval/106", "completion": "    factorials = [1] * (n + 1)\n    for i in range(2, n + 1):\n        factorials[i] = i * factorials[i-1]\n    sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sums[i] = factorials[i]\n        else:\n            sums[i] = sum(range(1, i + 1))\n    return sums"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(num):\n        if num < 0:\n            return -1 + sum_of_digits(abs(num))\n        return sum(int(digit) for digit in str(num))\n    return sum(sum_of_digits(num) > 0 for num in arr)"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            if i == 1:\n                return False\n            if arr[i] - arr[i-2] >= 1:\n                arr[i-1] += 1\n                return arr == sorted(arr)\n            arr[i] += 1\n    return arr == sorted(arr)"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    for num in lst2:\n        if num % 2 == 0:\n            even_count -= 1\n        else:\n            odd_count -= 1\n    if even_count == 0:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    for char in test.split():\n        count[char] = count.get(char, 0) + 1\n    max_count = max(count.values())\n    return {k: v for k, v in count.items() if v == max_count}"}
{"task_id": "HumanEval/112", "completion": "    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result,result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str1ng {s} of the 1nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    bucket_count = math.ceil(rows * cols / capacity)\n    return bucket_count"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    last_consonant = \"\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] not in vowels:\n            last_consonant = word[i]\n            break\n    if last_consonant == \"\":\n        return \"\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels and word[i] != last_consonant:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    if not lst:\n        return \"No\"\n    for i in range(len(lst)):\n        stack = []\n        for j in range(i, len(lst)):\n            if lst[j] == '(':\n                stack.append(lst[j])\n            elif lst[j] == ')':\n                if not stack:\n                    return \"No\"\n                stack.pop()\n        if not stack:\n            return \"Yes\"\n    return \"No\""}
{"task_id": "HumanEval/120", "completion": "    n = len(arr)\n    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    n = len(arr)\n    i = 0\n    result = 0\n    while (i < k) :\n        if (arr[i] < 10) :\n            result += arr[i]\n            i += 1\n        else :\n            result += arr[i] % 10\n            i += 1\n            if (i < k) :\n                result += arr[i] // 10\n                i += 1\n    return result"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 != 0:\n            result.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = n * 3 + 1\n    return result"}
{"task_id": "HumanEval/124", "completion": "    if date.count('-') != 2:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if len(year) != 4:\n        return False\n    \n    if month.isdigit() and day.isdigit() and year.isdigit():\n        months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n        days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        leap_year = [29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]\n        \n        if int(month) < 1 or int(month) > 12:\n            return False\n        if int(day) < 1 or int(day) > 31:\n            return False\n        if int(year) < 1 or int(year) > 9999:\n            return False\n        if int(month) == 2:\n            if int(day) < 1 or int(day) > 29:\n                return False\n            if int(year) % 4 == 0 and (int(year) % 100 != 0 or int(year) % 400 == 0):\n                days[1] = 29\n        if int(month) in [1, 3, 5, 7, 8, 10, 12] and int(day) < 1 or int(day) > 31:\n            return False\n        if int(month) in [4, 6, 9, 11] and int(day) < 1 or int(day) > 30:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    if not words:\n        return [txt]\n    return words\n\n\ndef odd_order_lowercase_count(word):\n    count = 0\n    for char in word:\n        if char.islower():\n            count += 1\n    return count % 2 != 0\n\n\ndef split_or_count_odd_order(txt):\n    words = split_words(txt)\n    if words:\n        return words\n    return sum(odd_order_lowercase_count(word) for word in txt)"}
{"task_id": "HumanEval/126", "completion": "    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n    \n    if intersection_start >= intersection_end:\n        return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    if intersection_length < 2:\n        return \"NO\"\n    \n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign = 1\n    product = 1\n    for num in arr:\n        if num == 0:\n            return None\n        sign = sign * num\n        product *= num\n    return abs(sign * product)"}
{"task_id": "HumanEval/129", "completion": "    if k > len(grid) * len(grid[0]):\n        return -1\n    \n    def dfs(x, y, k, path):\n        nonlocal visited, ans\n        if k == 0:\n            ans.append(path)\n            return\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                dfs(nx, ny, k - 1, path + [grid[nx][ny]])\n                visited.remove((nx, ny))\n    \n    visited = set()\n    ans = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited.add((i, j))\n            dfs(i, j, k, [grid[i][j]])\n            visited.remove((i, j))\n    \n    return min(ans, key=lambda x: x[0]) if ans else [-1]"}
{"task_id": "HumanEval/130", "completion": "    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[1][1] = 3\n    dp[1][2] = 3\n    for i in range(2, n + 1):\n        for j in range(1, i + 1):\n            if j % 2 == 0:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] + dp[i - 1][j + 1]\n    return [int(x) for x in dp[n][1:]]"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    return sum([int(max(0, x))**2 for x in lst])"}
{"task_id": "HumanEval/134", "completion": "    if len(txt) < 2:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    if n == 1:\n        return -1\n    for i in range(n-2, -1, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    pos_integers = [num for num in lst if num > 0]\n    neg_integers = [num for num in lst if num < 0]\n    if not pos_integers and not neg_integers:\n        return None, None\n    elif not pos_integers:\n        return max(neg_integers), min(neg_integers)\n    elif not neg_integers:\n        return max(pos_integers), min(pos_integers)\n    else:\n        return max(neg_integers), min(pos_integers)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and isinstance(b, str):\n        a = float(a)\n        b = float(b)\n    if isinstance(a, str) and isinstance(b, float):\n        b = float(b)\n    if isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    if isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    for i in range(2, n//2+1):\n        if i*4 == n:\n            return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact"}
{"task_id": "HumanEval/140", "completion": "    if len(text) == 0:\n        return text\n    res = \"\"\n    for i in range(len(text)):\n        if text[i] == ' ':\n            if i < len(text) - 1 and text[i+1] == ' ':\n                res += '-'\n            else:\n                res += '_'\n        else:\n            res += text[i]\n    return res"}
{"task_id": "HumanEval/141", "completion": "    if not file_name or file_name.startswith('.') or file_name.endswith('.'):\n        return \"No\"\n    if len(file_name.split('.')[0]) > 3 or len(file_name.split('.')[1]) not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i, num in enumerate(lst):\n        if (i % 3 == 0 and i % 4 != 0) or (i % 4 == 0 and i % 3 != 0):\n            total += num ** 2\n        else:\n            total += num\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    if float(x) * float(n) == int(float(x) * float(n)):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        count[i % 3] += 1\n    return count[0] * (count[0] - 1) // 2 + count[1] * count[2]"}
{"task_id": "HumanEval/148", "completion": "    planets = [\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ]\n    orbit = planets.index(planet1)\n    orbit2 = planets.index(planet2)\n    result = planets[orbit + 1:orbit2]\n    return tuple(result)"}
{"task_id": "HumanEval/149", "completion": "    return sorted([l for l in lst if len(l) % 2 == 0], key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n % 2 != 0:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    result = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            result += num ** 2\n    return result * 2"}
{"task_id": "HumanEval/152", "completion": "    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff"}
{"task_id": "HumanEval/153", "completion": "    strength = []\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength.append((cap - sm, extension))\n    strength.sort(key=lambda x: (x[0], extensions.index(x[1])))\n    return class_name + '.' + strength[-1][1]"}
{"task_id": "HumanEval/154", "completion": "    if len(a)<len(b):\n        return False\n    s=b+b\n    return s in a"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while(num>0):\n        digit = num%10\n        if(digit%2 == 0):\n            even+=1\n        else:\n            odd+=1\n        num = num//10\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    result = ''\n    for key in sorted(roman_numerals, reverse=True):\n        while number >= key:\n            result += roman_numerals[key]\n            number -= key\n    return result"}
{"task_id": "HumanEval/157", "completion": "    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_chars or (unique_chars == max_chars and word < max_word):\n            max_word = word\n            max_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if number + need <= remaining:\n        return [number + need, remaining - number - need]\n    else:\n        return [remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "    res = float('inf')\n    stack = []\n    operand.append(float('inf'))  # Add infinity to the end to represent the result of the final operation\n    i = 0\n    while i < len(operator):\n        op = operator[i]\n        i += 1\n        if op == '+':\n            num1 = stack.pop()\n            num2 = stack.pop()\n            res = min(res, num1 + num2)\n            stack.append(num1 + num2)\n        elif op == '-':\n            num1 = stack.pop()\n            num2 = stack.pop()\n            res = min(res, num1 - num2)\n            stack.append(num1 - num2)\n        elif op == '*':\n            num1 = stack.pop()\n            num2 = stack.pop()\n            res = min(res, num1 * num2)\n            stack.append(num1 * num2)\n        elif op == '/':\n            num1 = stack.pop()\n            num2 = stack.pop()\n            res = min(res, num1 // num2)\n            stack.append(num1 // num2)\n        elif op == '^':\n            num1 = stack.pop()\n            num2 = stack.pop()\n            res = min(res, num1 ** num2)\n            stack.append(num1 ** num2)\n    return stack[0]"}
{"task_id": "HumanEval/161", "completion": "    res = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                res += s[i].upper()\n            else:\n                res += s[i].lower()\n        else:\n            res += s[i]\n    return res[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    return [i for i in range(a, b+1) if i % 2 == 0]"}
