{"task_id": "HumanEval/9", "completion": "    max_ending_here = [0] * (len(numbers) + 1)\n    max_so_far = [0] * (len(numbers) + 1)\n    for i in range(1, len(numbers) + 1):\n        max_ending_here[i] = max(numbers[i - 1], max_ending_here[i - 1])\n        max_so_far[i] = max(max_so_far[i - 1], max_ending_here[i])\n    rolling_max_list = []\n    for i in range(len(numbers)):\n        rolling_max_list.append(max_so_far[i])\n    return rolling_max_list"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n//2, 0, -1):\n\t\tif n % i == 0:\n\t\t\treturn i\n\treturn 1"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/68", "completion": "    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n    min_value = min(even_values)\n    min_index = arr.index(min_value)\n    return [min_value, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    max_val = -1\n    for num, count in freq.items():\n        if num > max_val and count >= num:\n            max_val = num\n    return max_val"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    \n    lst.sort()\n    result = []\n    i = 0\n    j = len(lst) - 1\n    \n    while i <= j:\n        if i == j:\n            result.append(lst[i])\n        else:\n            result.append(lst[i])\n            result.append(lst[j])\n        i += 1\n        j -= 1\n        \n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return min(changes, n - changes)"}
{"task_id": "HumanEval/88", "completion": "    if len(array) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_values = [x for x in lst if is_prime(x)]\n    if not prime_values:\n        return 0\n    \n    largest_prime = max(prime_values)\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        temp = num\n        has_even = False\n        while temp > 0:\n            digit = temp % 10\n            if digit % 2 == 0:\n                has_even = True\n                break\n            temp //= 10\n        if not has_even:\n            result.append(num)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef by_value(arr):\n    return arr\n\ndef sort_and_replace(arr):\n    if not arr:\n        return []\n    between_one_and_nine = [x for x in arr if 1 <= x <= 9]\n    between_one_and_nine.sort()\n    result = between_one_and_nine[::-1]\n    name_map = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    return [name_map[x] for x in result]"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    cur_sum = 0\n    for num in nums:\n        cur_sum = max(num, cur_sum + num)\n        min_sum = min(min_sum, cur_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    \n    max_water = 0\n    \n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_water += 1\n    \n    return math.ceil(max_water / capacity)"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/122", "completion": "    result = 0\n    for i in range(k):\n        if arr[i] < 100:\n            result += arr[i]\n    return result"}
{"task_id": "HumanEval/129", "completion": "    m, n = len(grid), len(grid[0])\n    dp = [[float('inf')] * n for _ in range(m)]\n    q = deque()\n    q.append((0, 0, []))\n    dp[0][0] = 0\n    while q:\n        x, y, path = q.popleft()\n        if len(path) == k:\n            return path\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] not in path:\n                new_path = path + [grid[nx][ny]]\n                if len(new_path) <= k:\n                    dp[nx][ny] = min(dp[nx][ny], dp[x][y] + 1)\n                    q.append((nx, ny, new_path))\n    return []"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] >= arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    max_ending_here = max_so_far = numbers[0]\n    max_indices = (0, 0)\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_ending_here + numbers[i]:\n            max_ending_here = numbers[i]\n            max_indices = (i, i)\n        else:\n            max_ending_here = max_ending_here + numbers[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            max_indices = (i, i)\n    return [max_so_far for i in range(len(numbers))]"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled = []\n    for num in numbers:\n        rescaled.append((num - min_num) / (max_num - min_num))\n    return rescaled"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if len(l) == 0:\n        return None\n    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/68", "completion": "    min_val = float('inf')\n    min_idx = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_idx = i\n    return [min_val, min_idx]"}
{"task_id": "HumanEval/69", "completion": "    lst.sort()\n    for i in range(len(lst)-1, -1, -1):\n        if lst[i] >= lst.count(lst[i]):\n            return lst[i]\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    n = len(lst)\n    result = []\n    i = 0\n    while i < n:\n        result.append(min(lst[:i+1]))\n        result.append(max(lst[i+1:]))\n    return result"}
{"task_id": "HumanEval/73", "completion": "    count = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            count += 1\n            if i < len(arr) // 2 - 1:\n                arr[i + 1] = arr[i]\n            else:\n                arr[i] = arr[i + 1]\n    return count"}
{"task_id": "HumanEval/88", "completion": "    if len(array) < 2:\n        return array\n    first = array[0]\n    last = array[-1]\n    sum_first_last = first + last\n    if sum_first_last % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    return second_smallest"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = float('-inf')\n    for num in lst:\n        if isPrime(num) and num > max_prime:\n            max_prime = num\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted(filter(lambda n: not has_even_digit(n), x))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef replace_with_name(arr):\n    names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    return [names[i-1] for i in arr]\n\ndef sortAndReplace(arr):\n    if not arr:\n        return []\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr = by_length(arr)\n    arr = replace_with_name(arr)\n    arr.reverse()\n    return arr"}
{"task_id": "HumanEval/114", "completion": "    if len(nums) == 0:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows, cols = len(grid), len(grid[0])\n    buckets = math.ceil(rows / capacity)\n    water_level = [0] * buckets\n    \n    for r in range(rows):\n        for c in range(cols):\n            bucket_idx = r // capacity\n            water_level[bucket_idx] += grid[r][c]\n            grid[r][c] = 0\n    \n    return len(water_level)"}
{"task_id": "HumanEval/120", "completion": "    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/129", "completion": "    m, n = len(grid), len(grid[0])\n    q = []\n    visited = [[False] * n for _ in range(m)]\n    res = []\n    for i in range(m):\n        for j in range(n):\n            if not visited[i][j]:\n                q.append((i, j, [grid[i][j]]))\n                visited[i][j] = True\n    while q:\n        x, y, path = q.pop(0)\n        if len(path) == k:\n            res = path\n            break\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:\n                visited[nx][ny] = True\n                newPath = path + [grid[nx][ny]]\n                q.append((nx, ny, newPath))\n    return res"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_index = -1\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    max_so_far = float('-inf')\n    max_list = []\n    for num in numbers:\n        max_so_far = max(num, max_so_far + num)\n        max_list.append(max_so_far)\n    return max_list"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_elem = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_elem:\n            max_elem = l[i]\n    return max_elem"}
{"task_id": "HumanEval/68", "completion": "    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    \n    for num, freq in freq_map.items():\n        if num > 0 and freq >= num:\n            return num\n    \n    return -1"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    n = len(lst)\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(lst[i])\n        else:\n            result.append(lst[n-i-1])\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return min(changes, n - changes)"}
{"task_id": "HumanEval/88", "completion": "    first = array[0]\n    last = array[-1]\n    total_sum = first + last\n    if total_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    first_smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < first_smallest:\n            second_smallest = first_smallest\n            first_smallest = num\n        elif num < second_smallest and num != first_smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = None\n    for num in lst:\n        if isPrime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    if largest_prime:\n        return sum(int(digit) for digit in str(largest_prime))\n    else:\n        return 0"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        has_even_digit = False\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                has_even_digit = True\n                break\n            num = num // 10\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef name_of_digit(digit):\n    names = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return names[digit]\n\ndef sort_and_replace_with_names(arr):\n    if len(arr) == 0:\n        return []\n    \n    arr = [x for x in arr if 1 <= x <= 9]\n    arr = sorted(arr)\n    arr = arr[::-1]\n    \n    return [name_of_digit(x) for x in arr]"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    cnt = 0\n    for i in range(n):\n        left = 0\n        right = 0\n        for j in range(m):\n            left = max(left, grid[i][j])\n            right = max(right, grid[i][m - 1 - j])\n        water = min(left, right)\n        for j in range(m):\n            cnt += math.ceil((grid[i][j] - water) / capacity)\n    return cnt"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    count = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n            count += 1\n    return total"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    visited = [[False for j in range(m)] for i in range(n)]\n    res = []\n    def dfs(x, y, k):\n        nonlocal res\n        visited[x][y] = True\n        if k == 0:\n            res.append(grid[x][y])\n            return\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                if 0 <= x + i < n and 0 <= y + j < m and not visited[x + i][y + j]:\n                    dfs(x + i, y + j, k - 1)\n        visited[x][y] = False\n    \n    for i in range(n):\n        for j in range(m):\n            dfs(i, j, k)\n    \n    return sorted(res)"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            return -1\n    return n-1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    max_end = max_so_far = numbers[0]\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_end = max(numbers[i], max_end + numbers[i])\n        max_so_far = max(max_so_far, max_end)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/24", "completion": "    if n % 2 == 0:\n        return n // 2\n    for i in range(n - 1, 0, -2):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/26", "completion": "    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "    return max(l)"}
{"task_id": "HumanEval/68", "completion": "    min_even = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            min_index = i\n    if min_even == float('inf'):\n        return []\n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    for num in sorted(lst, reverse=True):\n        if freq_map[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    result = []\n    for i in range(len(lst)//2):\n        result.append(lst[i])\n        result.append(lst[-i-1])\n    if len(lst) % 2 != 0:\n        result.append(lst[len(lst)//2])\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"}
{"task_id": "HumanEval/94", "completion": "    max_prime = -1\n    for num in lst:\n        if num > 1:\n            for i in range(2, int(num/2) + 1):\n                if num % i == 0:\n                    break\n            else:\n                max_prime = max(max_prime, num)\n    if max_prime == -1:\n        return \"No prime number found\"\n    else:\n        return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        flag = 1\n        while num > 0:\n            if num % 2 == 0:\n                flag = 0\n                break\n            num //= 10\n        if flag:\n            result.append(num)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef replace_with_name(arr):\n    name_map = {\"1\": \"One\", \"2\": \"Two\", \"3\": \"Three\", \"4\": \"Four\", \"5\": \"Five\", \"6\": \"Six\", \"7\": \"Seven\", \"8\": \"Eight\", \"9\": \"Nine\"}\n    return [name_map[str(i)] for i in arr]\n\ndef sortAndReplace(arr):\n    if not arr:\n        return []\n    between_1_and_9 = [i for i in arr if 1 <= i <= 9]\n    between_1_and_9.sort()\n    reversed_arr = list(reversed(between_1_and_9))\n    replaced_arr = replace_with_name(reversed_arr)\n    return replaced_arr"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    def dfs(i, j, cnt, visited):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or visited[i][j] or grid[i][j] == 0:\n            return cnt\n        visited[i][j] = True\n        max_val = cnt\n        for dx, dy in [(0,1), (0,-1), (1,0), (-1,0)]:\n            x, y = i+dx, j+dy\n            if x >= 0 and x < len(grid) and y >= 0 and y < len(grid[0]) and grid[x][y] == 1 and dfs(x, y, cnt+1, visited):\n                max_val = max(max_val, dfs(x, y, cnt+1, visited))\n        return max_val\n    \n    max_val = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n                max_val = max(max_val, dfs(i, j, 1, visited))\n    return math.ceil(max_val/capacity)"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[:k]"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                visited = [[False for _ in range(m)] for _ in range(n)]\n                visited[i][j] = True\n                queue = []\n                queue.append((i, j, 1))\n                while queue:\n                    x, y, cnt = queue.pop(0)\n                    if cnt == k:\n                        return [grid[i][j] for i, j in [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]]\n                    for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nx, ny = x + dx, y + dy\n                        if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]:\n                            visited[nx][ny] = True\n                            queue.append((nx, ny, cnt+1))\n    return []"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            return -1\n    return n-1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    max_list = []\n    max_ending_here = [float('-inf')]\n    for i in range(len(numbers)):\n        max_ending_here.append(max(max_ending_here[-1], numbers[i]))\n        max_list.append(max_ending_here[-1])\n    return max_list"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "    if not l:\n        return None\n    max_elem = l[0]\n    for num in l[1:]:\n        if num > max_elem:\n            max_elem = num\n    return max_elem"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    for num in sorted(freq_map, key=freq_map.get, reverse=True):\n        if freq_map[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    n = len(lst)\n    result = []\n    for i in range(n//2):\n        result.append(lst[i])\n        result.append(lst[n-1-i])\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return []\n    first_index_value = array[0]\n    last_index_value = array[-1]\n    \n    if (first_index_value + last_index_value) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    \n    return array"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    return second_smallest"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = float('-inf')\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/104", "completion": "    def is_even_digit(n):\n        return any(int(d) % 2 == 0 for d in str(n))\n\n    return sorted(set(n for n in x if not is_even_digit(n)))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef replace_digit_with_name(arr):\n    digit_name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    for i in range(len(arr)):\n        arr[i] = digit_name[arr[i]-1]\n    return arr\n\ndef sortAndReplace(arr):\n    return replace_digit_with_name(by_length(arr))[::-1]"}
{"task_id": "HumanEval/114", "completion": "    curr_sum = nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        curr_sum = min(nums[i], curr_sum + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    n = len(grid)\n    m = len(grid[0])\n    result = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                result += math.ceil((i + j + 1) / capacity)\n    \n    return result"}
{"task_id": "HumanEval/120", "completion": "    n = len(arr)\n    if k == 0:\n        return []\n    if k > n:\n        return sorted(arr, reverse=True)\n    \n    # Solution using selection sort algorithm\n    for i in range(n - k + 1):\n        max_idx = i\n        for j in range(i+1, n):\n            if arr[j] > arr[max_idx]:\n                max_idx = j\n        arr[i], arr[max_idx] = arr[max_idx], arr[i]\n        \n    return arr[:k]"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        if arr[i] < 100:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/129", "completion": "    rows, cols = len(grid), len(grid[0])\n    visited = set()\n\n    def dfs(x, y, path, k):\n        if len(path) == k:\n            return path\n        min_path = None\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                res = dfs(nx, ny, path + [grid[nx][ny]], k)\n                if res and (not min_path or res < min_path):\n                    min_path = res\n                visited.remove((nx, ny))\n        return min_path\n\n    for i in range(rows):\n        for j in range(cols):\n            visited.add((i, j))\n            res = dfs(i, j, [grid[i][j]], k)\n            if res:\n                return res\n            visited.remove((i, j))\n\n    return []"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(max(numbers[i:i+2]))\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "    maximum = l[0]\n    for i in l:\n        if i > maximum:\n            maximum = i\n    return maximum"}
{"task_id": "HumanEval/68", "completion": "    if len(arr) == 0:\n        return []\n    min_even = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            min_index = i\n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_num = -1\n    for num, count in freq.items():\n        if num > 0 and count >= num:\n            max_num = max(max_num, num)\n    return max_num"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    return sorted(lst[::2]) + sorted(lst[1::2], reverse=True)"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return array\n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "HumanEval/94", "completion": "    max_prime = -1\n    for num in lst:\n        if num > 1:\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    break\n            else:\n                if num > max_prime:\n                    max_prime = num\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/104", "completion": "    result = set()\n    for num in x:\n        while num > 0:\n            digit = num % 10\n            if digit % 2 != 0:\n                result.add(num)\n            num //= 10\n    return sorted(list(result))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef replace_digits_with_names(arr):\n    digit_names = {1:'One', 2:'Two', 3:'Three', 4:'Four', 5:'Five', 6:'Six', 7:'Seven', 8:'Eight', 9:'Nine'}\n    return [digit_names[i] for i in arr]\n\ndef sort_and_replace_digits(arr):\n    arr = [i for i in arr if 1 <= i <= 9]  # filter out strange numbers\n    arr = by_length(arr)  # sort by length\n    arr = replace_digits_with_names(arr)  # replace digits with names\n    arr.reverse()  # reverse the array\n    return arr"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    m, n = len(grid), len(grid[0])\n    water = 0\n    lower = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                water += 1\n    return math.ceil(water / capacity)"}
{"task_id": "HumanEval/120", "completion": "    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/122", "completion": "    return sum(num for num in arr[:k] if num < 100)"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    visited = [[0 for _ in range(m)] for _ in range(n)]\n    path = []\n\n    def dfs(i, j, k):\n        nonlocal path\n        if k == 0:\n            return\n        visited[i][j] = 1\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            x, y = i + dx, j + dy\n            if 0 <= x < n and 0 <= y < m and not visited[x][y]:\n                if grid[x][y] == path[-1] + 1:\n                    dfs(x, y, k - 1)\n                elif grid[x][y] > path[-1]:\n                    path.append(grid[x][y])\n                    dfs(x, y, k - 1)\n                    path.pop()\n        return\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                dfs(i, j, k)\n                if k == 0:\n                    return []\n                path.pop()\n    return path"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] >= arr[i + 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    rolling_max_list = []\n    n = len(numbers)\n    max_ending_here = [0] * (n + 1)\n    max_so_far = 0\n    for i in range(n):\n        max_ending_here[i + 1] = max(numbers[i], max_ending_here[i])\n        max_so_far = max(max_so_far, max_ending_here[i + 1])\n        rolling_max_list.append(max_so_far)\n    return rolling_max_list"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    unique_elements = set()\n    for element in l:\n        unique_elements.add(element)\n    return sorted(list(unique_elements))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/68", "completion": "    even_values = [node for node in arr if node % 2 == 0]\n    if not even_values:\n        return []\n    min_even = min(even_values)\n    return [min_even, arr.index(min_even)]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    result = -1\n    for num, count in freq.items():\n        if count >= num and num > result:\n            result = num\n    return result"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    n = len(lst)\n    for i in range(0, n-1, 2):\n        if i+1 < n:\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return min(count, 1)"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return []\n    first = array[0]\n    last = array[-1]\n    total = first + last\n    if total % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    if max_prime == -1:\n        return 0\n    \n    digit_sum = sum(int(digit) for digit in str(max_prime))\n    return digit_sum"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        num_str = str(num)\n        if all(int(digit) % 2 != 0 for digit in num_str):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef reverse_array(arr):\n    return arr[::-1]\n\ndef replace_digit_by_name(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[num] for num in arr]\n\ndef process_array(arr):\n    arr = by_length(arr)\n    arr = reverse_array(arr)\n    arr = replace_digit_by_name(arr)\n    return arr"}
{"task_id": "HumanEval/114", "completion": "    cur_sum = min_sum = nums[0]\n    for num in nums[1:]:\n        cur_sum = min(num, cur_sum + num)\n        min_sum = min(min_sum, cur_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                ans += 1\n    buckets = math.ceil(ans/capacity)\n    return buckets"}
{"task_id": "HumanEval/120", "completion": "    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/122", "completion": "    total_sum = 0\n    for i in range(min(k, len(arr))):\n        if abs(arr[i]) < 100:\n            total_sum += arr[i]\n    return total_sum"}
{"task_id": "HumanEval/129", "completion": "    m, n = len(grid), len(grid[0])\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def isSafe(x, y, visited, k, value):\n        return 0 <= x < m and 0 <= y < n and not visited[x][y] and grid[x][y] == value and k - 1 >= 1\n\n    def dfs(x, y, visited, k, path):\n        visited[x][y] = True\n        path.append(grid[x][y])\n        if len(path) == k:\n            return True\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if isSafe(nx, ny, visited, k, grid[x][y]):\n                if dfs(nx, ny, visited, k, path):\n                    return True\n        visited[x][y] = False\n        path.pop()\n        return False\n\n    for i in range(m):\n        for j in range(n):\n            visited = [[False] * n for _ in range(m)]\n            if dfs(i, j, visited, k, []):\n                return sorted(path)\n    return []"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    return [abs(score-guess[i]) for i, score in enumerate(game)]"}
{"task_id": "HumanEval/9", "completion": "    max_ending_here = [0] * len(numbers)\n    max_so_far = [0] * len(numbers)\n    max_ending_here[0] = numbers[0]\n    max_so_far[0] = numbers[0]\n    \n    for i in range(1, len(numbers)):\n        max_ending_here[i] = max(numbers[i], max_ending_here[i-1] + numbers[i])\n        max_so_far[i] = max(max_so_far[i-1], max_ending_here[i])\n    \n    return max_so_far"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if len(l) == 0:\n        return None\n    max = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max:\n            max = l[i]\n    return max"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_even = float('inf')\n    min_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_even:\n            min_even = num\n            min_index = i\n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    for num, freq in sorted(freq_map.items(), key=lambda x: (-x[1], -x[0])):\n        if num > 0 and freq >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    for i in range(1, len(lst) - 1, 2):\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/88", "completion": "    if len(array) <= 1:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = float('-inf')\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/104", "completion": "    unique = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            unique.append(num)\n    unique.sort()\n    return unique"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: len(str(x)))\n\ndef digitsToNames(arr):\n    names = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[int(digit)] for digit in arr]\n\ndef sortAndReplace(arr):\n    arr = sorted(by_length(arr))\n    arr = digitsToNames(arr)\n    return arr"}
{"task_id": "HumanEval/114", "completion": "    if not nums:\n        return 0\n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    row_length = len(grid[0])\n    col_length = len(grid)\n    total_water = sum(grid[i][j] for i in range(col_length) for j in range(row_length))\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/120", "completion": "    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        if arr[i] < 100:\n            total += arr[i]\n        else:\n            total += arr[i] // 100\n    return total"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    visited = [[0 for x in range(m)] for y in range(n)]\n    \n    def backtrack(x, y, path, count):\n        if count == k:\n            return path\n        min_path = float('inf')\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]:\n                visited[nx][ny] = 1\n                temp = backtrack(nx, ny, path + [grid[nx][ny]], count + 1)\n                visited[nx][ny] = 0\n                if temp:\n                    min_path = min(min_path, temp)\n        return min_path\n    \n    for i in range(n):\n        for j in range(m):\n            visited[i][j] = 1\n            path = backtrack(i, j, [grid[i][j]], 1)\n            if path:\n                return path\n            visited[i][j] = 0\n    return []"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_index = -1\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    max_val = float('-inf')\n    result = []\n    for num in numbers:\n        max_val = max(num, max_val)\n        result.append(max_val)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    maximum = l[0]\n    for i in range(1, len(l)):\n        if l[i] > maximum:\n            maximum = l[i]\n    return maximum"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n\n    max_num = -1\n    for num, freq in freq_map.items():\n        if freq >= num and num > max_num:\n            max_num = num\n\n    return max_num"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    i, j = 0, len(sorted_lst) - 1\n    while i <= j:\n        if i == j:\n            result.append(sorted_lst[i])\n        else:\n            result.append(sorted_lst[i])\n            result.append(sorted_lst[j])\n        i += 1\n        j -= 1\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    min_changes = float('inf')\n    for i in range(n // 2):\n        min_changes = min(min_changes, i + (n - i - 1) - (arr[i] == arr[n - i - 1]))\n    return min_changes"}
{"task_id": "HumanEval/88", "completion": "    if len(array) < 2:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime = -1\n    for num in lst:\n        if isPrime(num) and num > largest_prime:\n            largest_prime = num\n\n    return sumOfDigits(largest_prime)"}
{"task_id": "HumanEval/104", "completion": "    def hasEvenDigit(num):\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                return True\n            num //= 10\n        return False\n\n    result = []\n    for num in x:\n        if not hasEvenDigit(num):\n            result.append(num)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef name_of_digit(num):\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'][num-1]\n\ndef sortAndName(arr):\n    if arr:\n        return [name_of_digit(x) for x in by_length(arr[1:-1])]\n    else:\n        return []"}
{"task_id": "HumanEval/114", "completion": "    minSum = float('inf')\n    currSum = 0\n    for num in nums:\n        currSum = max(num, currSum + num)\n        minSum = min(minSum, currSum)\n    return minSum"}
{"task_id": "HumanEval/115", "completion": "    m, n = len(grid), len(grid[0])\n    res = 0\n    for i in range(m):\n        left, right = 0, n-1\n        while left < right:\n            mid = left + (right - left) // 2\n            if mid == n-1 or grid[i][mid+1] == 0:\n                res += 1\n                left = mid+1\n            else:\n                right = mid\n    return math.ceil(res / capacity)"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/122", "completion": "    total_sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total_sum += arr[i]\n    return total_sum"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    def dfs(i, j, k):\n        if k == 0:\n            return []\n        if i < 0 or i >= n or j < 0 or j >= m or grid[i][j] == -1:\n            return float('inf')\n        if k == 1:\n            return [grid[i][j]]\n        res = []\n        for x, y in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            res.extend(dfs(i + x, j + y, k - 1))\n        return min(res)\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == -1:\n                grid[i][j] = dfs(i, j, k)\n    ans = min(grid, key=lambda x: (x[0], x[-1]))\n    return ans"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    largest_index = -1\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n    return largest_index"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_ending_here = float('-inf')\n    max_so_far = float('-inf')\n\n    for number in numbers:\n        max_ending_here = max(number, max_ending_here + number)\n        max_so_far = max(max_so_far, max_ending_here)\n        result.append(max_so_far)\n\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    unique_numbers = []\n    for num in numbers:\n        if num not in seen:\n            unique_numbers.append(num)\n            seen.add(num)\n    return unique_numbers"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_value = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_value:\n            max_value = l[i]\n    return max_value"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_even = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            min_index = i\n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    \n    for num in sorted(freq_map.keys(), reverse=True):\n        if freq_map[num] >= num:\n            return num\n    \n    return -1"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(lst[i // 2])\n        else:\n            result.append(lst[-(i // 2) - 1])\n    return result"}
{"task_id": "HumanEval/73", "completion": "    change = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i-1]:\n            change += 1\n    return min(change, len(arr) - change)"}
{"task_id": "HumanEval/88", "completion": "    if len(array) < 2:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    if max_prime == -1:\n        return 0\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/104", "completion": "    unique_nums = set()\n    for num in x:\n        has_even_digit = False\n        num_str = str(num)\n        for digit in num_str:\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            unique_nums.add(num)\n    return sorted(list(unique_nums))"}
{"task_id": "HumanEval/105", "completion": "    return arr[::-1]\n\ndef replace_with_names(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [names[num-1] for num in arr]\n    return result\n\ndef sortAndReplace(arr):\n    if not arr:\n        return []\n    arr = [num for num in arr if 1 <= num <= 9]\n    arr.sort()\n    return replace_with_names(arr)"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    bucket_fill = 0\n    for i in range(n):\n        row_water = sum(grid[i])\n        bucket_fill += math.ceil(row_water/capacity) * capacity - row_water\n    return bucket_fill"}
{"task_id": "HumanEval/120", "completion": "    sorted_arr = sorted(arr, reverse=True)\n    return sorted_arr[:k]"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    count = 0\n    for num in arr[:k]:\n        if count < 2:\n            total += num\n            count += 1\n        else:\n            total += min(num, 99)\n    return total"}
{"task_id": "HumanEval/129", "completion": "    rows, cols = len(grid), len(grid[0])\n    min_path = float('inf')\n    def dfs(i, j, path, length):\n        nonlocal min_path\n        if length == k:\n            min_path = min(min_path, path)\n            return\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= x < rows and 0 <= y < cols:\n                new_path = path + [grid[x][y]]\n                dfs(x, y, new_path, length+1)\n    for i in range(rows):\n        for j in range(cols):\n            dfs(i, j, [grid[i][j]], 1)\n    return min_path if min_path != float('inf') else []"}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr)-1,0,-1):\n        if arr[i]<arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]"}
{"task_id": "HumanEval/9", "completion": "    max_so_far = float('-inf')\n    max_so_far_index = -1\n    max_values = []\n    for i in range(len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_so_far_index = i\n        max_values.append(max_so_far)\n    return max_values"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/34", "completion": "    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "    if len(l) == 1:\n        return l[0]\n    max_elem = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_elem:\n            max_elem = l[i]\n    return max_elem"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_even = float('inf')\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            index = i\n    return [min_even, index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    n = len(lst)\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(lst[i//2])\n        else:\n            result.append(lst[-(i//2+1)])\n    return result"}
{"task_id": "HumanEval/73", "completion": "    count = 0\n    for i in range(len(arr)):\n        if arr[i] != arr[-i-1]:\n            count += 1\n    return min(count, len(arr)//2)"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return []\n    first, last = array[0], array[-1]\n    if (first + last) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if is_prime(num):\n            max_prime = max(max_prime, num)\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/104", "completion": "    result = set()\n    for num in x:\n        while num > 0:\n            digit = num % 10\n            if digit % 2 != 0:\n                result.add(num)\n            num //= 10\n    return sorted(list(result))"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef compare(a, b):\n    a_str = str(a)\n    b_str = str(b)\n    return (a_str > b_str) - (a_str < b_str)\n\ndef digitToName(num):\n    if num == 1:\n        return 'One'\n    elif num == 2:\n        return 'Two'\n    elif num == 3:\n        return 'Three'\n    elif num == 4:\n        return 'Four'\n    elif num == 5:\n        return 'Five'\n    elif num == 6:\n        return 'Six'\n    elif num == 7:\n        return 'Seven'\n    elif num == 8:\n        return 'Eight'\n    elif num == 9:\n        return 'Nine'\n    else:\n        return 'Strange number'\n\ndef sortAndReverse(arr):\n    if not arr:\n        return []\n    \n    def compare(a, b):\n        a_str = str(a)\n        b_str = str(b)\n        return (a_str > b_str) - (a_str < b_str)\n    \n    arr.sort(key=compare)\n    arr = arr[1:-1]\n    arr.reverse()\n    return [digitToName(num) for num in arr]"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    max_water = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                bucket_capacity = min(capacity, j + 1)\n                max_water += bucket_capacity * (i - j + 1)\n    return math.ceil(max_water / capacity)"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[:k]\n\ndef findK(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(min(k, len(arr))):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/129", "completion": "    rows, cols = len(grid), len(grid[0])\n    directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]\n    \n    def dfs(x, y, visited, path):\n        visited[x][y] = True\n        path.append(grid[x][y])\n        if len(path) == k:\n            return True\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < rows and 0 <= ny < cols and not visited[nx][ny]:\n                if dfs(nx, ny, visited, path):\n                    return True\n        path.pop()\n        visited[x][y] = False\n        return False\n    \n    start = (0, 0)\n    visited = [[False] * cols for _ in range(rows)]\n    path = []\n    dfs(start[0], start[1], visited, path)\n    return path"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    ans = -1\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            ans = i\n    if ans == -1:\n        return -1\n    for i in range(ans+1, n):\n        if arr[i] > arr[ans]:\n            return -1\n    return ans"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    rolling_max_list = []\n    max_val = float('-inf')\n    for num in numbers:\n        max_val = max(max_val, num)\n        rolling_max_list.append(max_val)\n    return rolling_max_list"}
{"task_id": "HumanEval/21", "completion": "    minimum = min(numbers)\n    maximum = max(numbers)\n    return [(x - minimum) / (maximum - minimum) for x in numbers]"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_ele = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_ele:\n            max_ele = l[i]\n    return max_ele"}
{"task_id": "HumanEval/68", "completion": "    min_even = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            min_index = i\n    if min_even == float('inf'):\n        return []\n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    for num in sorted(freq, reverse=True):\n        if freq[num] >= num:\n            return num\n    \n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return lst\n    \n    result = []\n    \n    # Fill result with minimum values\n    result.extend(sorted(lst))\n    \n    # Fill result with maximum values\n    result.extend(sorted(lst, reverse=True))\n    \n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = n - 1\n    j = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            while j < n - 1 and arr[j] == arr[n - 1 - i]:\n                j += 1\n            ans += 1\n            arr[j] = arr[i]\n    return ans"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    return second_smallest"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    largest_prime = max(filter(is_prime, lst), default=0)\n    return sum_of_digits(largest_prime)"}
{"task_id": "HumanEval/104", "completion": "    unique_elements = set()\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            unique_elements.add(num)\n    return sorted(list(unique_elements))"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef sortAndReplace(arr):\n    if not arr:\n        return []\n    arr.sort(key=by_length)\n    arr.reverse()\n    return [name for num in arr for name, val in {\"One\": 1, \"Two\": 2, \"Three\": 3, \"Four\": 4, \"Five\": 5, \"Six\": 6, \"Seven\": 7, \"Eight\": 8, \"Nine\": 9}.items() if val == num]"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    buckets = math.ceil(cols / capacity)\n    \n    bucket_dist = [0] * buckets\n    for row in grid:\n        for bucket in range(buckets):\n            bucket_dist[bucket] += row[bucket * capacity:(bucket + 1) * capacity].count(1)\n    \n    return max(bucket_dist)"}
{"task_id": "HumanEval/120", "completion": "    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        num = arr[i]\n        if num < 100:\n            total += num\n    return total"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    directions = [[-1, 0], [1, 0], [0, -1], [0, 1]]\n    res = []\n    def dfs(r, c, k, path):\n        nonlocal res\n        if k == 0:\n            res.append(path)\n            return\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n and not visited[nr][nc]:\n                visited[nr][nc] = True\n                dfs(nr, nc, k - 1, path + [grid[nr][nc]])\n                visited[nr][nc] = False\n    for r in range(n):\n        for c in range(n):\n            visited = [[False] * n for _ in range(n)]\n            visited[r][c] = True\n            dfs(r, c, k, [grid[r][c]])\n    return min(res)"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    n = len(numbers)\n    max_window = [0] * n\n    max_so_far = 0\n    \n    for i in range(n):\n        max_so_far = max(max_so_far, numbers[i])\n        max_window[i] = max_so_far\n    \n    rolling_max_list = []\n    for i in range(n):\n        rolling_max_list.append(max_window[i])\n        \n        if i >= n - 1:\n            break\n        \n        max_so_far = max(max_so_far, numbers[i + n - 1])\n        max_window[i + n - 1] = max_so_far\n    \n    return rolling_max_list"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_idx = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_idx = i\n    return [min_val, min_idx]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    for num in sorted(lst, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    for i in range(1, len(lst) - 1, 2):\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return min(count, n-count)"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    first, last = array[0], array[-1]\n    if (first + last) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    largest_prime = float('-inf')\n    for num in lst:\n        if isPrime(num) and num > largest_prime:\n            largest_prime = num\n    \n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/104", "completion": "    unique_elements = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            unique_elements.append(num)\n    unique_elements.sort()\n    return unique_elements"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef replaceDigits(arr):\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [digit_names[int(num)-1] for num in arr]\n\ndef sortAndReplace(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = by_length(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return replaceDigits(reversed_arr)"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    count = 0\n    for j in range(cols):\n        max_depth = 0\n        for i in range(rows):\n            max_depth = max(max_depth, grid[i][j])\n        count += math.ceil(max_depth / capacity)\n    return count"}
{"task_id": "HumanEval/120", "completion": "    sorted_arr = sorted(arr, reverse=True)\n    return sorted_arr[:k]"}
{"task_id": "HumanEval/122", "completion": "    result = 0\n    for i in range(k):\n        num = arr[i]\n        while num >= 100:\n            num = num // 100\n        result += num\n    return result"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(x, y, path, k):\n        if k == 0:\n            return path\n        \n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m:\n                new_path = path + [grid[nx][ny]]\n                result = dfs(nx, ny, new_path, k - 1)\n                if result:\n                    return result\n        return None\n    \n    start = (0, 0)\n    result = dfs(start[0], start[1], [grid[start[0]][start[1]]], k)\n    \n    return result"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    result = -1\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            result = i\n    return result"}
{"task_id": "HumanEval/152", "completion": "    return [abs(score - guess[i]) if score != -1 else 0 for i, score in enumerate(game)]"}
{"task_id": "HumanEval/9", "completion": "    rolling_max = []\n    window = numbers[:3]\n    max_window = max(window)\n    rolling_max.append(max_window)\n    \n    for i in range(3, len(numbers)):\n        window.pop(0)\n        window.append(numbers[i])\n        max_window = max(window)\n        rolling_max.append(max_window)\n    \n    return rolling_max"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if not l:\n        return None\n    return max(l)"}
{"task_id": "HumanEval/68", "completion": "    smallest_even = float('inf')\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_even:\n            smallest_even = arr[i]\n            index = i\n    return [smallest_even, index]"}
{"task_id": "HumanEval/69", "completion": "    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    max_val = -1\n    for num, freq in freq_map.items():\n        if num > 0 and freq >= num:\n            max_val = max(max_val, num)\n    return max_val"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    for i in range(len(lst)//2):\n        result.append(lst[i])\n        result.append(lst[-i-1])\n    if len(lst) % 2 != 0:\n        result.append(lst[len(lst)//2])\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    cnt = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            cnt += 1\n    return min(cnt, n - cnt)"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return array\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = float('-inf')\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/104", "completion": "    def has_even(n):\n        while n:\n            if n % 2 == 0:\n                return True\n            n //= 10\n        return False\n\n    unique_set = set()\n    for num in x:\n        if not has_even(num):\n            unique_set.add(num)\n    return sorted(list(unique_set))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef name_digits(num):\n    if num == 1:\n        return \"One\"\n    elif num == 2:\n        return \"Two\"\n    elif num == 3:\n        return \"Three\"\n    elif num == 4:\n        return \"Four\"\n    elif num == 5:\n        return \"Five\"\n    elif num == 6:\n        return \"Six\"\n    elif num == 7:\n        return \"Seven\"\n    elif num == 8:\n        return \"Eight\"\n    elif num == 9:\n        return \"Nine\"\n    else:\n        return \"Strange Number\"\n\ndef sortAndName(arr):\n    if arr:\n        return [name_digits(num) for num in by_length(arr) if 1 <= num <= 9]\n    else:\n        return []"}
{"task_id": "HumanEval/114", "completion": "    if not nums:\n        return 0\n    min_sum = nums[0]\n    current_sum = nums[0]\n    for i in range(1, len(nums)):\n        current_sum = max(nums[i], current_sum + nums[i])\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n, m = len(grid), len(grid[0])\n    ans = 0\n    for j in range(m):\n        water_level = 0\n        bucket_count = 0\n        for i in range(n):\n            if grid[i][j] == 1:\n                water_level += 1\n            elif water_level:\n                bucket_count += math.ceil(water_level/capacity)\n                water_level = 0\n        if water_level:\n            bucket_count += math.ceil(water_level/capacity)\n        ans = max(ans, bucket_count)\n    return ans"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/122", "completion": "    total_sum = 0\n    for num in arr[:k]:\n        if len(str(num)) <= 2:\n            total_sum += num\n    return total_sum"}
{"task_id": "HumanEval/129", "completion": "    def dfs(x, y, k, grid, visited):\n        if k == 0:\n            return [grid[x][y]]\n        visited.add((x, y))\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (nx, ny) not in visited:\n                path = dfs(nx, ny, k - 1, grid, visited)\n                if path:\n                    return [grid[x][y]] + path\n        visited.remove((x, y))\n        return None\n\n    min_path = None\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            path = dfs(i, j, k, grid, set())\n            if path and (min_path is None or path < min_path):\n                min_path = path\n    return min_path"}
{"task_id": "HumanEval/135", "completion": "    for i in range(1, len(arr)):\n        if arr[i] >= arr[i-1]:\n            return -1\n    return len(arr) - 1"}
{"task_id": "HumanEval/152", "completion": "    result=[]\n    for i in range(len(game)):\n        if game[i]==guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    rolling_max_list = []\n    max_val = float('-inf')\n    for num in numbers:\n        max_val = max(max_val, num)\n        rolling_max_list.append(max_val)\n    return rolling_max_list"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]"}
{"task_id": "HumanEval/24", "completion": "    if n < 2:\n        return None\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return None"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_elem = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_elem:\n            max_elem = l[i]\n    return max_elem"}
{"task_id": "HumanEval/68", "completion": "    min_even = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            min_index = i\n    return [min_even, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = max(freq.values())\n    candidates = [key for key, value in freq.items() if value >= key]\n    candidates.sort(reverse=True)\n    for num in candidates:\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    return sorted(lst)[::2] + sorted(lst)[1::2]"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes"}
{"task_id": "HumanEval/88", "completion": "    total_sum = array[0] + array[-1]\n    if total_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    return second_smallest"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_values = [x for x in lst if is_prime(x)]\n    largest_prime = max(prime_values)\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/104", "completion": "    result = set()\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.add(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef by_name(arr):\n    return [\"One\" if x == 1 else \"Two\" if x == 2 else \"Three\" if x == 3 else \"Four\" if x == 4 else \"Five\" if x == 5 else \"Six\" if x == 6 else \"Seven\" if x == 7 else \"Eight\" if x == 8 else \"Nine\" for x in arr]\n\ndef sortAndName(arr):\n    between_one_and_nine = [x for x in arr if 1 <= x <= 9]\n    sorted_between_one_and_nine = by_length(between_one_and_nine)\n    reversed_sorted_between_one_and_nine = sorted_between_one_and_nine[::-1]\n    named_numbers = by_name(reversed_sorted_between_one_and_nine)\n    return named_numbers"}
{"task_id": "HumanEval/114", "completion": "    n = len(nums)\n    result = nums[0]\n    cur_sum = nums[0]\n    for i in range(1, n):\n        cur_sum = min(nums[i], cur_sum + nums[i])\n        result = min(result, cur_sum)\n    return result"}
{"task_id": "HumanEval/115", "completion": "    rows, cols = len(grid), len(grid[0])\n    max_water = 0\n    for i in range(rows):\n        for j in range(cols-1):\n            water = min(grid[i][j], grid[i][j+1])\n            max_water = max(max_water, water)\n    \n    return math.ceil(max_water / capacity)"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(min(k, len(arr))):\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/129", "completion": "    def dfs(r, c, n, m, path, k, ans):\n        if len(path) == k:\n            ans.append(path)\n            return\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] not in path:\n                dfs(nr, nc, n, m, path + [grid[nr][nc]], k, ans)\n    n, m = len(grid), len(grid[0])\n    ans = []\n    for i in range(n):\n        for j in range(m):\n            dfs(i, j, n, m, [grid[i][j]], k, ans)\n    return min(ans)"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1):\n        if arr[i] >= arr[i+1]:\n            return -1\n    return n"}
{"task_id": "HumanEval/152", "completion": "    return [abs(score - guess[i]) if score != guess[i] else 0 for i, score in enumerate(game)]"}
{"task_id": "HumanEval/9", "completion": "    n = len(numbers)\n    rolling_max = [0]*(n+1)\n    for i in range(n):\n        rolling_max[i+1] = max(rolling_max[i], numbers[i])\n    return rolling_max[1:]"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n\t\tif (n % i == 0):\n\t\t\treturn i\n\treturn 1"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = float('-inf')\n    for i in l:\n        if i > max_val:\n            max_val = i\n    return max_val"}
{"task_id": "HumanEval/68", "completion": "    smallest_value = float('inf')\n    smallest_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_value:\n            smallest_value = arr[i]\n            smallest_index = i\n    return [smallest_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    result = -1\n    for num, freq_num in freq.items():\n        if num > 0 and freq_num >= num:\n            result = max(result, num)\n    \n    return result"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    result = []\n    i, j = 0, len(lst) - 1\n    while i <= j:\n        result.append(lst[i])\n        if i != j:\n            result.append(lst[j])\n        i += 1\n        j -= 1\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return min(count, n-count)"}
{"task_id": "HumanEval/88", "completion": "    sum_first_last = array[0] + array[-1]\n    \n    if sum_first_last % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    \n    return array"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"}
{"task_id": "HumanEval/94", "completion": "    max_prime = -1\n    for num in lst:\n        if num > 1:\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    break\n            else:\n                max_prime = max(max_prime, num)\n    if max_prime == -1:\n        return 0\n    else:\n        return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/104", "completion": "    unique_set = set()\n    for num in x:\n        num_str = str(num)\n        if all(int(digit) % 2 != 0 for digit in num_str):\n            unique_set.add(num)\n    unique_list = sorted(list(unique_set))\n    return unique_list"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef replace_by_name(arr):\n    name_map = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    return [name_map[num] for num in arr]\n\ndef sortAndReplace(arr):\n    arr = by_length(arr)\n    arr = replace_by_name(arr)\n    arr.reverse()\n    return arr"}
{"task_id": "HumanEval/114", "completion": "    current_sum = nums[0]\n    min_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows, cols = len(grid), len(grid[0])\n    \n    buckets = [0] * (rows + 1)\n    \n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == 1:\n                buckets[r + 1] += 1\n    \n    total_water = math.floor(min(buckets) / capacity) * capacity\n    return total_water"}
{"task_id": "HumanEval/120", "completion": "    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/122", "completion": "    total_sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total_sum += arr[i]\n    return total_sum"}
{"task_id": "HumanEval/129", "completion": "    def dfs(x, y, index, path, visited):\n        if index == k:\n            return path\n        min_path = []\n        for i, j in [(x+1,y), (x-1,y), (x,y+1), (x,y-1)]:\n            if 0<=i<len(grid) and 0<=j<len(grid[0]) and (i,j) not in visited:\n                visited.add((i,j))\n                path.append(grid[i][j])\n                min_path = min(min_path, dfs(i, j, index+1, path, visited))\n                visited.remove((i,j))\n                path.pop()\n        return min_path\n    \n    min_path = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            min_path = min(min_path, dfs(i, j, 1, [grid[i][j]], {(i,j)}))\n    return min_path"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            return -1\n    return n-1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    rolling_max_list = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        rolling_max_list.append(max_so_far)\n    return rolling_max_list"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/24", "completion": "    if n == 1:\n        return 1\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/26", "completion": "    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        max_val = max(max_val, l[i])\n    return max_val"}
{"task_id": "HumanEval/68", "completion": "    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_num = -1\n    for num in freq:\n        if num > 0 and freq[num] >= num and num > max_num:\n            max_num = num\n    return max_num"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    return [min(lst), max(lst)][::-1][1:-1]"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes // 2"}
{"task_id": "HumanEval/88", "completion": "    n = len(array)\n    if (n < 2):\n        return array\n    \n    start = 0\n    end = n-1\n    \n    while (start < end):\n        if (array[start] + array[end] % 2 == 0):\n            array[start], array[end] = array[end], array[start]\n        if (array[start] + array[end] % 2 != 0):\n            start += 1\n        end -= 1\n    \n    return array"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    second_min_val = float('inf')\n    for num in lst:\n        if num < min_val:\n            second_min_val = min_val\n            min_val = num\n        elif num < second_min_val and num != min_val:\n            second_min_val = num\n    return second_min_val if second_min_val != float('inf') else None"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(num):\n        return sum(int(digit) for digit in str(num))\n\n    primes = [num for num in lst if isPrime(num)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/104", "completion": "    unique = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            unique.append(num)\n    unique.sort()\n    return unique"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: len(x))\n\ndef reverse_array(arr):\n    return arr[::-1]\n\ndef name_of_digit(num):\n    if num == 1:\n        return \"One\"\n    elif num == 2:\n        return \"Two\"\n    elif num == 3:\n        return \"Three\"\n    elif num == 4:\n        return \"Four\"\n    elif num == 5:\n        return \"Five\"\n    elif num == 6:\n        return \"Six\"\n    elif num == 7:\n        return \"Seven\"\n    elif num == 8:\n        return \"Eight\"\n    elif num == 9:\n        return \"Nine\"\n    else:\n        return \"Strange Number\"\n\ndef transform_array(arr):\n    if not arr:\n        return []\n    \n    between_1_9 = [x for x in arr if 1 <= x <= 9]\n    between_1_9.sort()\n    \n    transformed_arr = [name_of_digit(x) for x in between_1_9]\n    \n    return transformed_arr"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    start = 0\n    for end in range(len(nums)):\n        current_sum += nums[end]\n        while current_sum < 0:\n            current_sum -= nums[start]\n            start += 1\n        min_sum = min(min_sum, current_sum)\n    return min_sum if min_sum != float('inf') else 0"}
{"task_id": "HumanEval/115", "completion": "    N = len(grid)\n    M = len(grid[0])\n    res = 0\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 1:\n                res += math.ceil((i + 1) / capacity) - 1\n    return res"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    return sum(x for x in arr[:k] if x < 100)"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    res = []\n    for i in range(n):\n        for j in range(n):\n            visited = [[False for _ in range(n)] for _ in range(n)]\n            path = [[i, j]]\n            visited[i][j] = True\n            while len(path) < k:\n                curr = path[-1]\n                neighbors = []\n                if curr[0] > 0 and not visited[curr[0] - 1][curr[1]]:\n                    neighbors.append([curr[0] - 1, curr[1]])\n                if curr[0] < n - 1 and not visited[curr[0] + 1][curr[1]]:\n                    neighbors.append([curr[0] + 1, curr[1]])\n                if curr[1] > 0 and not visited[curr[0]][curr[1] - 1]:\n                    neighbors.append([curr[0], curr[1] - 1])\n                if curr[1] < n - 1 and not visited[curr[0]][curr[1] + 1]:\n                    neighbors.append([curr[0], curr[1] + 1])\n                if neighbors:\n                    next_cell = min(neighbors, key=lambda x: (grid[x[0]][x[1]]))\n                    visited[next_cell[0]][next_cell[1]] = True\n                    path.append(next_cell)\n                else:\n                    break\n            res.extend([grid[x][y] for x, y in path[:k]])\n    return res"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1,0,-1):\n        if arr[i] > arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    for i in range(len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if not l:\n        return None\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_even = float('inf')\n    index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_even:\n            min_even = num\n            index = i\n    return [min_even, index]"}
{"task_id": "HumanEval/69", "completion": "    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    for num in sorted(freq_map.keys(), reverse=True):\n        if freq_map[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    return [x for _, x in sorted(zip(lst, lst))]"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    change = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            change += 1\n    return change"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"}
{"task_id": "HumanEval/94", "completion": "    max_prime = 0\n    for num in lst:\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                max_prime = num\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        while n > 0:\n            if n % 10 % 2 == 0:\n                return True\n            n //= 10\n        return False\n    \n    unique_nums = set()\n    for num in x:\n        if not has_even_digit(num):\n            unique_nums.add(num)\n    \n    return sorted(list(unique_nums))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef by_name(arr):\n    num_names = {\"1\": \"One\", \"2\": \"Two\", \"3\": \"Three\", \"4\": \"Four\", \"5\": \"Five\", \"6\": \"Six\", \"7\": \"Seven\", \"8\": \"Eight\", \"9\": \"Nine\"}\n    return [num_names[str(x)] for x in arr]\n\ndef sortAndReplace(arr):\n    return by_name(by_length(arr))"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    n = len(grid)\n    m = len(grid[0])\n    bucket_capacity = capacity\n    water = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                water += 1\n    return math.ceil(water * bucket_capacity / (lcm(n, m)))"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]\n\ndef maximumK(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        if abs(arr[i]) <= 9:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    visited = set()\n    ans = []\n    \n    def dfs(r, c, k):\n        if k == 0:\n            return True\n        \n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited:\n                visited.add((nr, nc))\n                lst = []\n                dfs(nr, nc, k - 1)\n                if k == 1:\n                    ans.append(grid[r][c])\n                else:\n                    lst += grid[r][c]\n                    if lst < ans:\n                        ans = lst\n                visited.remove((nr, nc))\n                \n    for i in range(n):\n        for j in range(m):\n            visited.add((i, j))\n            lst = []\n            dfs(i, j, k)\n            if k == 1:\n                ans.append(grid[i][j])\n            else:\n                ans = lst\n    return ans"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    max_ending_here = max_so_far = numbers[0]\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_ending_here = max(numbers[i], max_ending_here + numbers[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/24", "completion": "    largest = -1\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            largest = max(largest, i)\n            if n//i != i:\n                largest = max(largest, n//i)\n    return largest"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if not l:\n        return None\n    return max(l)"}
{"task_id": "HumanEval/68", "completion": "    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    \n    for num in sorted(freq_map.keys(), reverse=True):\n        if freq_map[num] >= num:\n            return num\n    \n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(lst[i // 2])\n        else:\n            result.append(lst[-(i // 2 + 1)])\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] == arr[j]:\n                dp[i][j] = 1 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return n - dp[0][n-1]"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        return sum(int(digit) for digit in str(n))\n\n    max_prime = float('-inf')\n    for num in lst:\n        if isPrime(num) and num > max_prime:\n            max_prime = num\n\n    return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        while n:\n            if n % 2 == 0:\n                return True\n            n = n // 10\n        return False\n\n    unique = set()\n    for num in x:\n        if not has_even_digit(num):\n            unique.add(num)\n    return sorted(list(unique))"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef get_digit_name(num):\n    digit_names = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return digit_names[num]\n\ndef sortAndReplace(arr):\n    if len(arr) == 0:\n        return []\n    numbers_between_1_and_9 = [x for x in arr if 1 <= x <= 9]\n    numbers_between_1_and_9.sort()\n    reversed_array = numbers_between_1_and_9[::-1]\n    return [get_digit_name(x) for x in reversed_array]"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    bucket = [0] * capacity\n    count = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                bucket[count] += 1\n                count += 1\n                if count == capacity:\n                    count = 0\n                \n    return math.ceil(sum(bucket) / capacity)"}
{"task_id": "HumanEval/120", "completion": "    if k >= len(arr):\n        return sorted(arr)\n    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        if arr[i] < 100:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/129", "completion": "    def dfs(r, c, count):\n        if count == k:\n            return [grid[r][c]]\n        min_path = []\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < m and 0 <= nc < n and not visited[nr][nc]:\n                visited[nr][nc] = True\n                path = dfs(nr, nc, count + 1)\n                if path:\n                    min_path = min(min_path, [grid[r][c]] + path)\n                visited[nr][nc] = False\n        return min_path\n    \n    m, n = len(grid), len(grid[0])\n    visited = [[False] * n for _ in range(m)]\n    min_path = dfs(0, 0, 1)\n    return min_path"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            return -1\n    return n-1"}
{"task_id": "HumanEval/152", "completion": "    return [abs(game[i] - guess[i]) for i in range(len(game))]"}
{"task_id": "HumanEval/9", "completion": "    max_so_far = float('-inf')\n    max_indices = []\n    result = []\n    for i in range(len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n            max_indices.append(i)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    rescaled_numbers = [(num - min_val) / (max_val - min_val) for num in numbers]\n    return rescaled_numbers"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(dict.fromkeys(l))"}
{"task_id": "HumanEval/35", "completion": "    max_elem = l[0]\n    for num in l:\n        if num > max_elem:\n            max_elem = num\n    return max_elem"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_idx = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_idx = i\n    return [min_val, min_idx]"}
{"task_id": "HumanEval/69", "completion": "    lst.sort(reverse=True)\n    for i in range(1, len(lst)):\n        if lst[i] >= i:\n            return lst[i]\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    lst.sort()\n    n = len(lst)\n    result = []\n    i, j = 0, n-1\n    while i <= j:\n        if i == j:\n            result.append(lst[i])\n        else:\n            result.append(lst[i])\n            result.append(lst[j])\n        i += 1\n        j -= 1\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            ans += 1\n            if i < n // 2 - 1:\n                j = i + 1\n                while arr[j] != arr[n - i - 1]:\n                    j += 1\n                arr[i:j+1] = arr[i:j+1][::-1]\n    return ans"}
{"task_id": "HumanEval/88", "completion": "    return sorted(array) if (array[0] + array[-1]) % 2 == 1 else sorted(array, reverse=True)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    return second_smallest"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n\n    if largest_prime is None:\n        return 0\n\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        temp = num\n        has_even_digit = False\n        while temp > 0:\n            digit = temp % 10\n            if digit % 2 == 0:\n                has_even_digit = True\n                break\n            temp //= 10\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef by_value(arr):\n    return arr[0]\n\ndef sort_and_replace(arr):\n    if not arr:\n        return []\n    \n    n = len(arr)\n    oneToNine = sorted([x for x in arr if 1 <= x <= 9])\n    oneToNine.reverse()\n    \n    result = []\n    for x in arr:\n        if 1 <= x <= 9:\n            result.append(oneToNine.pop(0))\n        else:\n            result.append(x)\n    \n    return [get_name(x) for x in result]\n\ndef get_name(num):\n    if num == 1:\n        return \"One\"\n    elif num == 2:\n        return \"Two\"\n    elif num == 3:\n        return \"Three\"\n    elif num == 4:\n        return \"Four\"\n    elif num == 5:\n        return \"Five\"\n    elif num == 6:\n        return \"Six\"\n    elif num == 7:\n        return \"Seven\"\n    elif num == 8:\n        return \"Eight\"\n    elif num == 9:\n        return \"Nine\"\n    else:\n        return str(num)"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        current_sum = max(current_sum + num, num)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    min_bucket = math.inf\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                min_bucket = min(min_bucket, min(i, j))\n    return min_bucket"}
{"task_id": "HumanEval/120", "completion": "    if k >= len(arr):\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(i, j, k, path, lst):\n        if k == 0:\n            return False\n        if i < 0 or i >= n or j < 0 or j >= m:\n            return False\n        if path[k] == -1:\n            return False\n        if path[k] != -1 and lst[path[k]] == grid[i][j]:\n            return False\n        path[k] = i * m + j\n        lst.append(grid[i][j])\n        if k == 1:\n            return True\n        for x in [0, 1, -1, 0]:\n            for y in [0, 1, -1, 0]:\n                if dfs(i + x, j + y, k - 1, path, lst):\n                    return True\n        path[k] = -1\n        lst.pop()\n        return False\n    \n    lst = []\n    for i in range(n):\n        for j in range(m):\n            if dfs(i, j, k, [-1] * k, lst):\n                return lst\n    return []"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] <= arr[i - 1]:\n            return i - 1\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n\t\treturn False\n\tif n <= 3:\n\t\treturn True\n\tif n % 2 == 0 or n % 3 == 0:\n\t\treturn False\n\ti = 5\n\twhile i * i <= n:\n\t\tif n % i == 0 or n % (i + 2) == 0:\n\t\t\treturn False\n\t\ti += 6\n\treturn True"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/48", "completion": "    # Remove all non-alphanumeric characters and convert to lowercase\n    text = ''.join(e for e in text if e.isalnum()).lower()\n\n    # Compare the original text with its reverse\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    return all(num < t for num in l)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    return sum(q) <= w and q == q[::-1]"}
{"task_id": "HumanEval/76", "completion": "    if x==1:\n        return True\n    if n==1:\n        return x==1\n    if n<=0:\n        return False\n    while x>1:\n        if x%n!=0:\n            return False\n        x=x//n\n    return x==1"}
{"task_id": "HumanEval/77", "completion": "    if a<0:\n        return False\n    else:\n        cuberoot = a**(1/3)\n        return cuberoot.is_integer()"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(2, len(s)):\n        if s[i] == s[i-1] or s[i] == s[i-2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    n = len(string)\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == x + z or z == x + y:\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            return True\n    return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return True\n    keys = dict.keys()\n    return all(isinstance(k, str) and (k.islower() or k.isupper()) for k in keys)"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            for j in range(i+1, len(arr)):\n                arr[i], arr[j] = arr[j], arr[i]\n                return move_one_ball(arr)\n    return True"}
{"task_id": "HumanEval/110", "completion": "    set1, set2 = set(lst1), set(lst2)\n    if len(set1) != len(lst1):\n        return \"NO\"\n    if len(set1) != len(set2):\n        return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/119", "completion": "    s = ''\n    for i in lst:\n        s += i\n    count = 0\n    for i in s:\n        if i == '(':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return 'No'\n    if count == 0:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    else:\n        start = max(start1, start2)\n        end = min(end1, end2)\n        intersection_length = end - start + 1\n        if intersection_length < 2:\n            return \"NO\"\n        else:\n            for i in range(2, int(intersection_length**0.5)+1):\n                if intersection_length % i == 0:\n                    return \"NO\"\n            return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == ']':\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    return len(stack) > 0"}
{"task_id": "HumanEval/138", "completion": "    if n < 4 or n % 2 != 0:\n        return False\n    return True"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name.split('.')[0]) > 3 or file_name.count('.') != 1:\n        return 'No'\n    if file_name.split('.')[0] == '' or not file_name.split('.')[0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    numerator1, denominator1 = x.split('/')\n    numerator2, denominator2 = n.split('/')\n    \n    result_numerator = int(numerator1) * int(numerator2)\n    result_denominator = int(denominator1) * int(denominator2)\n    \n    return result_numerator % result_denominator == 0"}
{"task_id": "HumanEval/154", "completion": "    if(len(a)<len(b)):\n\t\treturn False\n\tfor i in range(len(a)):\n\t\tif(a[i:i+len(b)]==b):\n\t\t\treturn True\n\t\tif(a[i:]+a[:i]==b):\n\t\t\treturn True\n\treturn False"}
{"task_id": "HumanEval/157", "completion": "    # check if the sides form a right angle triangle\n    sides = [a, b, c]\n    sides.sort()\n    if sides[2] ** 2 == sides[0] ** 2 + sides[1] ** 2:\n        return True\n    return False"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l)-2):\n        left, right = i+1, len(l)-1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/43", "completion": "    if len(l) < 2:\n        return False\n    seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        seen.add(x)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    text = text.lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in brackets:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    if l[0] < l[-1]:\n        for i in range(1, len(l)):\n            if l[i] < l[i-1]:\n                return False\n    else:\n        for i in range(1, len(l)):\n            if l[i] > l[i-1]:\n                return False\n    return True"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if sum(q)>w:\n        return False\n    else:\n        return q==q[::-1]"}
{"task_id": "HumanEval/76", "completion": "    if (x <= 0 or n <= 0):\n        return False\n    while (x > 1):\n        if (x % n != 0):\n            return False\n        x = x / n\n    return x == 1"}
{"task_id": "HumanEval/77", "completion": "    root = a ** (1/3)\n    if (root == int(root)):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        if (x == y + z or y == x + z or z == x + y):\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    all_keys_same_case = all(isinstance(key, str) and key.islower() or key.isupper() for key in dict)\n    return all_keys_same_case"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    mismatch = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            mismatch += 1\n        if lst2[i] % 2 != 0:\n            mismatch += 1\n    return \"YES\" if mismatch == 0 else \"NO\""}
{"task_id": "HumanEval/119", "completion": "    def isGood(s):\n        count = 0\n        for i in s:\n            if i == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n    \n    if isGood(lst[0] + lst[1]):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    return \"YES\" if isPrime(abs(interval2[0] - interval1[1])) else \"NO\"\n\ndef isPrime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == ']':\n            if not stack:\n                return False\n            top_element = stack.pop()\n            if top_element == '[':\n                return True\n            stack.append('[')\n    return False"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return True"}
{"task_id": "HumanEval/141", "completion": "    file_name = file_name.strip()\n    if len(file_name) > 3 or '..' in file_name or '::' in file_name:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    if file_name.split('.')[0] == '':\n        return 'No'\n    if not file_name.split('.')[1] in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    fraction = x + '/' + n\n    result = float(fraction)\n    return result.is_integer()"}
{"task_id": "HumanEval/154", "completion": "    if len(a)<len(b):\n        return False\n    if len(a)==len(b):\n        return b in a\n    if len(a)!=len(b):\n        return b in a+a"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n\tsides.sort()\n\tif (sides[2]**2 == sides[0]**2 + sides[1]**2):\n\t\treturn True\n\telse:\n\t\treturn False"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff and diff <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l)-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i+1, len(l)-1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        seen.add(x)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    text = ''.join(e for e in text if e.isalnum()).lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x==1:\n        return True\n    if x==0:\n        return False\n    if x<n:\n        return False\n    return is_simple_power(x//n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n\t\treturn False\n\telse:\n\t\troot = a**(1/3)\n\t\treturn root.is_integer()"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    if len(string) < 2:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    return (x == y + z) and (isinstance(x, int)) and (isinstance(y, int)) and (isinstance(z, int))"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return True\n    first_key = next(iter(dict))\n    if isinstance(first_key, str):\n        if all(isinstance(key, str) and key.islower() or key.isupper() for key in dict):\n            return True\n    return False"}
{"task_id": "HumanEval/109", "completion": "    if len(arr)==0:\n        return True\n    n = len(arr)\n    i,j = 0,n-1\n    while(i<j):\n        if(arr[i]>arr[j]):\n            arr[i],arr[j] = arr[j],arr[i]\n            j-=1\n        else:\n            i+=1\n    return True if i==j else False"}
{"task_id": "HumanEval/110", "completion": "    mapping = {}\n    for num in lst1:\n        if num % 2 == 0:\n            mapping[num] = None\n        else:\n            mapping[num] = num\n    for num in lst2:\n        if num % 2 == 0:\n            continue\n        if mapping[num] is not None:\n            lst1[lst1.index(mapping[num])] = num\n            mapping[num] = None\n    for num in lst1:\n        if num % 2 != 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(set(lst)) == len(lst)"}
{"task_id": "HumanEval/127", "completion": "    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    return \"YES\" if isPrime(abs(interval1[1] - interval2[0])) else \"NO\"\n\n\ndef isPrime(num):\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    i = 3\n    while i * i <= num:\n        if num % i == 0:\n            return False\n        i += 2\n    return True"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) > 0"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    \n    for i in range(2, n//2 + 1):\n        if i * (i + 2) == 2 * n:\n            return True\n    \n    return False"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts[0]) > 3 or parts[0] == '' or not parts[0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    try:\n        if (int(x) * int(n)) % int(n) == 0:\n            return True\n        else:\n            return False\n    except:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if (len(a) < len(b)):\n        return False\n    for i in range(len(a)):\n        if (a[i:i+len(b)] == b):\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return (sides[0]**2 + sides[1]**2 == sides[2]**2)"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        seen.add(x)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    text = ''.join(e for e in text if e.isalnum()).lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in brackets:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if sum(q)>=w:\n        return False\n    if q==q[::-1]:\n        return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if n == 1:\n        return x == 1\n    return x > 1 and x % n == 0 and is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    return round(a ** (1/3)) ** 3 == a"}
{"task_id": "HumanEval/80", "completion": "    n = len(s)\n    if (n < 3):\n        return False\n    for i in range(2, n):\n        if (s[i] == s[i - 1] or s[i] == s[i - 2]):\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))"}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return True\n    first_key = next(iter(dict))\n    if first_key.isalpha() and (first_key.islower() or first_key.isupper()):\n        return all(key.isalpha() and (key.islower() or key.isupper()) for key in dict)\n    return False"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] > arr[i+1]:\n                return False\n        else:\n            if arr[i] < arr[i-1]:\n                return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    if len(lst1) != len(lst2):\n        return \"NO\"\n    else:\n        lst1_even = [x for x in lst1 if x % 2 == 0]\n        lst2_even = [x for x in lst2 if x % 2 == 0]\n        if lst1_even == lst2_even:\n            return \"YES\"\n        else:\n            return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    left, right = lst[0], lst[1]\n    left = list(left)\n    right = list(right)\n    left_count, right_count = 0, 0\n    for i in range(len(left)):\n        if left[i] == '(':\n            left_count += 1\n        else:\n            left_count -= 1\n    for i in range(len(right)):\n        if right[i] == '(':\n            right_count += 1\n        else:\n            right_count -= 1\n    if left_count == right_count:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n    intersection_length = intersection_end - intersection_start + 1\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)"}
{"task_id": "HumanEval/138", "completion": "    if n % 4 != 0:\n        return False\n    return True"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 4 or file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    num_x = int(x.split('/')[0])\n    denom_x = int(x.split('/')[1])\n    \n    num_n = int(n.split('/')[0])\n    denom_n = int(n.split('/')[1])\n    \n    product = num_x * num_n\n    \n    if (denom_x * denom_n) == product:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if len(b)>len(a):\n        return False\n    return b in a+a"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers)-1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    if n < 3:\n        return False\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    set_l = set(l)\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    return q==q[::-1] and sum(q)<=w"}
{"task_id": "HumanEval/76", "completion": "    if x==1:\n        return True\n    elif x<n:\n        return False\n    else:\n        return (n**(int(x**(1/n))))==x"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    else:\n        return round(a ** (1. / 3)) ** 3 == a"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(2, len(s)):\n        if s[i] == s[i-1] or s[i] == s[i-2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string)**0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if type(x) == int and type(y) == int and type(z) == int:\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str) or (key.islower() and not dict[key].islower()) or (key.isupper() and not dict[key].isupper()):\n            return False\n    return True"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n==0:\n        return True\n    for i in range(1,n):\n        if arr[i]<arr[i-1]:\n            j=i\n            while j>=1 and arr[j]>arr[j-1]:\n                arr[j],arr[j-1]=arr[j-1],arr[j]\n                j-=1\n            if j==0:\n                arr[i],arr[i-1]=arr[i-1],arr[i]\n            else:\n                arr[j],arr[i-1]=arr[i-1],arr[j]\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    if lst1 == lst2:\n        return \"YES\"\n    if all(x % 2 == 0 for x in lst1) or all(x % 2 == 0 for x in lst2):\n        return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    for s in lst:\n        if s.count('(') != s.count(')') or len(s) % 2 != 0:\n            return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    else:\n        intersection_length = end - start + 1\n        if intersection_length < 2:\n            return \"NO\"\n        else:\n            for i in range(2, int(intersection_length**0.5) + 1):\n                if intersection_length % i == 0:\n                    return \"NO\"\n            return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(char)\n    return len(stack) > 0"}
{"task_id": "HumanEval/138", "completion": "    return n % 2 == 0 and (n // 2) % 2 == 0"}
{"task_id": "HumanEval/141", "completion": "    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    if len(parts[0]) > 3:\n        return 'No'\n    if len(parts[1]) > 3:\n        return 'No'\n    if parts[0] == '':\n        return 'No'\n    if not parts[0][0].isalpha():\n        return 'No'\n    \n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    try:\n        result = int(eval(x + '*' + n))\n        return True\n    except:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    n = len(a)\n    for i in range(n):\n        if (a[i:i+len(b)] == b) or (a[i:] + a[:i] == b):\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n\tsides.sort()\n\treturn (sides[0]**2 + sides[1]**2 == sides[2]**2)"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        j = i + 1\n        k = n-1\n        while j < k:\n            if l[i] + l[j] + l[k] == 0:\n                return True\n            elif l[i] + l[j] + l[k] < 0:\n                j += 1\n            else:\n                k -= 1\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        seen.add(x)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = all(x<=y for x, y in zip(l, l[1:]))\n    decreasing = all(x>=y for x, y in zip(l, l[1:]))\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in brackets:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if q==q[::-1] and sum(q)<=w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    if x <= 1:\n        return True\n    while(n <= x):\n        if(n==x):\n            return True\n        n = n * n\n    return False"}
{"task_id": "HumanEval/77", "completion": "    return a>=0 and ((a**(1/3))**3==a)"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))"}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() or key.isupper() for key in keys)"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    \n    arr.sort()\n    \n    for i in range(len(arr) - 1):\n        if arr[i+1] < arr[i]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/110", "completion": "    def is_even(n):\n        return n % 2 == 0\n\n    even_count = sum(1 for num in lst1 if is_even(num))\n    odd_count = len(lst1) - even_count\n\n    if even_count >= odd_count and even_count >= len(lst2) - odd_count:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    def isGood(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n    \n    if isGood(lst[0]) and isGood(lst[1]):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    intersection_length = end - start + 1\n    \n    if intersection_length < 2:\n        return \"NO\"\n    \n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == ']' and stack[-1] == '[':\n            return True\n        elif char == ')' and stack[-1] == '(':\n            stack.pop()\n        else:\n            stack.append(char)\n    return False"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 == 1:\n        return False\n    return True"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0].isalpha() or not parts[0].islower():\n        return 'No'\n    if len(parts[0]) > 3 or not parts[1] in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    result = int(eval(x) * int(n))\n    return result == int(result)"}
{"task_id": "HumanEval/154", "completion": "    return b in a or a[-len(b):] == b or a[:len(b)] == b"}
{"task_id": "HumanEval/157", "completion": "    sides = sorted([a, b, c])\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        j, k = i+1, len(l)-1\n        while j < k:\n            if l[i] + l[j] + l[k] == 0:\n                return True\n            elif l[i] + l[j] + l[k] < 0:\n                j += 1\n            else:\n                k -= 1\n    return False"}
{"task_id": "HumanEval/43", "completion": "    n = len(l)\n    for i in range(n):\n        for j in range(i+1,n):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/48", "completion": "    text = text.lower().replace(\" \", \"\")\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for i in l:\n        if i >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            increasing = False\n        if l[i] < l[i+1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/72", "completion": "    return sum(q) <= w and q == q[::-1]"}
{"task_id": "HumanEval/76", "completion": "    if x <= 0:\n        return False\n    while(x > 1):\n        if (n ** (x - 1)) == x:\n            return True\n        x -= 1\n    return n == 1"}
{"task_id": "HumanEval/77", "completion": "    if a<0:\n\t\treturn False\n\treturn (round(a**(1/3)))**3==a"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return isPrime(len(string))"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    for key in dict:\n        if not (key.islower() or key.isupper()):\n            return False\n    return True"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            arr[i] = arr[i-1]\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))"}
{"task_id": "HumanEval/110", "completion": "    if lst1 == lst2:\n        return \"NO\"\n    mapping = {}\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            if lst2[i] % 2 != 0:\n                return \"NO\"\n            if lst2[i] not in mapping:\n                mapping[lst2[i]] = lst1[i]\n            else:\n                if mapping[lst2[i]] != lst1[i]:\n                    return \"NO\"\n        else:\n            if lst2[i] % 2 != 0:\n                if lst2[i] in mapping:\n                    mapping[lst2[i]] = lst1[i]\n                else:\n                    return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/119", "completion": "    for s in lst:\n        if not check_parens(s):\n            return 'No'\n    return 'Yes'\n\n\ndef check_parens(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/126", "completion": "    n = len(lst)\n    i = 0\n    while i < n - 1:\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] == lst[i + 1]:\n            i += 1\n        else:\n            return True\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start > end:\n        return \"NO\"\n    \n    intersection_length = end - start + 1\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    return \"YES\" if is_prime(intersection_length) else \"NO\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(char)\n    return len(stack)>0"}
{"task_id": "HumanEval/138", "completion": "    return (n & (n - 2)) == 0"}
{"task_id": "HumanEval/141", "completion": "    parts = file_name.split('.')\n    if len(parts) != 2:\n        return \"No\"\n    else:\n        if len(parts[0]) > 3 or len(parts[1]) > 3:\n            return \"No\"\n        if parts[0] == '' or parts[1] == '':\n            return \"No\"\n        if not parts[0][0].isalpha() or not parts[1].endswith(('txt', 'exe', 'dll')):\n            return \"No\"\n        return \"Yes\""}
{"task_id": "HumanEval/144", "completion": "    numerator, denominator = x.split('/')\n    x_value = int(numerator) * int(n)\n    denominator_value = int(denominator)\n    if (x_value % denominator_value == 0):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(a)):\n        if a[i:i+len(b)] == b or a[i:i+len(b)][::-1] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    sides = sorted([a, b, c])\n    return (sides[2]**2 == sides[0]**2 + sides[1]**2)"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i+1, n-1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    if not text:\n        return True\n    text = text.replace(\" \", \"\").lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            if stack[-1] == '<':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            increasing = False\n        if l[i] < l[i+1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if sum(q)<=w and q==q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    if n<1 or n!=int(n):\n        return False\n    return x==n**int(x)"}
{"task_id": "HumanEval/77", "completion": "    if (a < 0):\n        return False\n    else:\n        cuberoot = a**(1/3)\n        return (cuberoot == int(cuberoot))"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z or y == x + z or z == x + y):\n        if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n            return True\n    return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if (key.islower() and not all(c.islower() for c in dict[key])) or (key.isupper() and not all(c.isupper() for c in dict[key])):\n            return False\n    return True"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            arr[i], arr[i - 1] = arr[i - 1], arr[i]\n    return arr == sorted(arr)"}
{"task_id": "HumanEval/110", "completion": "    lst1.sort()\n    lst2.sort()\n    lst1[:], lst2[:] = lst2[:], lst1[:]\n    for num in lst1:\n        if num % 2 != 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/119", "completion": "    for s in lst:\n        s = ''.join(s)\n        n = len(s)\n        left = 0\n        right = 0\n        for i in range(n):\n            if s[i] == '(':\n                left += 1\n            else:\n                right += 1\n            if left == right:\n                continue\n            else:\n                return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            if lst.count(lst[i]) > 1:\n                return False\n            else:\n                return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n\tend = min(interval1[1], interval2[1])\n\tif start >= end:\n\t\treturn \"NO\"\n\tintersection_length = end - start + 1\n\tif intersection_length < 2:\n\t\treturn \"NO\"\n\tfor i in range(2, int(intersection_length ** 0.5) + 1):\n\t\tif intersection_length % i == 0:\n\t\t\treturn \"NO\"\n\treturn \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == ']' and (not stack or stack[-1] != '['):\n            return False\n        stack.append(char)\n    return len(stack) > 1"}
{"task_id": "HumanEval/138", "completion": "    if n%4 != 0:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name.split('.')[0])>3 or file_name.count('.')!=1 or file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    numerator, denominator = map(int, x.split('/'))\n    numerator_n, denominator_n = map(int, n.split('/'))\n    result = numerator * numerator_n // denominator * denominator_n\n    return result == numerator_n * denominator"}
{"task_id": "HumanEval/154", "completion": "    n = len(a)\n    m = len(b)\n    if(m > n):\n        return False\n    for i in range(n-m+1):\n        if(a[i:i+m] == b):\n            return True\n    for i in range(n-m+1):\n        if(a[i:i+m] == a[i+m:]+a[:i]):\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[2]**2 == sides[0]**2 + sides[1]**2"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/43", "completion": "    complements = set()\n    for num in l:\n        if -num in complements:\n            return True\n        complements.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in brackets:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    is_increasing = True\n    is_decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            is_increasing = False\n        if l[i] < l[i + 1]:\n            is_decreasing = False\n    return is_increasing or is_decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for bracket in brackets:\n        if bracket in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[bracket] != top_element:\n                return False\n        else:\n            stack.append(bracket)\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if n == 1:\n        return False\n    while(x > 1):\n        if(x%n != 0):\n            return False\n        x = x//n\n    return True"}
{"task_id": "HumanEval/77", "completion": "    n = int(a ** (1/3))\n\treturn n * n * n == a"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    return is_prime(len(string))\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return (x == y + z or y == x + z or z == x + y)\n    return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys_set = set(dict.keys())\n    lower_case_keys = keys_set.intersection(set(k for k in keys_set if k.islower()))\n    upper_case_keys = keys_set.intersection(set(k for k in keys_set if k.isupper()))\n    return len(lower_case_keys) == len(keys_set) or len(upper_case_keys) == len(keys_set)"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if (n == 0):\n        return True\n    for i in range(n-1):\n        if (arr[i] > arr[i+1]):\n            arr[i+1:] = arr[i+1:][::-1]\n            arr[i] = arr[i+1]\n            arr[i+1:] = arr[i+1:][::-1]\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    mapping = {}\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            mapping[lst1[i]] = lst2[i]\n        else:\n            if lst2[i] in mapping.values():\n                return \"NO\"\n            else:\n                mapping[lst1[i]] = lst2[i]\n    return \"YES\""}
{"task_id": "HumanEval/119", "completion": "    s = ''.join(lst)\n    return 'Yes' if s.count('(') == s.count(')') else 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    x1, y1 = interval1\n    x2, y2 = interval2\n    \n    # Check if the intervals intersect\n    if x1 <= y2 <= x2 or x1 <= y1 <= x1:\n        # Intersection exists, find its length\n        intersection_length = min(y1, y2) - max(x1, x2) + 1\n        \n        # Check if the intersection length is prime\n        if intersection_length > 1:\n            for i in range(2, intersection_length):\n                if intersection_length % i == 0:\n                    return \"NO\"\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[' or char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n % 4 == 0"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name.split('.')[0]) > 3 or len(file_name.split('.')[1]) > 1 or file_name.split('.')[1] != 'txt' and file_name.split('.')[1] != 'exe' and file_name.split('.')[1] != 'dll':\n        return 'No'\n    if file_name.split('.')[0] == '':\n        return 'No'\n    if not file_name.split('.')[0].isalpha():\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    if (int(x) * int(n)) % int(n) == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    n = len(a)\n\tm = len(b)\n\tif (m>n):\n\t\treturn False\n\tfor i in range(n-m+1):\n\t\tif(a[i:i+m] == b or a[i:i+m][::-1] == b):\n\t\t\treturn True\n\treturn False"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return (sides[2]**2 == (sides[0]**2 + sides[1]**2))"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    n = len(l)\n    increasing = True\n    decreasing = True\n    for i in range(1, n):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in brackets:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    def is_balanced(arr):\n        return arr == arr[::-1]\n    \n    if is_balanced(q) and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    if x==1:\n        return True\n    elif x<n:\n        return False\n    else:\n        return is_simple_power(x//n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a<=0:\n\t\treturn False\n\treturn a**(1/3)==int(a**(1/3))"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    lower_case = set()\n    upper_case = set()\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            lower_case.add(key)\n        elif key.isupper():\n            upper_case.add(key)\n        else:\n            return False\n    return lower_case.issubset(upper_case) or upper_case.issubset(lower_case)"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    def all_even(lst):\n        return all(x % 2 == 0 for x in lst)\n    \n    if all_even(lst1):\n        return \"YES\"\n    if all_even(lst2):\n        return \"YES\"\n    \n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    if all_even(lst1):\n                        return \"YES\"\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n    return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    for s in lst:\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n        if stack:\n            return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/126", "completion": "    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start < end:\n        intersection_length = end - start + 1\n        if isPrime(intersection_length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == ']':\n            if stack and stack[-1] == '[':\n                return True\n            else:\n                stack.append(char)\n        elif char == '[':\n            stack.append(char)\n    return False"}
{"task_id": "HumanEval/138", "completion": "    if (n & 1):\n        return False\n    return True"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return \"No\"\n    parts = file_name.split('.')\n    if len(parts[0]) > 3 or len(parts[1]) > 3:\n        return \"No\"\n    if not parts[0][0].isalpha():\n        return \"No\"\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/144", "completion": "    result = int(x) * int(n)\n    return str(result).isdigit()"}
{"task_id": "HumanEval/154", "completion": "    if len(a)<len(b):\n        return False\n    for i in range(len(a)):\n        if a[i:i+len(b)]==b:\n            return True\n    for i in range(len(a)-1):\n        a = a[-1]+a[:-1]\n        if a[i:i+len(b)]==b:\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    if (a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers)-1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    s = set()\n    for x in l:\n        if -x in s:\n            return True\n        s.add(x)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    text = ''.join(e for e in text if e.isalnum()).lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in brackets:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    if n == 1:\n        return True\n    elif x == 1:\n        return True\n    elif x % n != 0:\n        return False\n    else:\n        return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    if a < 4:\n        return True\n    n = int(a ** (1. / 3))\n    return n * n * n == a"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    return (x == y + z or y == x + z or z == x + y) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return True\n    return all(key.islower() for key in dict) or all(key.isupper() for key in dict)"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    temp = arr[n-1]\n    for i in range(n-2, -1, -1):\n        if arr[i] > arr[i+1]:\n            return False\n    arr[n-1] = temp\n    return True"}
{"task_id": "HumanEval/110", "completion": "    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            if lst2[i] % 2 == 0:\n                lst1[i] = lst2[i]\n            else:\n                return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/119", "completion": "    for i in range(2):\n        lst[i] = lst[i].replace(\"(\", \"x\").replace(\")\", \")\")\n    return 'Yes' if all(eval(s) == True for s in lst) else 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n            \n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersectionLength = end - start + 1\n    \n    if intersectionLength <= 1:\n        return \"NO\"\n    \n    isPrime = True\n    if intersectionLength <= 3:\n        for i in range(2, intersectionLength + 1):\n            if (intersectionLength % i == 0):\n                isPrime = False\n                break\n    \n    return \"YES\" if isPrime else \"NO\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                stack.append(char)\n    return len(stack) > 0"}
{"task_id": "HumanEval/138", "completion": "    if n < 4:\n        return False\n    return (n % 4 == 0)"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts[0]) > 3 or parts[0].isdigit() or len(parts[1]) > 3 or parts[1].isdigit() or parts[0] == '' or parts[1] == '':\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    numerator, denominator = map(int, [x.split('/'), n.split('/')])\n    return numerator * denominator == int(x.split('/')[0]) * int(n.split('/')[1])"}
{"task_id": "HumanEval/154", "completion": "    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    for i in range(n):\n        if (a[i:i+m] == b or a[i:i+m][::-1] == b):\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    sides = sorted([a, b, c])\n    return sides[2] ** 2 == sides[0] ** 2 + sides[1] ** 2"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    text = ''.join(e for e in text if e.isalnum()).lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = all(x<=y for x, y in zip(l, l[1:]))\n    decreasing = all(x>=y for x, y in zip(l, l[1:]))\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x <= 0:\n        return False\n    if n <= 0:\n        return False\n    while (x % n == 0):\n        x = x / n\n    return x == 1"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    cube_root = a**(1/3)\n    if cube_root.is_integer():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string)**0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if (type(x) != int or type(y) != int or type(z) != int):\n        return False\n    if (x == y + z or y == x + z or z == x + y):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return True\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if not (key.islower() or key.isupper()):\n            return False\n    return True"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            if (arr[i] - arr[i - 1]) % (n - i) == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/110", "completion": "    set1 = set(lst1)\n    set2 = set(lst2)\n    if all(x % 2 == 0 for x in set1):\n        return \"YES\"\n    if all(x % 2 == 0 for x in set2):\n        return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    left_count = 0\n    right_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                left_count += 1\n            elif char == ')':\n                if left_count == 0:\n                    right_count += 1\n                else:\n                    left_count -= 1\n        if left_count == 0:\n            right_count += 1\n    return 'Yes' if left_count == 0 and right_count == 0 else 'No'"}
{"task_id": "HumanEval/126", "completion": "    n = len(lst)\n    if n < 2:\n        return True\n    if lst[n-1] < lst[n-2]:\n        return is_sorted(lst[:-1])\n    else:\n        return False"}
{"task_id": "HumanEval/127", "completion": "    x1, y1 = interval1\n    x2, y2 = interval2\n    intersection_start = max(x1, x2)\n    intersection_end = min(y1, y2)\n    if intersection_start < intersection_end:\n        intersection_length = intersection_end - intersection_start + 1\n        if isPrime(intersection_length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\ndef isPrime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                stack.append(char)\n    return ']' in stack"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return is_sum_even(n, 4) \n\ndef is_sum_even(n, count):\n    if count == 1:\n        return n % 2 == 0\n    return is_sum_even(n - 2, count - 1)"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count(\".\") != 1:\n        return 'No'\n    \n    parts = file_name.split('.')\n    if len(parts[0]) > 3 or len(parts[1]) > 3:\n        return 'No'\n    \n    if not parts[0][0].isalpha() or not parts[1].lower() in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    numerator, denominator = x.split(\"/\")\n    x_value = int(numerator) * int(n)\n    y_value = int(numerator) * int(n)\n    if y_value == 0:\n        return False\n    return x_value == y_value"}
{"task_id": "HumanEval/154", "completion": "    n = len(a)\n    if n < len(b):\n        return False\n    for i in range(n):\n        if (a[i:] + a[:i]) == b:\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    if (a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l)-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        l[i+2] = 0\n        if l[i] + l[i+1] + l[i+2] == 0:\n            return True\n        l[i+2] = l[i+1]\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    text = text.replace(' ', '').lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for i in l:\n        if i >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if n % 2 != 0:\n        return False\n    return is_simple_power(x, n // 2)"}
{"task_id": "HumanEval/77", "completion": "    # Check if cube root of a is an integer\n    return int(a ** (1 / 3)) ** 3 == a"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return (x == y + z or y == x + z or z == x + y)\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return True\n    \n    keys = dict.keys()\n    upper_case_found = False\n    lower_case_found = False\n    \n    for key in keys:\n        if key.isupper():\n            upper_case_found = True\n        elif key.islower():\n            lower_case_found = True\n        else:\n            return False\n    \n    return upper_case_found or lower_case_found"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    max_pos = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[max_pos]:\n            max_pos = i\n    for i in range(max_pos):\n        arr[i], arr[max_pos] = arr[max_pos], arr[i]\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))"}
{"task_id": "HumanEval/110", "completion": "    cnt = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            cnt += 1\n    if cnt > len(lst1)//2:\n        return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/119", "completion": "    for s in lst:\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if len(stack) == 0:\n                    return 'No'\n                stack.pop()\n        if len(stack) != 0:\n            return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/126", "completion": "    lst.sort()\n    return lst == sorted(lst) and len(set(lst)) == len(lst)"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersection_length = max(0, end - start + 1)\n    \n    if intersection_length < 2:\n        return \"NO\"\n    \n    def isPrime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return \"YES\" if isPrime(intersection_length) else \"NO\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 == 1:\n        return False\n    return True"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name.split('.')) == 2 and file_name.split('.')[1] in ['txt', 'exe', 'dll']:\n        if file_name.count('0')<=3 and '.' in file_name and file_name.split('.')[0].isalpha() and file_name.split('.')[1].isalpha():\n            return \"Yes\"\n    return \"No\""}
{"task_id": "HumanEval/144", "completion": "    num1, den1 = x.split('/')\n    num2, den2 = n.split('/')\n    \n    numerator = int(num1) * int(num2)\n    denominator = int(den1) * int(den2)\n    \n    return numerator % denominator == 0"}
{"task_id": "HumanEval/154", "completion": "    m, n = len(a), len(b)\n    if (m < n):\n        return False\n    a_cycle = a + a\n    for i in range(m):\n        if (b in a_cycle[i:i+n]):\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    if (a**2 + b**2 == c**2):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i]+l[j]+l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    # Remove any non-alphanumeric characters and convert to lowercase\n    text = ''.join(e for e in text if e.isalnum()).lower()\n\n    # Check if the text is equal to its reverse\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in brackets:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    if x <= 1:\n        return True\n    if x % n != 0:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    root = int(a**(1/3))\n    return root*root*root == a"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return is_prime(len(string))"}
{"task_id": "HumanEval/92", "completion": "    if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        if (x == y + z or y == x + z or z == x + y):\n            return True\n    return False"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return True\n    first_key_case = dict[list(dict.keys())[0]].isupper() or dict[list(dict.keys())[0]].islower()\n    for key in dict:\n        if key.isupper() and not dict[key].isupper():\n            return False\n        if key.islower() and not dict[key].islower():\n            return False\n        if not dict[key].isupper() and not dict[key].islower():\n            return False\n    return True"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            break\n    else:\n        return True\n    for i in range(len(arr)-1):\n        arr[i] = arr[i+1]\n    arr[-1] = arr[0]\n    return move_one_ball(arr)"}
{"task_id": "HumanEval/110", "completion": "    lst1.sort()\n    lst2.sort()\n    i = 0\n    j = 0\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] % 2 != 0:\n            lst1[i] = lst2[j]\n            j += 1\n        i += 1\n    if i < len(lst1):\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/119", "completion": "    lst.sort(key=len, reverse=True)\n    parentheses = ''.join(lst)\n    stack = []\n    for char in parentheses:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start < end:\n        intersection_length = end - start + 1\n        if is_prime(intersection_length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) > 0"}
{"task_id": "HumanEval/138", "completion": "    return n % 2 == 0 and (n // 2) % 4 == 0"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 4 or file_name.count('.') > 1:\n        return 'No'\n    \n    dot_index = file_name.find('.')\n    if dot_index == -1:\n        return 'No'\n    \n    file_name_before_dot = file_name[:dot_index]\n    file_name_after_dot = file_name[dot_index+1:]\n    \n    if not file_name_before_dot.isalpha() or not file_name_after_dot.lower() in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    result = eval(x + \"*\" + n)\n    return result.is_integer()"}
{"task_id": "HumanEval/154", "completion": "    n = len(a)\n    m = len(b)\n    if (m > n):\n        return False\n    \n    if (n == m):\n        return (a == b)\n    \n    for i in range(n):\n        if (a[i:i+m] == b):\n            return True\n    \n    return False"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return (sides[0]**2 + sides[1]**2) == sides[2]**2"}
{"task_id": "HumanEval/0", "completion": "    sorted_numbers = sorted(numbers)\n    for i in range(1, len(sorted_numbers)):\n        if sorted_numbers[i] - sorted_numbers[i-1] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l)-2):\n        if l[i] == l[i+1]:\n            continue\n        l[i+2] = -(l[i] + l[i+1])\n        if l[i+2] < l[i+1]:\n            return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    text = ''.join(e for e in text if e.isalnum()).lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    return all(num < t for num in l)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in brackets:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            increasing = False\n        if l[i] < l[i+1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    def is_palindrome(lst):\n        return lst == lst[::-1]\n    \n    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    if n == 1:\n\t\treturn x == 1\n\tif x == 1:\n\t\treturn True\n\tif n <= 0 or x <= 0:\n\t\treturn False\n\twhile (x % n == 0):\n\t\tx /= n\n\treturn x == 1"}
{"task_id": "HumanEval/77", "completion": "    # check if the cube root of a is an integer\n    return (a ** (1/3)) == int(a ** (1/3))"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    n = len(string)\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if (type(x) == int and type(y) == int and type(z) == int):\n        if (x == y + z or y == x + z or z == x + y):\n            return True\n    return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return True\n    lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return lower or upper"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    arr.sort()\n    for i in range(n):\n        if arr[i] != i+1:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count_lst1 = sum(1 for num in lst1 if num % 2 == 0)\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    if even_count_lst1 < even_count_lst2:\n        return \"NO\"\n    elif even_count_lst1 == even_count_lst2:\n        return \"YES\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/119", "completion": "    def isGood(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n    \n    for a in lst:\n        for b in lst:\n            if a != b and isGood(a + b):\n                return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    x1, y1 = interval1\n    x2, y2 = interval2\n    if x1 > x2 or y1 > y2:\n        return \"NO\"\n    start = max(x1, x2)\n    end = min(y1, y2)\n    intersection_length = end - start + 1\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(math.sqrt(intersection_length)) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True"}
{"task_id": "HumanEval/138", "completion": "    if (n % 2 != 0):\n        return False\n    else:\n        return n >= 6"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3 or '.' not in file_name or file_name.split('.')[0] == '' or file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x = x.replace('/', '*')\n    n = n.replace('/', '*')\n    if int(x) == int(n):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if len(a)<len(b):\n        return False\n    for i in range(len(a)-len(b)+1):\n        if b in a[i:i+len(b)]:\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    sides = sorted([a, b, c])\n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i - 1] <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        if l[i] > 0:\n            break\n        j, k = i + 1, len(l) - 1\n        while j < k:\n            if l[i] + l[j] + l[k] == 0:\n                return True\n            elif l[i] + l[j] + l[k] < 0:\n                j += 1\n            else:\n                k -= 1\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    return all(num < t for num in l)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x//n, n)"}
{"task_id": "HumanEval/77", "completion": "    if (a < 0):\n        return False\n    if (a == 0):\n        return True\n    return (int(a ** (1. / 3)) ** 3 == a)"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if (type(x) != int) or (type(y) != int) or (type(z) != int):\n        return False\n    if (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return True\n    keys = dict.keys()\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    lst1 = [x for x in lst1 if x % 2 == 0]\n    lst2 = [x for x in lst2 if x % 2 == 0]\n    if len(lst1) < len(lst2):\n        lst1, lst2 = lst2, lst1\n    return \"YES\" if lst1 == lst2 else \"NO\""}
{"task_id": "HumanEval/119", "completion": "    def is_good(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            else:\n                if not stack:\n                    return False\n                stack.pop()\n        return len(stack) == 0\n    \n    return 'Yes' if is_good(lst[0] + lst[1]) else 'No'"}
{"task_id": "HumanEval/126", "completion": "    lst.sort()\n    return lst == list(set(lst))"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersection_length = max(0, end - start)\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return \"YES\" if is_prime(intersection_length) else \"NO\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append('[')\n            nested = True\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n                if not stack:\n                    nested = True\n    return nested"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n == 4 * (n // 4)"}
{"task_id": "HumanEval/141", "completion": "    if not (file_name.count('.') == 1 and file_name.split('.')[0].isalnum() \n            and file_name.split('.')[1] in ['txt', 'exe', 'dll']):\n        return 'No'\n    else:\n        return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    num1, den1 = x.split(\"/\")\n    num2, den2 = n.split(\"/\")\n    \n    num = int(num1) * int(num2)\n    den = int(den1) * int(den2)\n    \n    return num == den"}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1] <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    return all(num < t for num in l)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    return sum(q) <= w and q == q[::-1]"}
{"task_id": "HumanEval/76", "completion": "    if n == 1:\n        return True\n    if (n**(int(x**(1/n))) == x):\n        return True\n    return False"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    elif (a == 0):\n        return True\n    else:\n        x = int(a ** (1 / 3))\n        return (x * x * x == a)"}
{"task_id": "HumanEval/80", "completion": "    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z or y == x + z or z == x + y):\n        if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n            return True\n    return False"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return True\n    for key in dict.keys():\n        if not (key.islower() or key.isupper()):\n            return False\n    return True"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if (n == 0):\n        return True\n    for i in range(n-1):\n        if (arr[i] > arr[i+1]):\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    i, j = 0, 0\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] % 2 != 0:\n            if lst2[j] % 2 == 0:\n                lst1[i] = lst2[j]\n                lst2[j] = lst1[i]\n                i += 1\n                j += 1\n            else:\n                j += 1\n        else:\n            i += 1\n    if i < len(lst1):\n        return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/119", "completion": "    def isGood(s):\n        count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n            elif c == ')':\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n    \n    for a in lst:\n        for b in lst:\n            if a != b:\n                if isGood(a+b):\n                    return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start < end:\n        length = end - start + 1\n        if length > 1:\n            return \"NO\"\n        elif length == 1:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/138", "completion": "    if n < 8:\n        return False\n    if n % 2 != 0:\n        return False\n    return True"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3 or file_name.count('.') != 1:\n        return 'No'\n    \n    file_name_parts = file_name.split('.')\n    if len(file_name_parts) != 2:\n        return 'No'\n    \n    if not file_name_parts[0]:\n        return 'No'\n    \n    if not file_name_parts[1] in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    product = int(x) * int(n)\n    return product == int(product)"}
{"task_id": "HumanEval/154", "completion": "    if len(b)==0:\n        return True\n    if len(a)!=len(b):\n        return False\n    b=b+b\n    for i in range(len(a)-len(b)+1):\n        if a[i:i+len(b)]==b or a[i:i+len(b)] in b:\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    return sides[2]**2 == sides[0]**2 + sides[1]**2"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            if current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/43", "completion": "    num_set = set()\n    for num in l:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    if x <= 1:\n        return True\n    if x % n != 0:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a<0:\n        return False\n    return (round(a**(1/3)))**3 == a"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z or y == x + z or z == x + y):\n        if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n            return True\n    return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    \n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if (key.islower() and not all(char.islower() for char in dict[key])) or (key.isupper() and not all(char.isupper() for char in dict[key])):\n            return False\n    \n    return True"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    count = 0\n    for i in range(len(lst1)):\n        if (lst1[i]%2 != 0):\n            count += 1\n    if (count%2 == 0):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    # Combine the two strings\n    combined = \"\".join(lst)\n    # Count the number of opening and closing parentheses\n    open_count, close_count = 0, 0\n    for char in combined:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            if open_count == 0:\n                return \"No\"\n            close_count += 1\n            open_count -= 1\n    return \"Yes\" if open_count == 0 and close_count == 0 else \"No\""}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start < end:\n        intersection_length = end - start\n        if isPrime(intersection_length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\ndef isPrime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/138", "completion": "    if n < 4:\n        return False\n    return (n % 4 == 0)"}
{"task_id": "HumanEval/141", "completion": "    if '..' in file_name:\n        return \"No\"\n    if '..' in file_name:\n        return \"No\"\n    if '.' not in file_name:\n        return \"No\"\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return \"No\"\n    if len(parts[0]) > 3 or len(parts[1]) > 3:\n        return \"No\"\n    if not parts[0].isalpha() or not parts[1].isalpha():\n        return \"No\"\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    return x_num * n_den == n_num * x_den"}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    n = len(a)\n    m = len(b)\n    if m == 1:\n        return a.find(b) != -1\n    for i in range(n - m + 1):\n        if a[i:i + m] == b or a[i + m:i + 2 * m] == b or a[i + 2 * m:i + 3 * m] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    sides = sorted([a, b, c])\n    if (sides[2] ** 2 == sides[0] ** 2 + sides[1] ** 2):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers)-1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    text = text.lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    return sum(q) <= w and q == q[::-1]"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    elif x < 1 or n < 2:\n        return False\n    else:\n        while (x % n == 0):\n            x = x / n\n            if (x == 1):\n                return True\n        return False"}
{"task_id": "HumanEval/77", "completion": "    if a == 0:\n        return True\n    else:\n        root = a ** (1/3)\n        return (root == int(root))"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string)**0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if type(x) != int or type(y) != int or type(z) != int:\n        return False\n    return (x == y + z) or (y == x + z) or (z == x + y)"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return True\n    \n    first_key = next(iter(dict))\n    \n    if first_key.islower() or first_key.isupper():\n        return all(key.islower() or key.isupper() for key in dict)\n    \n    return False"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i+1)%n]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0 and lst2[i] % 2 == 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n            if all(x % 2 == 0 for x in lst1):\n                return \"YES\"\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n    return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    for s in lst:\n        if (s.count('(') != s.count(')')) or (s.find(')') != -1):\n            return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    # If the intervals don't intersect, return \"NO\"\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    # Calculate the length of the intersection\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n    intersection_length = intersection_end - intersection_start\n    # Check if the length is prime or not\n    if isPrime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef isPrime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/138", "completion": "    if n < 8:\n        return False\n    if n % 4 == 0:\n        return True\n    return False"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 4 or file_name.count('.') != 1:\n        return 'No'\n    else:\n        name, ext = file_name.split('.')\n        if not name or not name[0].isalpha() or not (ext in ['txt', 'exe', 'dll']):\n            return 'No'\n        else:\n            return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_numerator, x_denominator = x.split('/')\n    n_numerator, n_denominator = n.split('/')\n    \n    x_numerator, x_denominator = int(x_numerator), int(x_denominator)\n    n_numerator, n_denominator = int(n_numerator), int(n_denominator)\n    \n    if x_denominator == n_denominator:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    n = len(a)\n    m = len(b)\n    for i in range(n-m+1):\n        if(a[i:i+m] == b or a[i:i+m][::-1] == b):\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    if (sides[2]**2 == sides[0]**2 + sides[1]**2):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l)-2):\n        if l[i] > 0:\n            break\n        l_i = i+1\n        l_j = len(l)-1\n        while l_i < l_j:\n            if l[i] + l[l_i] + l[l_j] == 0:\n                return True\n            elif l[i] + l[l_i] + l[l_j] < 0:\n                l_i += 1\n            else:\n                l_j -= 1\n    return False"}
{"task_id": "HumanEval/43", "completion": "    if len(l) < 2:\n        return False\n    s = set()\n    for x in l:\n        if -x in s:\n            return True\n        s.add(x)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    text = text.replace(\" \", \"\").lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append('>')\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    if x <= 0 or n <= 0:\n        return False\n    while (x > 1):\n        if (x % n != 0):\n            return False\n        x = x / n\n    return x == 1"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    else:\n        cube_root = a ** (1/3)\n        return cube_root == int(cube_root)"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) == 3:\n            continue\n        else:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string)**0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if (type(x) == int and type(y) == int and type(z) == int):\n        if (x == y + z or y == x + z or z == x + y):\n            return True\n    return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return True\n    return all(key.islower() or key.isupper() for key in dict.keys())"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    lst1_even = [x for x in lst1 if x % 2 == 0]\n    lst2_even = [x for x in lst2 if x % 2 == 0]\n    if lst1_even == lst2_even:\n        return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    for s in lst:\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                if count == 0:\n                    return 'No'\n                count -= 1\n        if count != 0:\n            return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            if lst.count(lst[i-1]) > 1 or lst.count(lst[i]) > 1:\n                return False\n            lst[i] = lst[i-1]\n    return True"}
{"task_id": "HumanEval/127", "completion": "    if (interval1[0] > interval2[1]) or (interval2[0] > interval1[1]):\n\t\treturn \"NO\"\n\telse:\n\t\tstart = max(interval1[0], interval2[0])\n\t\tend = min(interval1[1], interval2[1])\n\t\tlength = end - start + 1\n\t\tif length < 2:\n\t\t\treturn \"NO\"\n\t\telse:\n\t\t\tfor i in range(2, length):\n\t\t\t\tif length % i == 0:\n\t\t\t\t\treturn \"NO\"\n\t\t\treturn \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == ']':\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(char)\n    return len(stack) > 0"}
{"task_id": "HumanEval/138", "completion": "    if n < 8:\n        return False\n    return (n % 4 == 0)"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3 or file_name.count('.') != 1:\n        return 'No'\n    dot_index = file_name.find('.')\n    if dot_index == -1 or dot_index == 0 or dot_index == len(file_name)-1:\n        return 'No'\n    sub_name = file_name[:dot_index]\n    if not sub_name.isalpha():\n        return 'No'\n    ext = file_name[dot_index+1:]\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    numerator = int(x)\n    denominator = int(n)\n    if numerator % denominator == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    n = len(a)\n    for i in range(n - len(b) + 1):\n        if a[i:i + len(b)] == b or a[i:i + len(b)] == a[i + len(b):i + 2 * len(b)]:\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n\tsides.sort()\n\tif sides[2]**2 == sides[0]**2 + sides[1]**2:\n\t\treturn True\n\telse:\n\t\treturn False"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    n = len(numbers)\n    mean = sum(numbers) / n\n    deviations = [abs(num - mean) for num in numbers]\n    mad = sum(deviations) / n\n    return mad"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return (total_sum, product)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n\t\ta, b = b, a % b\n\treturn a"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers)-1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2 != 0 or xs[-1] <= 0:\n        return \"Invalid input\"\n    \n    factors = []\n    for i in range(1, int(math.sqrt(xs[-1]))+1):\n        if xs[-1] % i == 0:\n            factors.append(i)\n            if i != xs[-1] // i:\n                factors.append(xs[-1] // i)\n    \n    for factor in factors:\n        if poly(xs, factor) == 0:\n            return factor\n    \n    return \"No zero point found\""}
{"task_id": "HumanEval/33", "completion": "    l_third = [l[i] if (i+1) % 3 != 0 else sorted(l[i:i+1]) for i in range(len(l))]\n    return [l_third[i] for i in range(len(l))]"}
{"task_id": "HumanEval/37", "completion": "    n = len(l)\n    for i in range(n // 2):\n        l[i], l[i + n // 2] = l[i + n // 2], l[i]\n    l[::2], l[1::2] = l[:n//2][::-1], l[n//2:][::-1]\n    return l"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    count = 0\n    while count < n:\n        if is_prime(b):\n            count += 1\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/41", "completion": "    return n // 2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    a, b, c, d = 0, 0, 0, 1\n    for _ in range(n):\n        a, b, c, d = b, d, b + c, a + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, (p-1)//2, p)"}
{"task_id": "HumanEval/53", "completion": "    carry = 0\n    while(x > 0 or y > 0 or carry):\n        carry = carry ^ (x & y)\n        x = x >> 1\n        y = y >> 1\n    return carry"}
{"task_id": "HumanEval/55", "completion": "    if n<=0:\n\t\tprint(\"Incorrect input\")\n\telif n==1:\n\t\treturn 0\n\telif n==2:\n\t\treturn 1\n\telse:\n\t\ta, b = 0, 1\n\t\tfor _ in range(2, n+1):\n\t\t\tc = a + b\n\t\t\ta, b = b, c\n\t\treturn b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    \n    largest = 1\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0 and is_prime(divisor):\n            largest = divisor\n            n //= divisor\n        else:\n            divisor += 1\n    return largest"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    return [xs[i+1] * i for i in range(len(xs)-1)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n+1):\n            c = a + b + c\n            a, b = b, c\n        return c"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    if shift == 0:\n        return num_str\n    else:\n        shift %= len(num_str)\n        return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    if a <= 1:\n        return False\n    \n    prime_numbers = []\n    \n    for num in range(2, a):\n        if all(num % prime != 0 for prime in prime_numbers):\n            prime_numbers.append(num)\n    \n    for i in range(len(prime_numbers)):\n        for j in range(i, len(prime_numbers)):\n            product = prime_numbers[i] * prime_numbers[j]\n            if product == a:\n                return True\n    \n    return False"}
{"task_id": "HumanEval/81", "completion": "    grades.sort(reverse=True)\n    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append(\"A+\")\n        elif grade >= 3.7:\n            result.append(\"A\")\n        elif grade >= 3.3:\n            result.append(\"A-\")\n        elif grade >= 3.0:\n            result.append(\"B+\")\n        elif grade >= 2.7:\n            result.append(\"B\")\n        elif grade >= 2.3:\n            result.append(\"B-\")\n        elif grade >= 2.0:\n            result.append(\"C+\")\n        elif grade >= 1.7:\n            result.append(\"C\")\n        elif grade >= 1.3:\n            result.append(\"C-\")\n        elif grade >= 1.0:\n            result.append(\"D+\")\n        elif grade >= 0.7:\n            result.append(\"D\")\n        elif grade >= 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"F\")\n    return result"}
{"task_id": "HumanEval/84", "completion": "    summ = 0\n    while N:\n        summ += N % 2\n        N //= 2\n    return bin(summ)[2:]"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    result.sort()\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    result = []\n    i = 2\n    while len(result) < n:\n        if is_prime(i):\n            result.append(i)\n        i += 1\n    return result"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5) if num >= 0 else int(num - 0.5)"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(round(avg))"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(1)\n            for j in range(2, i + 1):\n                result[i - 1] *= j\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/123", "completion": "    odd_numbers = []\n    for i in range(1, n+1):\n        seq = [i]\n        while seq[-1] != 1:\n            if seq[-1] % 2 == 0:\n                seq.append(seq[-1]//2)\n            else:\n                seq.append(seq[-1]*3 + 1)\n        for num in seq:\n            if num % 2 != 0:\n                odd_numbers.append(num)\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    \n    product = 1\n    for num in arr:\n        product *= num\n    \n    sum = 0\n    for num in arr:\n        sum += abs(num) * (1 if num > 0 else -1 if num < 0 else 0)\n    \n    return sum"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [0]\n    elif n == 1 or n == 2:\n        return [1, 3]\n    else:\n        sequence = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(sequence[i // 2 - 1] + sequence[i // 2])\n            else:\n                sequence.append(sequence[i // 3 - 1] + sequence[i // 3] + sequence[i // 2])\n        return sequence"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0"}
{"task_id": "HumanEval/133", "completion": "    rounded_sum = sum(int(round(num)) for num in lst)\n    return rounded_sum**2"}
{"task_id": "HumanEval/136", "completion": "    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n    if not neg_ints and not pos_ints:\n        return (None, None)\n    elif not neg_ints:\n        return (max(pos_ints), min(pos_ints))\n    elif not pos_ints:\n        return (min(neg_ints), max(neg_ints))\n    else:\n        return (min(neg_ints), max(pos_ints))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        if float(a) > float(b):\n            return a\n        else:\n            return b\n    else:\n        return None"}
{"task_id": "HumanEval/139", "completion": "    if n <= 0:\n        return \"Invalid input\"\n    if n == 1:\n        return 1\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        for j in range(i-1, 0, -1):\n            factorial *= j\n    return factorial"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            result += lst[i]**2\n        elif i % 4 == 0:\n            result += lst[i]**3\n    return result"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(n):\n        return sum(int(d) for d in str(n))\n    \n    return sorted(nums, key=lambda n: (digit_sum(n), nums.index(n)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    \n    if planet1_index < planet2_index:\n        return tuple(planets[planet1_index:planet2_index+1])\n    else:\n        return tuple(planets[planet2_index:planet1_index+1][::-1])"}
{"task_id": "HumanEval/150", "completion": "    if n == 2:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num * num\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    leftover = remaining - eaten\n    return [eaten, leftover]"}
{"task_id": "HumanEval/160", "completion": "    res = float('-inf')\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            res += operand[i]\n        elif operator[i] == '-':\n            res -= operand[i]\n        elif operator[i] == '*':\n            res *= operand[i]\n        elif operator[i] == '/':\n            res /= operand[i]\n        elif operator[i] == '**':\n            res **= operand[i]\n    return res"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for num in range(a, b+1):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n    even_digits.sort()\n    return even_digits"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    return sum(absolute_differences) / len(absolute_differences)"}
{"task_id": "HumanEval/5", "completion": "    return [num for pair in zip(numbers, [delimeter] * (len(numbers) + 1)) for num in pair][:-1]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n\t\ta, b = b, a % b\n\treturn a"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n    pair = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            pair = (numbers[i], numbers[i+1])\n    return pair"}
{"task_id": "HumanEval/22", "completion": "    return [val for val in values if isinstance(val, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds a zero point of the polynomial with coefficients xs.\n    returns the zero point of the polynomial, if exists.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) <= 0:\n        return \"Invalid input: List of coefficients should have even number of elements and all elements should be positive.\"\n    \n    # Find zero point using Newton's method\n    x0 = 0\n    for _ in range(100):\n        x1 = x0 - poly(xs, x0) / poly(xs, x0 - 1)\n        if abs(x1 - x0) < 0.0001:\n            return x1\n        x0 = x1\n    return \"No zero point found within 100 iterations.\""}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l_third = [l[i] for i in range(n) if i % 3 != 0]\n    l_third.sort()\n    for i in range(n):\n        if i % 3 == 0:\n            l[i] = l_third.pop(0)\n    return l"}
{"task_id": "HumanEval/37", "completion": "    for i in range(0, len(l), 2):\n        if i+1 < len(l):\n            l[i], l[i+1] = l[i+1], l[i]\n    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(x):\n\t\tif x < 2:\n\t\t\treturn False\n\t\tfor i in range(2, int(x**0.5) + 1):\n\t\t\tif x % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\n\tdef fibonacci(n):\n\t\tif n <= 0:\n\t\t\treturn []\n\t\telif n == 1:\n\t\t\treturn [1]\n\t\telif n == 2:\n\t\t\treturn [1, 1]\n\t\telse:\n\t\t\tfib_seq = [1, 1]\n\t\t\tfor i in range(2, n):\n\t\t\t\tfib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n\t\t\treturn fib_seq\n\n\tfib_seq = fibonacci(n)\n\tfor num in fib_seq:\n\t\tif is_prime(num):\n\t\t\treturn num\n\treturn -1"}
{"task_id": "HumanEval/41", "completion": "    return (n*(n+1))//2"}
{"task_id": "HumanEval/42", "completion": "    for i in range(len(l)):\n        l[i] += 1\n    return l"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 0, 1\n    for _ in range(n):\n        a, b, c, d = b, c, d, b + c + d + a\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    if (n == 0):\n        return 1\n    res = pow(n, (p - 2) // 3, p)\n    return res"}
{"task_id": "HumanEval/53", "completion": "    while y != 0:\n\t\tcarry = x & y\n\t\tx = x ^ y\n\t\ty = carry << 1\n\treturn x"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n\t\treturn n\n\telse:\n\t\ta, b = 0, 1\n\t\tfor _ in range(2, n+1):\n\t\t\ta, b = b, a + b\n\t\treturn b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            n = n // i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    if len(xs) < 2:\n        return []\n    derivatives = []\n    for i in range(1, len(xs)):\n        derivatives.append(i * xs[i])\n    return derivatives"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    a, b, c = 1, 1, 0\n    for _ in range(3, n + 1):\n        a, b, c = b, c, b + c + a\n    return c"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shifted_str = num_str[-shift:] + num_str[:-shift]\n    if len(shifted_str) < len(num_str):\n        shifted_str = shifted_str[::-1]\n    return shifted_str"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i) and is_prime(a // i):\n            return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    grade_range = [\n        (0.9, \"A\"),\n        (0.8, \"B\"),\n        (0.7, \"C\"),\n        (0.6, \"D\"),\n        (0.5, \"E\"),\n        (0, \"F\")\n    ]\n    return [\n        grade_range[i][1] if grade >= grade_range[i][0] else\n        \"Not Achieved\"\n        for grade in grades\n    ]"}
{"task_id": "HumanEval/84", "completion": "    ans = bin(sum(int(i) for i in str(N)))[2:]\n    return ans"}
{"task_id": "HumanEval/85", "completion": "    even_sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            even_sum += lst[i]\n    return even_sum"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort()\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    is_prime = [True] * (n + 1)\n    for num in range(2, n + 1):\n        if is_prime[num]:\n            primes.append(num)\n            for multiple in range(num * num, n + 1, num):\n                is_prime[multiple] = False\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5)"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0:\n        return max(x, y) if max(x, y) % 2 == 0 else -1\n    else:\n        return max(x + 1, y + 1) if max(x + 1, y + 1) % 2 == 0 else -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total_sum = sum(range(n, m+1))\n    average = total_sum / (m - n + 1)\n    rounded_avg = round(average)\n    binary_avg = bin(rounded_avg)\n    return binary_avg"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    odd_nums = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_nums.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    return sorted(odd_nums)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product_sign = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        magnitude_sum += abs(num) * sign\n        product_sign *= sign\n    return magnitude_sum * product_sign"}
{"task_id": "HumanEval/130", "completion": "    if n <= 0:\n        return []\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [1, 3]\n    arr = [1, 3, 2]\n    for _ in range(3, n + 1):\n        if _ % 2 == 0:\n            arr.append(arr[-1] + (_ // 2))\n        else:\n            arr.append(arr[-1] + arr[-2] + arr[-3])\n    return arr"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    return sum([int(x)**2 for x in lst])"}
{"task_id": "HumanEval/136", "completion": "    neg_ints = [x for x in lst if x < 0]\n    pos_ints = [x for x in lst if x > 0]\n    \n    if len(neg_ints) == 0 and len(pos_ints) == 0:\n        return (None, None)\n    elif len(neg_ints) == 0:\n        return (None, min(pos_ints))\n    elif len(pos_ints) == 0:\n        return (max(neg_ints), None)\n    else:\n        return (max(neg_ints), min(pos_ints))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and \".\" in a:\n        a = float(a)\n    if isinstance(b, str) and \".\" in b:\n        b = float(b)\n    if isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    else:\n        return b if isinstance(b, str) else a"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i * special_factorial(i-1)\n        return result"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            result += lst[i]**2\n        elif i % 3 != 0 and i % 4 == 0:\n            result += lst[i]**3\n    return result"}
{"task_id": "HumanEval/145", "completion": "    def get_digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n\n    return sorted(nums, key=lambda x: (get_digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num // 10) % 2 != 0 and (num % 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return tuple(planets[planet1_index:planet2_index+1])"}
{"task_id": "HumanEval/150", "completion": "    if n % 2 == 0:\n        return y\n    else:\n        return x"}
{"task_id": "HumanEval/151", "completion": "    odd_numbers = [x for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int)]\n    sum_of_squares = sum([x ** 2 for x in odd_numbers])\n    return sum_of_squares"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    num_str = str(abs(num))\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    total = number + need\n    left = remaining - total\n    return [total, left]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for o in range(len(operator)):\n        if operator[o] == '+':\n            stack.append(operand[o])\n        elif operator[o] == '-':\n            stack.append(-operand[o])\n        elif operator[o] == '*':\n            stack.append(stack.pop() * operand[o])\n        elif operator[o] == '/':\n            stack.append(stack.pop() / operand[o])\n        elif operator[o] == '**':\n            stack.append(stack.pop() ** operand[o])\n    return stack.pop()"}
{"task_id": "HumanEval/163", "completion": "    even_digits = [x for x in range(a, b+1) if x % 2 == 0]\n    even_digits.sort()\n    return even_digits"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(deviations)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    \n    return (sum_numbers, product_numbers)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair"}
{"task_id": "HumanEval/22", "completion": "    return [val for val in values if isinstance(val, int)]"}
{"task_id": "HumanEval/25", "completion": "    result = []\n    i = 2\n    while i * i <= n:\n        count = 0\n        while n % i == 0:\n            count += 1\n            n //= i\n        if count > 0:\n            result.extend([i] * count)\n        i += 1\n    if n > 1:\n        result.append(n)\n    return result"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Find x such that poly(x) = 0.\n    This function only returns one zero, even if there are multiple zeros.\n    Furthermore, this function takes a list of even length, with the largest non zero coefficient as a guarantee for a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) <= 0:\n        return \"Invalid input: List of coefficients should have even length and largest non zero coefficient as a guarantee\"\n    \n    for i in range(len(xs) // 2):\n        if poly(xs, i) == 0:\n            return i\n    \n    return \"No zero found\""}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l_third = [l[i] for i in range(n) if i % 3 != 0]\n    l_third.sort()\n    for i in range(n):\n        if i % 3 == 0:\n            l[i] = l_third.pop(0)\n    return l"}
{"task_id": "HumanEval/37", "completion": "    n = len(l)\n    for i in range(n):\n        if i % 2 == 1:\n            l[i] = l[i]\n        else:\n            l[i] = l[i].sort()\n    return l"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    a, b = 0, 1\n    for _ in range(n):\n        if is_prime(b):\n            return b\n        a, b = b, a + b\n    return -1"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [i+1 for i in l]"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 1, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, (a+b+c+d), (a+b+c+d)\n        return d"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, pow(p-2, p-2, p), p)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/58", "completion": "    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            n = n // i\n    if n > 2:\n        return n\n    return 2"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n\tif n < 2:\n\t\treturn []\n\t\n\tres = [0] * n\n\tres[0] = 1\n\tres[1] = xs[1]\n\tfor i in range(2, n):\n\t\tres[i] = i * res[i-1] + xs[i]\n\t\n\treturn res"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a = 0\n        b = 1\n        c = 1\n        for _ in range(3, n+1):\n            c = a + b + c\n            a = b\n            b = c - b - a\n        return c"}
{"task_id": "HumanEval/65", "completion": "    num_digits = len(str(x))\n    shifted_num = str((x % 10) * (10 ** shift))\n    return shifted_num.zfill(num_digits)"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for p in primes:\n        if a % p == 0:\n            q = a // p\n            for q2 in primes:\n                if q % q2 == 0:\n                    r = q // q2\n                    if r in primes:\n                        return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('F')\n    return letter_grades"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while N:\n        sum += N % 2\n        N = N // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/87", "completion": "    coords = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coords.append((i, j))\n    coords.sort()\n    coords.sort(key=lambda coord: (-coord[1], coord[0]))\n    return coords"}
{"task_id": "HumanEval/96", "completion": "    prime_numbers = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n    return prime_numbers"}
{"task_id": "HumanEval/97", "completion": "    return (a%10) * (b%10)"}
{"task_id": "HumanEval/99", "completion": "    return int(value) if abs(float(value) - int(value)) < 0.5 else int(value) + 1"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0 and y % 2 == 0:\n        if x > y:\n            x, y = y, x\n        return x\n    elif x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = (n + m) / 2\n    rounded_average = round(average)\n    return bin(rounded_average)"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            sum = 0\n            for j in range(1, i + 1):\n                sum += j\n            result.append(sum)\n    return result"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/123", "completion": "    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    return [x for x in collatz_seq if x % 2 != 0]"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        product *= num\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product"}
{"task_id": "HumanEval/130", "completion": "    a, b, c = 0, 1, 1\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        output = [1, 3, 2]\n        for i in range(2, n):\n            next_num = a + b + c\n            output.append(next_num)\n            a, b, c = b, c, next_num\n        return output"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n        n = n // 10\n    return product if product > 0 else 0"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num) ** 2\n    return result"}
{"task_id": "HumanEval/136", "completion": "    pos = None\n    neg = None\n    for num in lst:\n        if num >= 0:\n            if pos is None or num > pos:\n                pos = num\n        else:\n            if neg is None or num < neg:\n                neg = num\n    if pos is not None and neg is not None:\n        return (neg, pos)\n    elif pos is not None:\n        return (None, pos)\n    elif neg is not None:\n        return (neg, None)\n    else:\n        return (None, None)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(',', '').replace('.', ''))\n        b = float(b.replace(',', '').replace('.', ''))\n    if isinstance(a, str) and isinstance(b, int):\n        a = float(a.replace(',', '').replace('.', ''))\n    if isinstance(a, int) and isinstance(b, str):\n        b = float(b.replace(',', '').replace('.', ''))\n    if isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        if float(a) > float(b):\n            return a\n        else:\n            return b\n    elif isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        else:\n            return b"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        result *= i * special_factorial(n-i)\n    return result"}
{"task_id": "HumanEval/142", "completion": "    total_sum = 0\n    for i, num in enumerate(lst):\n        if (i + 1) % 3 == 0 and (i + 1) % 4 != 0:\n            total_sum += num ** 2\n        elif (i + 1) % 3 != 0 and (i + 1) % 4 == 0:\n            total_sum += num ** 3\n        else:\n            total_sum += num\n    return total_sum"}
{"task_id": "HumanEval/145", "completion": "    sums = []\n    for num in nums:\n        digit_sum = sum(int(digit) for digit in str(abs(num)))\n        sums.append((digit_sum, num))\n    sums.sort()\n    return [num for _, num in sums]"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    return tuple(planets[idx1+1:idx2])"}
{"task_id": "HumanEval/150", "completion": "    if n % 2 == 1:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            sum_of_squares += num * num\n    return sum_of_squares"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    num_str = str(num)\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "    operand.insert(0, 1)  # adding a dummy element for the first operand\n    result = operand[0]\n    for i in range(1, len(operand), 2):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '/':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    even_digits = [int(digit) for digit in str(a) if int(digit)%2==0 and int(digit)>=a and int(digit)<=b]\n    even_digits.sort()\n    return even_digits"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(num - mean) for num in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers) - 1):\n        result.extend([numbers[i], delimeter])\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    \n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return sum(numbers), product"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = abs(numbers[1] - numbers[0])\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(2, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    return closest_pair"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Find zero of polynomial with coefficients xs.\n    Returns only one zero point, even if there are many.\n    Additionally, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) <= 0:\n        return None\n    \n    left, right = 0, max(xs)\n    while left < right:\n        mid = (left + right) / 2\n        if poly(xs, mid) > 0:\n            right = mid\n        else:\n            left = mid\n    return round(left, 2)"}
{"task_id": "HumanEval/33", "completion": "    result = [l[i] if i % 3 != 2 else sorted(l[i-2:i+1])[0] for i in range(len(l))]\n    return result"}
{"task_id": "HumanEval/37", "completion": "    n = len(l)\n    for i in range(0, n, 2):\n        l[i] = l[i] if l[i] % 2 != 0 else sorted(l[i:i + 2])[0]\n    return l"}
{"task_id": "HumanEval/39", "completion": "    a, b = 2, 3\n    while True:\n        if is_prime(b):\n            if b == n:\n                return b\n        a, b = b, a + b"}
{"task_id": "HumanEval/41", "completion": "    return 0"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 0, 1\n    for _ in range(n):\n        a, b, c, d = b, c, d, (b + c + d + a) % 4\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    res = 1\n    while n:\n        res = (res * 2) % p\n        n = n >> 1\n    return res"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    return list(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i:\n            i += 2\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    return [coef * (len(xs) - i - 1) for i, coef in enumerate(xs)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    a, b, c, d = 0, 0, 1, 1\n    for _ in range(2, n + 1):\n        c, d = d, a + b + c + d\n        a, b = b, c\n    return d"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift %= len(num_str)\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(i+1, a//i + 1):\n                if a % (i*j) == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3.0:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2.0:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        elif grade >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"F\")\n    return letter_grades"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = 0\n    while N:\n        binary_sum += N % 2\n        N //= 2\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            result.append((i, lst[i].index(x)))\n    result.sort()\n    result.sort(key=lambda t: (-t[1], t[0]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    result = []\n    for num in range(2, n):\n        if is_prime(num):\n            result.append(num)\n    return result\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return round(num)"}
{"task_id": "HumanEval/102", "completion": "    if x > y:\n        return -1\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(round(avg))"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    odd_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 != 0:\n            odd_sum += lst[i]\n    return odd_sum"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 != 0:\n            result.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    return sorted(result)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product_signs = 1\n    for num in arr:\n        product_signs *= (1 if num > 0 else -1)\n    return sum(abs(num) * product_signs for num in arr)"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n    if n == 3:\n        return [1, 3, 2]\n    \n    result = [1, 3, 2]\n    a = 1\n    b = 3\n    c = 2\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            result.append(a + b)\n            a = b\n            b = c\n            c = result[i - 1] + result[i - 2]\n        else:\n            result.append(c + a)\n            a = c\n            c = result[i - 1] + result[i - 2] + b\n    return result"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 0 else 0"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        rounded_num = int(round(num))\n        result += (rounded_num ** 2)\n    return result"}
{"task_id": "HumanEval/136", "completion": "    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    \n    if len(negatives) == 0 and len(positives) == 0:\n        return (None, None)\n    elif len(negatives) == 0:\n        return (max(positives), min(positives))\n    elif len(positives) == 0:\n        return (max(negatives), min(negatives))\n    else:\n        return (max(negatives), min(positives))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == str:\n        a = float(a.replace(',', '').replace('.', ''))\n    if type(b) == str:\n        b = float(b.replace(',', '').replace('.', ''))\n    if type(a) == int and type(b) == int:\n        return max(a, b)\n    if type(a) == float and type(b) == float:\n        return max(a, b)\n    return a if a > b else b"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if (i % 3 == 0 and i % 4 != 0) or (i % 3 != 0 and i % 4 == 0):\n            total += lst[i]**2\n        else:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/145", "completion": "    digit_sums = [(sum(map(int, str(num))), i) for i, num in enumerate(nums)]\n    digit_sums.sort()\n    return [num for _, num in digit_sums]"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\",\n        \"Uranus\", \"Neptune\"\n    ]\n    if planet1 in planets and planet2 in planets:\n        start_index = planets.index(planet1)\n        end_index = planets.index(planet2)\n        return tuple(planets[start_index+1:end_index])\n    else:\n        return ()"}
{"task_id": "HumanEval/150", "completion": "    if n == 2 or n == 3:\n\t\treturn x\n\tif n % 2 == 0:\n\t\treturn y\n\tfor i in range(3, int(n**0.5)+1, 2):\n\t\tif n % i == 0:\n\t\t\treturn y\n\treturn x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num ** 2\n    return 2 * total"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    num_str = str(num)\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count"}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + need\n    leftover = remaining - total_eaten\n    return [total_eaten, leftover]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operand)):\n        stack.append(operand[i])\n        while len(stack) >= 3 and operator[i] == '+':\n            stack.append(stack.pop() + stack.pop())\n        while len(stack) >= 3 and operator[i] == '-':\n            stack.append(-stack.pop() - stack.pop())\n        while len(stack) >= 3 and operator[i] == '*':\n            stack.append(stack.pop() * stack.pop())\n        while len(stack) >= 3 and operator[i] == '/':\n            stack.append(stack.pop() // stack.pop())\n        while len(stack) >= 3 and operator[i] == '**':\n            stack.append(stack.pop() ** stack.pop())\n    return stack[0]"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                result.append(int(digit))\n    result.sort()\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(num - mean) for num in numbers]\n    return sum(absolute_differences) / len(absolute_differences)"}
{"task_id": "HumanEval/5", "completion": "    return [num for pair in zip(numbers, [delimeter]*(len(numbers)-1)) for num in pair] + [numbers[-1]] if numbers else []"}
{"task_id": "HumanEval/8", "completion": "    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    return sum_numbers, product_numbers"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    closest = float('inf')\n    closest_pair = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < closest:\n            closest = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds a zero of a polynomial with coefficients xs.\n    Finds a zero x such that poly(x) = 0.\n    Find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Coefficients list should have even number of elements.\")\n    \n    # finding the root using bisection method\n    left, right = -math.inf, math.inf\n    for i in range(len(xs) // 2):\n        if xs[i] > 0:\n            left = xs[i]\n        else:\n            right = xs[i]\n    while right - left > 1e-9:\n        mid = (left + right) / 2\n        if poly(xs, mid) > 0:\n            right = mid\n        else:\n            left = mid\n    return left"}
{"task_id": "HumanEval/33", "completion": "    l' = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l' += [l[i]]\n        else:\n            l' += sorted(l[i])\n    return l'"}
{"task_id": "HumanEval/37", "completion": "    even_indices = [x for x in range(len(l)) if x % 2 == 0]\n    even_values = [l[x] for x in even_indices]\n    even_values.sort()\n    l[::2] = even_values\n    return l"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 1, 1\n    for _ in range(n-1):\n        a, b = b, a+b\n    if is_prime(b):\n        return b\n    return -1"}
{"task_id": "HumanEval/41", "completion": "    return 0"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    a = 0\n\tb = 2\n\tc = 0\n\td = 2\n\tfor _ in range(n):\n\t\te = a + b + c + d\n\t\tf = d + c\n\t\ta = b\n\t\tb = e - f\n\t\tc = a\n\t\td = b\n\treturn a"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    MOD = 10**9 + 7\n    return pow(n, (p-2)//2, p)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1 & set2))"}
{"task_id": "HumanEval/59", "completion": "    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            n = n // i\n    if n > 2:\n        return n\n    return 2"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    derivatives = []\n    n = len(xs)\n    for i in range(1, n):\n        derivatives.append(i * xs[i])\n    return derivatives"}
{"task_id": "HumanEval/63", "completion": "    if n < 2:\n        return n\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        c = a + b + c\n        a, b = b, c - b - a\n    return c"}
{"task_id": "HumanEval/65", "completion": "    num_digits = len(str(x))\n    shift = shift % num_digits\n    if shift == 0:\n        return str(x)\n    return str(x)[-shift:] + str(x)[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(i, a//i):\n                if (i*j == a):\n                    return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    grades.sort()\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('F')\n    return letter_grades"}
{"task_id": "HumanEval/84", "completion": "    return bin(N).replace(\"0b\", \"\")"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort()\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    result = []\n    i = 2\n    while len(result) < n:\n        if is_prime(i):\n            result.append(i)\n        i += 1\n    return result\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5)"}
{"task_id": "HumanEval/102", "completion": "    result = -1\n\tfor i in range(x, y+1):\n\t\tif i % 2 == 0:\n\t\t\tresult = i\n\treturn result"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n\t\treturn -1\n\tavg = sum(range(n, m+1)) / (m-n+1)\n\trounded_avg = round(avg)\n\treturn bin(rounded_avg)"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 != 0:\n            result.append(n)\n        n = 3*n + 1 if n % 2 != 0 else n // 2\n    return result"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product_of_signs = 1\n    for num in arr:\n        product_of_signs *= 1 if num > 0 else -1 if num < 0 else 0\n    return sum(map(abs, arr)) * product_of_signs"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        a, b, c = 1, 3, 2\n        res = [a, b, c]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                d = b + c\n            else:\n                d = a + b + c\n            a, b, c = c, d, c + d\n            res.append(d)\n        return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0"}
{"task_id": "HumanEval/133", "completion": "    sum = 0\n    for num in lst:\n        sum += (int(num) ** 2)\n    return sum"}
{"task_id": "HumanEval/136", "completion": "    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n    \n    if not neg_nums and not pos_nums:\n        return (None, None)\n    elif not neg_nums:\n        return (max(pos_nums), min(pos_nums))\n    elif not pos_nums:\n        return (max(neg_nums), min(neg_nums))\n    \n    return (max(neg_nums), min(pos_nums))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, (int, float)):\n        if isinstance(b, (int, float)):\n            if a > b:\n                return a\n            else:\n                return b\n        else:\n            return b\n    else:\n        if isinstance(b, (int, float)):\n            if a == b:\n                return None\n            else:\n                return a if float(a) > float(b) else b\n        else:\n            return b"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i * special_factorial(n - i)\n        return result"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    in_orbit_planets = planets[start_index:end_index+1]\n    return tuple(sorted(in_orbit_planets))"}
{"task_id": "HumanEval/150", "completion": "    if isPrime(n):\n        return x\n    else:\n        return y\n\ndef isPrime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            sum_of_squares += num**2\n    return 2 * sum_of_squares if sum_of_squares > 0 else 0"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    num_str = str(num)\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + need\n    if total_eaten <= remaining:\n        return [total_eaten, remaining - total_eaten]\n    else:\n        return [total_eaten, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '/':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return sorted(even_digits)"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(deviations)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    sum_result = 0\n    product_result = 1\n    for number in numbers:\n        sum_result += number\n        product_result *= number\n    return (sum_result, product_result)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero of polynomial with coefficients xs.\n    Returns zero if it exists, else returns -1.\n    \"\"\"\n    n = len(xs)\n    largest_non_zero_coeff = max(xs[1:]) if 1 < n else -1\n    if largest_non_zero_coeff == 0:\n        return -1\n    for i in range(1, n + 1, 2):\n        if poly(xs, -i / largest_non_zero_coeff) == 0:\n            return -i / largest_non_zero_coeff\n    return -1"}
{"task_id": "HumanEval/33", "completion": "    for i in range(len(l)):\n        if i % 3 == 2:\n            l[i] = sorted(l[i])\n    return l"}
{"task_id": "HumanEval/37", "completion": "    n = len(l)\n    even_indexes = l[1::2]\n    even_indexes.sort()\n    l_prime = []\n    for i in range(n):\n        if i % 2 == 0:\n            l_prime.append(even_indexes.pop(0))\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"task_id": "HumanEval/39", "completion": "    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a, b = 2, 3\n        count = 2\n        while count < n:\n            if is_prime(b):\n                return b\n            a, b = b, a + b\n            count += 1\n        return \"No such Fibonacci number with exactly n prime factors\"\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/41", "completion": "    return 0"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n < 4:\n        return n\n    a, b, c, d = 0, 0, 0, 1\n    for _ in range(n-4):\n        a, b, c, d = b, c, d, a+b+c+d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return modp(n // 2, p)\n    return pow(n, (p-1) // 2, p)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    res = []\n    for i in range(1, len(xs)):\n        res.append(i * xs[i])\n    return res"}
{"task_id": "HumanEval/63", "completion": "    def fib(x):\n\t\tif x <= 0:\n\t\t\treturn 0\n\t\telif x == 1 or x == 2:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn fib(x-1) + fib(x-2) + fib(x-3)\n\treturn fib(n)"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            for j in range(i, int(a**0.5) + 1):\n                if a % (i * j) == 0:\n                    for k in range(j, int(a**0.5) + 1):\n                        if a % (i * j * k) == 0:\n                            return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    grades.sort(reverse=True)\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('F')\n    return letter_grades"}
{"task_id": "HumanEval/84", "completion": "    res = 0\n\twhile N:\n\t\tres += N % 2\n\t\tN //= 2\n\treturn bin(res)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result)"}
{"task_id": "HumanEval/96", "completion": "    result = []\n    num = 2\n    while len(result) < n:\n        if is_prime(num):\n            result.append(num)\n        num += 1\n    return result\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0 and y % 2 == 0:\n        if x > y:\n            return y\n        return x\n    elif x % 2 == 0:\n        return choose_num(x, y - 1)\n    elif y % 2 == 0:\n        return choose_num(x - 1, y)\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = sum(range(n, m+1)) / (m-n+1)\n    rounded_average = round(average)\n    return bin(rounded_average)"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    seq = [n]\n    while seq[-1] != 1:\n        if seq[-1] % 2 == 0:\n            seq.append(seq[-1] // 2)\n        else:\n            seq.append(3 * seq[-1] + 1)\n    for num in seq:\n        if num % 2 != 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        magnitude_sum += abs(num)\n        sign_product *= 1 if num > 0 else -1\n    return magnitude_sum * sign_product"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        a = 1\n        b = 3\n        c = 2\n        for i in range(4, n + 1):\n            d = a + b + c\n            result.append(d)\n            a = b\n            b = c\n            c = d\n        return result"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0"}
{"task_id": "HumanEval/133", "completion": "    return sum(round(x)**2 for x in lst)"}
{"task_id": "HumanEval/136", "completion": "    pos = [i for i in lst if i > 0]\n    neg = [i for i in lst if i < 0]\n    \n    if not pos:\n        return (None, min(neg, default=None))\n    elif not neg:\n        return (max(pos, default=None), None)\n    else:\n        return (min(neg), max(pos))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        return max(a, b)\n    else:\n        return None"}
{"task_id": "HumanEval/139", "completion": "    result = 1\n    for i in range(1, n + 1):\n        result *= i * (i - 1) * (i - 2) * ... * 1\n    return result"}
{"task_id": "HumanEval/142", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        else:\n            continue\n    return sum(lst)"}
{"task_id": "HumanEval/145", "completion": "    sum_digits = []\n    for num in nums:\n        sum_digits.append((sum(int(digit) for digit in str(num)), num, nums.index(num)))\n    sum_digits.sort()\n    return [x[1] for x in sum_digits]"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    orbit1 = planets[planet1]\n    orbit2 = planets[planet2]\n\n    if orbit1 > orbit2:\n        orbit1, orbit2 = orbit2, orbit1\n\n    planets_in_range = [planet for planet, orbit in planets.items() if orbit > orbit1 and orbit < orbit2]\n    planets_in_range.sort(key=lambda x: planets[x])\n    return tuple(planets_in_range)"}
{"task_id": "HumanEval/150", "completion": "    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return even_count, odd_count"}
{"task_id": "HumanEval/159", "completion": "    if remaining < need:\n        remaining = need\n    eaten = number + remaining\n    left = remaining - need\n    return [eaten, left]"}
{"task_id": "HumanEval/160", "completion": "    n = len(operator)\n    stack = []\n    for i in range(len(operand)):\n        stack.append(operand[i])\n    for j in range(n):\n        if operator[j] == '+':\n            stack.append(stack.pop() + stack.pop())\n        elif operator[j] == '-':\n            stack.append(-stack.pop() + stack.pop())\n        elif operator[j] == '*':\n            stack.append(stack.pop() * stack.pop())\n        elif operator[j] == '/':\n            stack.append(stack.pop() // stack.pop())\n        elif operator[j] == '**':\n            stack.append(stack.pop() ** stack.pop())\n    return stack.pop()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(deviations)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    sum_value = 0\n    product_value = 1\n    for num in numbers:\n        sum_value += num\n        product_value *= num\n    return (sum_value, product_value)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"task_id": "HumanEval/22", "completion": "    integers = [value for value in values if isinstance(value, int)]\n    return integers"}
{"task_id": "HumanEval/25", "completion": "    result = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            result.append(divisor)\n            n //= divisor\n        divisor += 1\n    return result"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero of a polynomial with coefficients xs.\n    \"\"\"\n    largest_non_zero_coeff = max(coeff for coeff in xs if coeff != 0)\n    for i in range(len(xs) // 2):\n        if xs[i] * xs[-i - 1] < 0:\n            return -xs[i] / xs[-i - 1]\n    return None"}
{"task_id": "HumanEval/33", "completion": "    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_copy[i] = sorted(l_copy[i])\n    return l_copy"}
{"task_id": "HumanEval/37", "completion": "    return [l[i] if i % 2 != 0 else sorted(l[i:i+2])[1] for i in range(len(l))]"}
{"task_id": "HumanEval/39", "completion": "    if n <= 1:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n + 1):\n        c = a + b\n        while c > 1:\n            for i in range(2, int(c**0.5) + 1):\n                if c % i == 0:\n                    c = c // i\n                    break\n            else:\n                return c\n        a, b = b, c\n    return 1"}
{"task_id": "HumanEval/41", "completion": "    if n == 1:\n        return 0\n    else:\n        return 1"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 0, 0\n    for _ in range(n):\n        a, b, c, d = b, c, d, (c + d + b + a) % 10\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    result = pow(n, p - 2, p)\n    return result"}
{"task_id": "HumanEval/53", "completion": "    while y != 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a+b\n    return b"}
{"task_id": "HumanEval/58", "completion": "    unique_l1 = set(l1)\n    unique_l2 = set(l2)\n    common_elements = list(unique_l1.intersection(unique_l2))\n    return sorted(common_elements)"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n            while n % i == 0:\n                n //= i\n            if i * i == n:\n                return i\n        i += 2\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    if len(xs) == 1:\n        return [0]\n    else:\n        derivative_terms = [1] * (len(xs) - 1)\n        for i in range(len(xs) - 2, -1, -1):\n            derivative_terms[i] = xs[i + 1] * (i + 1)\n        return derivative_terms"}
{"task_id": "HumanEval/63", "completion": "    if n < 2:\n        return n\n    a, b, c = 0, 0, 1\n    for _ in range(n-2):\n        a, b, c = b, c, a + b + c\n    return c"}
{"task_id": "HumanEval/65", "completion": "    digits = [int(digit) for digit in str(x)]\n    shift = shift % len(digits)\n    return ''.join(map(str, digits[-shift:] + digits[:-shift]))"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(num):\n\t\tif num <= 1:\n\t\t\treturn False\n\t\tfor i in range(2, int(num**0.5) + 1):\n\t\t\tif num % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\n\tfor i in range(2, int(a**0.5) + 1):\n\t\tif a % i == 0 and is_prime(i) and is_prime(a // i):\n\t\t\treturn True\n\treturn False"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('F')\n    return letter_grades"}
{"task_id": "HumanEval/84", "completion": "    total = 0\n    while N:\n        total += N & 1\n        N >>= 1\n    return bin(total)[2:]"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort()\n    result.sort(key=lambda t: (t[0], -t[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    result = []\n    i = 2\n    while len(result) < n:\n        if is_prime(i):\n            result.append(i)\n        i += 1\n    return result\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/97", "completion": "    return int(str(a % 10) * str(b % 10))"}
{"task_id": "HumanEval/99", "completion": "    number = float(value)\n    return int(number + 0.5)"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = total // (m - n + 1)\n    return bin(round(avg))[2:]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(2, n+1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 != 0:\n            result.append(n)\n        n = n // 2 if n % 2 == 0 else 3*n + 1\n    result.append(1)\n    return sorted(result)"}
{"task_id": "HumanEval/128", "completion": "    if len(arr) == 0:\n        return None\n    \n    sign_product = 1\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n    \n    magnitude_product = 1\n    for num in arr:\n        magnitude_product *= abs(num)\n    \n    return magnitude_product * sign_product"}
{"task_id": "HumanEval/130", "completion": "    result = [1]\n    if n == 0:\n        return result\n    if n == 1:\n        return result\n    if n == 2:\n        return result + [3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            result.append(result[i // 2 - 1] + result[i // 2])\n        else:\n            result.append(result[i // 3 - 1] + result[i // 3] + result[i // 2 - 1])\n    return result"}
{"task_id": "HumanEval/131", "completion": "    oddProduct = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            oddProduct *= digit\n        n //= 10\n    return oddProduct if oddProduct != 1 else 0"}
{"task_id": "HumanEval/133", "completion": "    return sum([round(num)**2 for num in lst])"}
{"task_id": "HumanEval/136", "completion": "    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    if not negatives:\n        return (None, min(positives))\n    elif not positives:\n        return (max(negatives), None)\n    else:\n        return (max(negatives), min(positives))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == str and \".\" in a or \",\" in a:\n        a = float(a.replace(',', '.').replace('.', ','))\n    if type(b) == str and \".\" in b or \",\" in b:\n        b = float(b.replace(',', '.').replace('.', ','))\n    if type(a) == float and type(b) == float:\n        return max(a, b)\n    elif type(a) == int and type(b) == int:\n        return max(a, b)\n    else:\n        return b if type(b) == str else a"}
{"task_id": "HumanEval/139", "completion": "    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i, num in enumerate(lst):\n        if (i + 1) % 3 == 0:\n            result += num ** 2\n        elif (i + 1) % 4 == 0:\n            result += num ** 3\n    return result"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    planet_indices = {planet: i for i, planet in enumerate(planets)}\n    \n    if planet1 in planet_indices and planet2 in planet_indices:\n        start = planet_indices[planet1]\n        end = planet_indices[planet2]\n        return tuple(planets[start + 1:end])\n    else:\n        return ()"}
{"task_id": "HumanEval/150", "completion": "    if n == 2:\n        return x\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num % 2 != 0 and isinstance(num, int) and num >= 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return even_count, odd_count"}
{"task_id": "HumanEval/159", "completion": "    eaten = min(remaining, need - number)\n    left = remaining - eaten\n    return [eaten + number, left]"}
{"task_id": "HumanEval/160", "completion": "    result = int(operand[0])\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += int(operand[i+1])\n        elif operator[i] == '-':\n            result -= int(operand[i+1])\n        elif operator[i] == '*':\n            result *= int(operand[i+1])\n        elif operator[i] == '/':\n            result //= int(operand[i+1])\n        elif operator[i] == '**':\n            result **= int(operand[i+1])\n    return result"}
{"task_id": "HumanEval/163", "completion": "    return sorted(filter(lambda x: x % 2 == 0, range(a, b+1)))"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n\treturn number - integer_part"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    mad = sum(deviations) / len(deviations)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    return (sum_numbers, product_numbers)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds and returns a zero of the given polynomial in x.\n    It returns the root rounded to 2 decimal places.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Coefficient list must have even number of elements.\")\n    max_coeff = max(xs[i] for i in range(1, len(xs), 2))\n    root = -1\n    for i in range(len(xs)):\n        if i % 2 == 0:\n            if poly(xs, i/max_coeff) == 0:\n                root = i/max_coeff\n                break\n    return round(root, 2)"}
{"task_id": "HumanEval/33", "completion": "    l[::3], l[1::3], l[2::3] = sorted(l[::3]), sorted(l[1::3]), sorted(l[2::3])\n    return l"}
{"task_id": "HumanEval/37", "completion": "    even_indicies = l[1::2]\n    even_indicies.sort()\n    \n    for i in range(0, len(even_indicies), 2):\n        l[i+1] = even_indicies[i]\n    \n    return l"}
{"task_id": "HumanEval/39", "completion": "    a, b, c = 2, 3, 5\n    count = 0\n    while count < n:\n        if c % 2 == 0:\n            a, b, c = b, c, b + c\n        else:\n            a, b, c = b, c, b * c + a\n        count += 1\n    return c"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    area = (1/2) * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        a = 0\n        b = 1\n        c = 0\n        d = 1\n        for _ in range(3, n+1):\n            c = a + b + c + d\n            d = a + b + c + d\n            a = b\n            b = c\n            c = d\n            d = c\n        return c"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, (p-1)//2, p)"}
{"task_id": "HumanEval/53", "completion": "    while y != 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(3, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    common_set = set1.intersection(set2)\n    common_list = list(common_set)\n    common_list.sort()\n    return common_list"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    divisor = 3\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            n //= divisor\n        else:\n            divisor += 2\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [1]\n    else:\n        derivative_poly = []\n        for i in range(1, n):\n            derivative_poly.append(i * xs[i])\n        return derivative_poly"}
{"task_id": "HumanEval/63", "completion": "    fib = [0]*(n+1)\n    fib[1] = 0\n    fib[2] = 1\n    for i in range(3, n+1):\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3]\n    return fib[n]"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    num_len = len(num_str)\n    if shift >= num_len:\n        return num_str[::-1]\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if (a + b > c) and (a + c > b) and (b + c > a):\n\t\ts = (a + b + c) / 2\n\t\tarea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\t\treturn round(area, 2)\n\telse:\n\t\treturn -1"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i, a // i + 1):\n                if a % (i * j) == 0 and is_prime(j) and (a // (i * j)) > j:\n                    return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    grades = [round(x, 1) for x in grades]\n    grades.sort()\n    grades.reverse()\n    \n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades"}
{"task_id": "HumanEval/84", "completion": "    summ = 0\n    while N > 0:\n        summ += N % 2\n        N //= 2\n    return bin(summ)[2:]"}
{"task_id": "HumanEval/85", "completion": "    even_sum = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            even_sum += lst[i]\n    return even_sum"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    number = float(value)\n    return int(number + 0.5) if number > 0 else int(number - 0.5)"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y)\n    elif x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n\t\treturn -1\n\t\n\taverage = (n + m) / 2\n\trounded_average = round(average)\n\treturn bin(rounded_average)"}
{"task_id": "HumanEval/106", "completion": "    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    def count_ones(n):\n        return bin(n).count('1')\n\n    arr.sort(key=lambda x: (count_ones(x), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    odd_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 != 0:\n            odd_sum += lst[i]\n    return odd_sum"}
{"task_id": "HumanEval/123", "completion": "    sequence = [n]\n    while sequence[-1] != 1:\n        next_num = sequence[-1]\n        if next_num % 2 == 0:\n            sequence.append(next_num // 2)\n        else:\n            sequence.append(3 * next_num + 1)\n    return sorted([x for x in sequence if x % 2 != 0])"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [1, 3]\n    a, b, c = 1, 3, 2\n    res = [a, b, c]\n    for _ in range(3, n + 1):\n        if n % 2 == 0:\n            res.append(1 + _ // 2)\n        else:\n            res.append(c + res[-1] + res[-2])\n    return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    has_odd_digit = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            has_odd_digit = True\n            product *= digit\n        n //= 10\n    return product if has_odd_digit else 0"}
{"task_id": "HumanEval/133", "completion": "    return sum([int(round(x**2)) for x in lst])"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n\n    if not neg_integers:\n        return (None, min(pos_integers))\n    elif not pos_integers:\n        return (max(neg_integers), None)\n    else:\n        return (max(neg_integers), min(pos_integers))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and '.' in a:\n        a = float(a)\n    if isinstance(b, str) and '.' in b:\n        b = float(b)\n    \n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        return b"}
{"task_id": "HumanEval/139", "completion": "    if n == 0 or n == 1:\n        return 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial * special_factorial(n - 1)"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if (i % 3 == 0 and i % 4 != 0) or (i % 4 == 0 and i % 3 != 0):\n            total += lst[i] * lst[i]\n        else:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/145", "completion": "    def get_digit_sum(num):\n        return sum([int(digit) for digit in str(num)])\n\n    return sorted(nums, key=lambda x: (get_digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num // 10) % 2 != 0 and (num % 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    try:\n        i1, i2 = planets.index(planet1), planets.index(planet2)\n    except ValueError:\n        return ()\n    return tuple(planets[i1+1:i2])"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, int(n**0.5) + 1):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if num >= 0 and isinstance(num, int) and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return 2 * sum_of_squares"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/159", "completion": "    eaten = min(number + need, remaining)\n    left = max(0, remaining - eaten)\n    return [eaten, left]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for op in operator:\n        if op == '+':\n            stack.append(stack.pop() + operand.pop())\n        elif op == '-':\n            stack.append(stack.pop() - operand.pop())\n        elif op == '*':\n            stack.append(stack.pop() * operand.pop())\n        elif op == '/':\n            stack.append(stack.pop() // operand.pop())\n        elif op == '**':\n            stack.append(stack.pop() ** operand.pop())\n    return stack.pop()"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    even_digits.sort()\n    return even_digits"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    n = len(numbers)\n    mean = sum(numbers) / n\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / n\n    return mad"}
{"task_id": "HumanEval/5", "completion": "    return [n for pair in zip(numbers, [delimeter] * len(numbers)) for n in pair]"}
{"task_id": "HumanEval/8", "completion": "    sum_result = 0\n    product_result = 1\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    return sum_result, product_result"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor:\n            divisor += 1\n        else:\n            n //= divisor\n            factors.append(divisor)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Find zero of a polynomial with given coefficients.\n    Returns only one zero if it exists.\n    \"\"\"\n    if len(xs) % 2 != 0 or xs[-1] != 0:\n        raise ValueError(\"Input list xs must have even number of coefficients and largest non zero coefficient.\")\n    \n    # Find zero using Newton's method\n    x = 0\n    for i in range(len(xs)-1):\n        x -= poly(xs, x) / xs[i]\n    return round(x, 2)"}
{"task_id": "HumanEval/33", "completion": "    l_third = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_third.append(l[i])\n        else:\n            l_third.append(sorted(l[i]))\n    return l_third"}
{"task_id": "HumanEval/37", "completion": "    n = len(l)\n    for i in range(n):\n        if i % 2 == 0:\n            l[i] = sorted(l[i])\n    return l"}
{"task_id": "HumanEval/39", "completion": "    fib = [0] * (n + 1)\n\tfib[1] = 2\n\tfor i in range(2, n + 1):\n\t\tfib[i] = fib[i - 1] + fib[i - 2]\n\tfor i in range(n, 1, -1):\n\t\tif is_prime(fib[i]):\n\t\t\treturn fib[i]\n\treturn -1\n\ndef is_prime(n):\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/41", "completion": "    return 0"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    a = 0\n\tb = 1\n\tc = 0\n\td = 1\n\tfor i in range(n):\n\t\tc = a + b + d + c\n\t\td = c + b + d + c\n\t\ta = b\n\t\tb = c\n\treturn c"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, (p - 1) // 2, p)"}
{"task_id": "HumanEval/53", "completion": "    return x + y\n\ndef multiply(x: int, y: int):\n    return x * y\n\ndef divide(x: int, y: int):\n    return x / y\n\ndef power(x: int, y: int):\n    return x ** y"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/58", "completion": "    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(n // 2, 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    if n <= 0:\n        return 0\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    derivative_poly = [0] * n\n    for i in range(1, n):\n        derivative_poly[i] = i * xs[i]\n    return derivative_poly"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib1 = 0\n        fib2 = 1\n        for _ in range(3, n+1):\n            fib3 = fib1 + fib2 + fibfib(n-3)\n            fib1, fib2 = fib2, fib3\n        return fib3"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift = shift % len(num_str)  # ensure shift is within the number of digits\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    if a < 4:\n        return False\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    def grade_equation(grade):\n        if grade >= 4.0:\n            return 'A+'\n        elif grade >= 3.7:\n            return 'A'\n        elif grade >= 3.3:\n            return 'B+'\n        elif grade >= 3:\n            return 'B'\n        elif grade >= 2.7:\n            return 'C+'\n        elif grade >= 2.3:\n            return 'C'\n        elif grade >= 2:\n            return 'D+'\n        elif grade >= 1.7:\n            return 'D'\n        elif grade >= 1.3:\n            return 'E'\n        elif grade >= 1:\n            return 'F'\n        else:\n            return 'F'\n    \n    return [grade_equation(grade) for grade in grades]"}
{"task_id": "HumanEval/84", "completion": "    return bin(N)[2:]"}
{"task_id": "HumanEval/85", "completion": "    odd_indices_even = [lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0]\n    return sum(odd_indices_even)"}
{"task_id": "HumanEval/87", "completion": "    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    \n    coordinates.sort()\n    coordinates.sort(key=lambda x: (-x[0], -x[1]))\n    \n    return coordinates"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return int(str(a)[-1]) * int(str(b)[-1])"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5)"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0 and y % 2 == 0:\n        if x > y:\n            return x - 2\n        else:\n            return y - 2\n    elif x % 2 == 1 and y % 2 == 1:\n        return -1\n    else:\n        return max(x - 1, y - 1)"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(average)\n    return bin(rounded_avg)"}
{"task_id": "HumanEval/106", "completion": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(math.factorial(i))\n        else:\n            res.append(sum(range(1, i+1)))\n    return res"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[1::2]) if len(lst) % 2 == 0 else 0"}
{"task_id": "HumanEval/123", "completion": "    collatz_seq = []\n    while n != 1:\n        collatz_seq.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return sorted([x for x in collatz_seq if x % 2 != 0])"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= 1 if num > 0 else -1 if num < 0 else 0\n    return sum(abs(num) * product for num in arr)"}
{"task_id": "HumanEval/130", "completion": "    if n <= 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    \n    tri_list = [3, 1]\n    \n    for i in range(2, n):\n        if i % 2 == 0:\n            next_num = 1 + i // 2\n        else:\n            next_num = tri_list[i - 1] + tri_list[i - 2] + tri_list[i - 3]\n        tri_list.append(next_num)\n    \n    return tri_list"}
{"task_id": "HumanEval/131", "completion": "    if n % 2 == 0:\n        return 0\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    lst = [int(x) for x in lst]\n    return sum([x**2 for x in lst])"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    if not neg_integers or not pos_integers:\n        return (None, None)\n    else:\n        return (max(neg_integers), min(pos_integers))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and \".\" in a:\n        a = float(a)\n    if isinstance(b, str) and \".\" in b:\n        b = float(b)\n    if isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        return None"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i * special_factorial(i - 1)\n        return result"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if (i+1) % 3 == 0:\n            total += lst[i] ** 2\n        elif (i+1) % 4 == 0 and (i+1) % 3 != 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/145", "completion": "    sum_digits = lambda x: sum(int(digit) for digit in str(x))\n    return sorted(nums, key=lambda x: (sum_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num // 10) % 2 != 0 and (num % 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/150", "completion": "    if n%2 == 0:\n        return y\n    else:\n        return x"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            sum_of_squares += num * num\n    return sum_of_squares"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/159", "completion": "    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimals = number - integer_part\n    return decimals"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    abs_deviations = [abs(num - mean) for num in numbers]\n    mad = sum(abs_deviations) / len(abs_deviations)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = None\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    i = 2\n    while i * i <= n:\n        count = 0\n        while n % i == 0:\n            count += 1\n            n //= i\n        if count > 0:\n            factors.extend([i] * count)\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds x such that poly(x) = 0 for given list of coefficients xs.\n    The list must have even number of coefficients and the largest non zero coefficient\n    as it guarantees a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        return None\n    \n    # Use bisection method to find zero\n    left = -10\n    right = 10\n    while right - left > 1e-9:\n        mid = (left + right) / 2\n        if poly(xs, mid) > 0:\n            right = mid\n        else:\n            left = mid\n    return round(left, 2)"}
{"task_id": "HumanEval/33", "completion": "    result = []\n    for i in range(len(l)):\n        if (i + 1) % 3 == 0:\n            result.append(sorted(l[i]))\n        else:\n            result.append(l[i])\n    return result"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        if is_prime(b):\n            return b\n        a, b = b, a + b\n    return -1  # if nth Fibonacci number is not prime \n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/41", "completion": "    return n // 2"}
{"task_id": "HumanEval/42", "completion": "    for i in range(len(l)):\n        l[i] += 1\n    return l"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    a, b, c, d = 0, 0, 0, 1\n    for _ in range(n):\n        a, b, c, d = b, c, d, b + c + d + a\n    return d"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n        return 1\n    return pow(n, (p - 1) // 2, p)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a+b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    return list(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n\tif n <= 1:\n\t\treturn [0]\n\tdp = [0] * n\n\tdp[0] = 1\n\tfor i in range(1, n):\n\t\tdp[i] = dp[i - 1] * xs[i]\n\treturn dp"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib = [0] * (n + 1)\n        fib[1] = 1\n        for i in range(3, n + 1):\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3]\n        return fib[n]"}
{"task_id": "HumanEval/65", "completion": "    str_x = str(x)\n    if shift == 0:\n        return str_x\n    elif shift > len(str_x):\n        return str(int(str_x[::-1]))\n    else:\n        return str(int(str_x[-shift:] + str_x[:-shift]))"}
{"task_id": "HumanEval/71", "completion": "    if (a + b > c) and (a + c > b) and (b + c > a):\n\t\ts = (a + b + c) / 2\n\t\tarea = (s * (s-a) * (s-b) * (s-c)) ** 0.5\n\t\treturn round(area, 2)\n\telse:\n\t\treturn -1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a//2 + 1):\n        if a % i == 0:\n            for j in range(i+1, (a//i)//2 + 1):\n                if a % (i*j) == 0:\n                    k = a // (i*j)\n                    if k > 2 and k % i == 0 and k % j == 0:\n                        return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while (N > 0):\n        sum += N % 2\n        N = N // 2\n    return str(sum)"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort()\n    result.sort(key=lambda tup: tup[1], reverse=True)\n    return result"}
{"task_id": "HumanEval/96", "completion": "    if n < 2:\n        return []\n    primes = []\n    i = 2\n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5)"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y) if max(x, y) % 2 == 0 else -1\n    elif x % 2 == 0:\n        return max(x, y - 1)\n    else:\n        return max(x - 1, y)"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    return bin(rounded_avg)"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    def countOnes(n):\n        return bin(n).count('1')\n    \n    return sorted(arr, key=lambda x: (countOnes(x), x))"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    odd_collatz = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz.append(n)\n        n = 3 * n + 1 if n % 2 != 0 else n // 2\n    return sorted(odd_collatz)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign_product = 1\n    product = 1\n    for num in arr:\n        if num == 0:\n            return None\n        sign_product *= num\n        product *= num\n    return abs(sign_product * product)"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        a, b, c = 1, 3, 2\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n            d = a + b + c\n            res.append(d)\n            a, b, c = b, c, d\n        return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product > 0 else 0"}
{"task_id": "HumanEval/133", "completion": "    rounded_lst = [int(num) for num in lst]  # Round each element to the upper int(Ceiling)\n    sum_squares_result = sum([num ** 2 for num in rounded_lst])  # Calculate the sum of squared numbers\n    return sum_squares_result"}
{"task_id": "HumanEval/136", "completion": "    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    if not negatives or not positives:\n        return (None, None)\n    return (max(negatives), min(positives))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        if float(a) > float(b):\n            return a\n        elif float(b) > float(a):\n            return b\n        else:\n            return None\n    else:\n        return None"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    res = 1\n    for i in range(1, n+1):\n        res *= i * special_factorial(n-i)\n    return res"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n    return total"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    orbit_range = planets[planet1_index+1:planet2_index]\n    orbit_range.sort(key=lambda x: planets.index(x))\n    return tuple(orbit_range)"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return \"Not a prime number\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num**2\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return even_count, odd_count"}
{"task_id": "HumanEval/159", "completion": "    if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i - 1] == '+':\n            result += operand[i]\n        elif operator[i - 1] == '-':\n            result -= operand[i]\n        elif operator[i - 1] == '*':\n            result *= operand[i]\n        elif operator[i - 1] == '/':\n            result //= operand[i]\n        elif operator[i - 1] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    while a <= b and a % 2 == 0:\n        result.append(a)\n        a += 2\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    mad = sum(deviations) / len(deviations)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    product = 1\n    for num in numbers:\n        product *= num\n    return (sum(numbers), product)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    n = len(xs)\n    if n % 2 != 0:\n        return \"Error: xs should have even number of coefficients\"\n    else:\n        coeff = max(xs)\n        if coeff == 0:\n            return \"No real zero found\"\n        else:\n            return (-xs[1] / coeff, 0)"}
{"task_id": "HumanEval/33", "completion": "    l' = [x if i % 3 != 0 else sorted(l[i:i+1])[0] for i, x in enumerate(l)]\n    return l'"}
{"task_id": "HumanEval/37", "completion": "    l_even = l[::2]\n    l_even.sort()\n    l_even_idx = 0\n    for i in range(1, len(l), 2):\n        l[i] = l_even[l_even_idx]\n        l_even_idx += 1\n    return l"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return b\n\n    count = 0\n    num = 2\n    while count < n:\n        fib = fibonacci(num)\n        if is_prime(fib):\n            count += 1\n        num += 1\n    return fib"}
{"task_id": "HumanEval/41", "completion": "    return (n + 1) // 2"}
{"task_id": "HumanEval/42", "completion": "    for i in range(len(l)):\n        l[i] += 1\n    return l"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 0, 1\n    for _ in range(n):\n        a, b, c, d = b, c, (d + a + b), (d + a + c + b)\n    return d"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    while n > 0:\n        result = (result * 2) % p\n        n = n >> 1\n    return result"}
{"task_id": "HumanEval/53", "completion": "    carry = 0\n    while x or y or carry:\n        s = carry\n        if x:\n            s += x % 10\n            x //= 10\n        if y:\n            s += y % 10\n            y //= 10\n        carry, s = divmod(s, 10)\n        yield s\n    yield carry"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return \"Incorrect input\"\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a+b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    if len(xs) == 1:\n        return [0]\n    deriv = [0] * len(xs)\n    deriv[0] = 1\n    deriv[1] = 2 * (xs[1] - xs[0] * deriv[0])\n    for i in range(2, len(xs)):\n        deriv[i] = 2 * (xs[i] - xs[i - 1] * deriv[i - 1])\n    return deriv"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift %= len(num_str)\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    primes = [2, 3]\n    for num in range(5, 100):\n        if all(num%p!=0 for p in primes):\n            primes.append(num)\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            product = primes[i]*primes[j]\n            if product == a:\n                return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    grades_table = {\n        'A+': (4.0, 'B'),\n        'A': (3.7, 'C'),\n        'A-': (3.3, 'D'),\n        'B+': (3.0, 'E'),\n        'B': (2.7, 'F'),\n        'B-': (2.3, 'F'),\n        'C+': (2.0, 'F'),\n        'C': (1.7, 'F'),\n        'C-': (1.3, 'F'),\n        'D+': (1.0, 'F'),\n        'D': (0.7, 'F'),\n        'D-': (0.0, 'F'),\n        'F': (0.0, 'F')\n    }\n    grades_list = []\n    for grade in grades:\n        for key, value in grades_table.items():\n            if grade >= value[0]:\n                grades_list.append(key)\n                break\n    return grades_list"}
{"task_id": "HumanEval/84", "completion": "    s = bin(N)[2:]\n    return s"}
{"task_id": "HumanEval/85", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    try:\n        num = float(value)\n    except ValueError:\n        return \"Invalid input. Please enter a number.\"\n    return int(num + 0.5) if abs(num - (int(num))) >= 0.5 else int(num - 0.5)"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = (n + m) / 2\n    return bin(round(average))"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i + 1) // 2)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/123", "completion": "    collatz = []\n    while n != 1:\n        collatz.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_collatz = [x for x in collatz if x % 2 != 0]\n    return sorted(odd_collatz)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num\n        sum_magnitudes += abs(num)\n    return sum_magnitudes * product"}
{"task_id": "HumanEval/130", "completion": "    a = [0] * (n + 1)\n    a[0], a[1], a[2] = 3, 2, 1\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            a[i] = a[i - 1] + a[i // 2]\n        else:\n            a[i] = a[i - 1] + a[i - 2] + a[i // 2]\n    return a"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        rounded_num = int(num)\n        result += (rounded_num ** 2)\n    return result"}
{"task_id": "HumanEval/136", "completion": "    pos = [x for x in lst if x > 0]\n    neg = [x for x in lst if x < 0]\n    \n    if not pos and not neg:\n        return (None, None)\n    elif not pos:\n        return (None, min(neg))\n    elif not neg:\n        return (max(neg), None)\n    else:\n        return (max(neg), min(pos))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return None\n    if type(a) == int:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) == float:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) == str:\n        if \".\" in a:\n            a = float(a)\n        if \".\" in b:\n            b = float(b)\n        if a > b:\n            return a\n        else:\n            return b"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i * special_factorial(i - 1)\n    return result"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i, num in enumerate(lst):\n        if (i+1) % 3 == 0:\n            total += num*num\n        elif (i+1) % 4 == 0:\n            total += num*num*num\n    return total"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    result = sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n    return result"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/150", "completion": "    if n == 2:\n        return x\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num * num\n    return 2 * total"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    abs_num = abs(num)\n    while abs_num > 0:\n        digit = abs_num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        abs_num //= 10\n    return even_count, odd_count"}
{"task_id": "HumanEval/159", "completion": "    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, remaining]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i - 1] == '+':\n            result += operand[i]\n        elif operator[i - 1] == '-':\n            result -= operand[i]\n        elif operator[i - 1] == '*':\n            result *= operand[i]\n        elif operator[i - 1] == '/':\n            result //= operand[i]\n        elif operator[i - 1] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    even_digits = [i for i in range(a, b+1) if i%2==0]\n    return sorted(even_digits)"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    abs_deviations = [abs(x - mean) for x in numbers]\n    return sum(abs_deviations) / len(abs_deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    return result[:-1]"}
{"task_id": "HumanEval/8", "completion": "    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number in numbers:\n        sum_of_numbers += number\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    integers = [x for x in values if type(x) == int]\n    return integers"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Find the zero of a polynomial with coefficients in xs.\n    Assumes the coefficients are given in increasing order of degree.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0:\n        raise ValueError(\"Coefficients list must have even number of elements\")\n    l = n // 2\n    r = n - 1\n    while l < r:\n        mid = (l + r) // 2\n        if poly(xs, mid) > 0:\n            r = mid\n        else:\n            l = mid + 1\n    return l"}
{"task_id": "HumanEval/33", "completion": "    l_third = [l[i] if i % 3 != 0 else sorted(l[i:i+1]) for i in range(len(l))]\n    return l_third"}
{"task_id": "HumanEval/37", "completion": "    even_values = sorted(l[1::2])\n    even_indices = [i for i in range(1, len(l), 2)]\n    for i in range(len(even_values)):\n        l[even_indices[i]] = even_values[i]\n    return l"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n        while b % 2 == 0:\n            b //= 2\n        while b < a:\n            b = a + b\n        if b == a + b:\n            return b"}
{"task_id": "HumanEval/41", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    \n    a = 0\n    b = 2\n    c = 1\n    d = 1\n    for i in range(3, n + 1):\n        a = b + c + d\n        b = c\n        c = d\n        d = a\n    \n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    res = pow(n, p - 2, p)\n    return res"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/58", "completion": "    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "    largest = -1\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            largest = divisor\n            n //= divisor\n        divisor += 1\n    return largest"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    deriv = [0] * n\n    deriv[0] = 1\n    for i in range(1, n):\n        deriv[i] = xs[i] * i\n    return deriv"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        fib1, fib2, fib3 = 1, 1, 0\n        for _ in range(3, n + 1):\n            fib3 = fib1 + fib2 + fib3\n            fib1, fib2 = fib2, fib1 + fib2\n        return fib3"}
{"task_id": "HumanEval/65", "completion": "    str_x = str(x)\n    shifted_str = str_x[-shift:] + str_x[:-shift]\n    if len(shifted_str) > len(str_x):\n        return shifted_str[::-1]\n    else:\n        return shifted_str"}
{"task_id": "HumanEval/71", "completion": "    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        return round(sqrt(s * (s-a) * (s-b) * (s-c)), 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            count = 0\n            while a % i == 0:\n                a = a // i\n                count += 1\n            if count > 1:\n                return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append(\"A+\")\n        elif grade >= 3.7:\n            result.append(\"A\")\n        elif grade >= 3.3:\n            result.append(\"A-\")\n        elif grade >= 3.0:\n            result.append(\"B+\")\n        elif grade >= 2.7:\n            result.append(\"B\")\n        elif grade >= 2.3:\n            result.append(\"B-\")\n        elif grade >= 2.0:\n            result.append(\"C+\")\n        elif grade >= 1.7:\n            result.append(\"C\")\n        elif grade >= 1.3:\n            result.append(\"C-\")\n        elif grade >= 1.0:\n            result.append(\"D+\")\n        elif grade >= 0.7:\n            result.append(\"D\")\n        elif grade >= 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"F\")\n    return result"}
{"task_id": "HumanEval/84", "completion": "    return bin(N).replace(\"0b\", \"\")"}
{"task_id": "HumanEval/85", "completion": "    even_sum = sum(lst[1::2])\n    return even_sum"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    count = 0\n    num = 2\n    while count < n:\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n            count += 1\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    number = float(value)\n    return int(number + 0.5) if number > 0 else int(number - 0.5)"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    else:\n        avg = sum(range(n, m+1)) / (m - n + 1)\n        rounded_avg = round(avg)\n        return bin(rounded_avg)"}
{"task_id": "HumanEval/106", "completion": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(math.factorial(i))\n        else:\n            res.append(sum(range(1, i+1)))\n    return res"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return sorted(filter(lambda x: x % 2 != 0, collatz_sequence))"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign_product = 1\n    total_sum = 0\n    for num in arr:\n        if num == 0:\n            return None\n        sign_product *= (1 if num > 0 else -1)\n        total_sum += abs(num) * sign_product\n    return total_sum"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n\t\treturn []\n\tif n == 1:\n\t\treturn [1]\n\tif n == 2:\n\t\treturn [1, 3]\n\tres = [1, 3, 2]\n\tfor i in range(3, n + 1):\n\t\tres.append(res[i - 1] + res[i - 2] + res[i - 3])\n\treturn res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    return sum([int(round(num**2)) for num in lst])"}
{"task_id": "HumanEval/136", "completion": "    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n\n    if len(neg_nums) == 0 and len(pos_nums) == 0:\n        return (None, None)\n    elif len(neg_nums) == 0:\n        return (max(pos_nums), min(pos_nums))\n    elif len(pos_nums) == 0:\n        return (max(neg_nums), min(neg_nums))\n\n    return (min(neg_nums), max(pos_nums))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) != type(b):\n        return max(a, b)\n    elif isinstance(a, (int, float)):\n        return a if a > b else b\n    else:\n        return b if b.replace(',', '.') > a.replace(',', '.') else a"}
{"task_id": "HumanEval/139", "completion": "    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact * (special_factorial(n-1))"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n    return total"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start:end+1])"}
{"task_id": "HumanEval/150", "completion": "    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num * num\n    return total * 2"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    if remaining >= need:\n        eaten = number + need\n        remaining -= need\n    else:\n        eaten = number\n        remaining = 0\n    return [eaten, remaining]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for op in operator:\n        if op in ['+', '-', '*', '/', '**']:\n            num2 = stack.pop()\n            num1 = stack.pop()\n            if op == '+':\n                stack.append(num1 + num2)\n            elif op == '-':\n                stack.append(num1 - num2)\n            elif op == '*':\n                stack.append(num1 * num2)\n            elif op == '/':\n                stack.append(num1 / num2)\n            elif op == '**':\n                stack.append(num1 ** num2)\n        else:\n            stack.append(int(op))\n    return stack.pop()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    \n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    \n    return sum_numbers, product_numbers"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    # count the number of 2s that divide n\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # check for odd factor\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # condition if n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds a zero of the polynomial with coefficients xs.\n    Returns only the zero point, even if there are many.\n    Also, only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    for i in range(1, len(xs)//2 + 1):\n        if xs[i] == 0 and xs[i-1] != 0:\n            return -xs[i] / xs[i-1]\n    return None"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l'.append(l.copy())\n    for i in range(1, n+1):\n        if i % 3 != 0:\n            l'.append(l[i])\n        else:\n            l'.append(sorted(l[i]))\n    return l'"}
{"task_id": "HumanEval/37", "completion": "    even_values = [x for i, x in enumerate(l) if i % 2 == 1]\n    even_values.sort()\n    l[1::2] = even_values\n    return l"}
{"task_id": "HumanEval/39", "completion": "    a, b = 2, 3\n    count = 0\n    while count < n:\n        c = a + b\n        if c > 4000000:\n            break\n        if c == fibonacci(c):\n            if is_prime(c):\n                count += 1\n        a, b = b, c\n    return c\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [num + 1 for num in l]"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 0, 1\n    for _ in range(n):\n        a, b, c, d = b, c, d, a+b+c+d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    if (n == 0):\n        return 1\n    result = pow(n, (p - 2) // 3, p)\n    return result"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        raise ValueError(\"Input should be a positive integer\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            c = a + b\n            a, b = b, c\n        return b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            n = n // i\n    if n > 2:\n        return n\n    return 2"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 1:\n        return [1]\n    \n    result = [0] * (n-1)\n    for i in range(1, n):\n        result[i-1] = i * xs[i]\n    \n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    fib = [0] * (n + 1)\n    fib[1] = 1\n    for i in range(2, n + 1):\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3]\n    return fib[n]"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if area.is_integer():\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            if (a / i) % i == 0 and a / i / i != i:\n                return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    grade_table = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-'\n    }\n    return [grade_table.get(g, 'F') for g in grades]"}
{"task_id": "HumanEval/84", "completion": "    total = 0\n    while N > 0:\n        total += N % 2\n        N //= 2\n    return str(total)"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort()\n    result.sort(key=lambda x: (-x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0 and y % 2 == 0:\n        if x <= y:\n            return max(x, y - 2)\n        else:\n            return max(y, x - 2)\n    else:\n        if x % 2 == 1:\n            x += 1\n        if y % 2 == 1:\n            y -= 1\n        if x <= y:\n            return max(x, y)\n        else:\n            return max(y, x)"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(round(avg))"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = n // 2 if n % 2 == 0 else 3*n + 1\n    result.append(1)\n    return result"}
{"task_id": "HumanEval/128", "completion": "    if len(arr) == 0:\n        return None\n    product = 1\n    for num in arr:\n        product *= num\n    magnitude_sum = 0\n    for num in arr:\n        magnitude_sum += abs(num)\n    return magnitude_sum * product"}
{"task_id": "HumanEval/130", "completion": "    tri_list = [3]\n    a = 1\n    b = 1\n    c = 2\n    for _ in range(n):\n        if c % 2 == 0:\n            tri_list.append(a + c // 2)\n        else:\n            tri_list.append(a + b + c // 2)\n        a, b, c = b, c, a + b + c // 2\n    return tri_list"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 0 else 0"}
{"task_id": "HumanEval/133", "completion": "    return sum([int(x)**2 for x in lst])"}
{"task_id": "HumanEval/136", "completion": "    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    if not negatives or not positives:\n        return (None, None)\n    return (max(negatives), min(positives))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and '.' in a:\n        a = float(a.replace('.', ''))\n    if isinstance(b, str) and '.' in b:\n        b = float(b.replace('.', ''))\n    \n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/139", "completion": "    result = 1\n    for i in range(1, n + 1):\n        result *= i * (i - 1) * (i - 2) * ... * (i - (n - 1)) * (i - n)\n    return result"}
{"task_id": "HumanEval/142", "completion": "    total_sum = 0\n    for i, num in enumerate(lst):\n        if (i+1) % 3 == 0 and (i+1) % 4 != 0:\n            total_sum += num**2\n        elif (i+1) % 4 == 0 and (i+1) % 3 != 0:\n            total_sum += num**3\n        else:\n            total_sum += num\n    return total_sum"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n    \n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 10 % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        start = planets.index(planet1)\n        end = planets.index(planet2)\n        return tuple(planets[start+1:end])\n    else:\n        return ()"}
{"task_id": "HumanEval/150", "completion": "    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/151", "completion": "    result = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            result += num ** 2\n    return result"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    if number + remaining >= need:\n        return [number + remaining, remaining % need]\n    else:\n        return [number + remaining, need - (number + remaining)]"}
{"task_id": "HumanEval/160", "completion": "    operands = list(map(int, operand))\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operator[i-1] == '+':\n            result += operands[i]\n        elif operator[i-1] == '-':\n            result -= operands[i]\n        elif operator[i-1] == '*':\n            result *= operands[i]\n        elif operator[i-1] == '/':\n            result //= operands[i]\n        elif operator[i-1] == '**':\n            result **= operands[i]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    even_digits = [int(digit) for digit in range(a, b+1) if int(digit) % 2 == 0]\n    even_digits.sort()\n    return even_digits"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for num in numbers:\n        result.append(num)\n        if num != numbers[-1]:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/8", "completion": "    sum_result = 0\n    product_result = 1\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    return (sum_result, product_result)"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"task_id": "HumanEval/22", "completion": "    return [val for val in values if isinstance(val, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds root of polynomial with coefficients xs.\n    Assumes xs has even number of coefficients and largest non zero coefficient\n    as it guarantees a solution.\n    \"\"\"\n    # Find largest non zero coefficient and its index\n    largest_coeff = max(xs[1::2])\n    largest_coeff_index = xs.index(largest_coeff)\n\n    # Use synthetic division to find the root\n    x = -xs[largest_coeff_index] / (2 * largest_coeff)\n    if poly(xs, x) == 0:\n        return x\n    else:\n        return \"No real root found\""}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    for i in range(n):\n        if i % 3 == 2:\n            l[i] = sorted(l[i])\n    return l"}
{"task_id": "HumanEval/37", "completion": "    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    l' = [None] * len(l)\n    for i in range(0, len(l), 2):\n        l'[i] = even_indices.pop(0)\n    return l'"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    a, b = 2, 3\n    while n > 0:\n        if is_prime(b):\n            n -= 1\n            if n == 0:\n                return b\n        a, b = b, a + b\n    return -1"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = 0\n    dp[2] = 2\n    dp[3] = 0\n    for i in range(4, n+1):\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n    return dp[n]"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2])/2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, (p-1)//2, p)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a = 1\n        b = 1\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}
{"task_id": "HumanEval/58", "completion": "    l1_set = set(l1)\n    l2_set = set(l2)\n    return sorted(list(l1_set.intersection(l2_set)))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    result = [0] * (len(xs) - 1)\n    for i in range(1, len(xs)):\n        result[i - 1] = i * xs[i]\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n < 3:\n        return 0 if n == 1 else 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n+1):\n        a, b, c = b, a+b+c, c\n    return c"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    if len(shifted_str) < len(x_str):\n        return shifted_str[::-1]\n    else:\n        return shifted_str"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(s * (s-a) * (s-b) * (s-c), 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            for j in range(i, int((a / i) ** 0.5) + 1):\n                if a % (i * j) == 0:\n                    k = int((a / (i * j)))\n                    if k > 1 and k % i == 0 and k % j == 0:\n                        return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    grade_scale = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-'\n    }\n    return [grade_scale[grade] for grade in grades]"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N //= 2\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/87", "completion": "    res = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            j = lst[i].index(x)\n            res.append((i, j))\n    res.sort()\n    res.sort(key=lambda tup: (-tup[1], tup[0]))\n    return res"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n\tis_prime = [True] * n\n\tis_prime[0] = False\n\tis_prime[1] = False\n\tfor i in range(2, n):\n\t\tif is_prime[i]:\n\t\t\tprimes.append(i)\n\t\t\tfor j in range(i * i, n, i):\n\t\t\t\tis_prime[j] = False\n\treturn primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    n = int(value)\n    if n % 1 == 0.5:\n        return int(value) + 1\n    return int(value)"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y)\n    elif x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = (n + m) / 2\n    rounded_avg = round(average)\n    binary_avg = bin(rounded_avg)\n    return binary_avg"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    odd_sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            odd_sum += lst[i]\n    return odd_sum"}
{"task_id": "HumanEval/123", "completion": "    sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    sequence.append(1)\n    return sorted(sequence)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign_product = 1\n    product_sum = 0\n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        sign_product *= sign\n        product_sum += sign * abs(num)\n    return sign_product * product_sum"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2]\n    else:\n        a, b, c = 1, 3, 2\n        result = [1, 3, 2]\n        for _ in range(4, n + 1):\n            d = a + b + c\n            result.append(d)\n            c, b, a = b, c, d\n        return result"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    rounded_list = [int(num) for num in lst]\n    squared_list = [num**2 for num in rounded_list]\n    return sum(squared_list)"}
{"task_id": "HumanEval/136", "completion": "    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n\n    if not negatives or not positives:\n        return (None, None)\n    else:\n        return (max(negatives), min(positives))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if isinstance(a, int):\n        if isinstance(b, int):\n            return a if a > b else b\n        else:\n            return b\n    elif isinstance(a, float):\n        if isinstance(b, int):\n            return a if a > b else b\n        else:\n            return b\n    else:\n        return a if a > b else b"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n            for j in range(i - 1, 0, -1):\n                result *= j\n        return result"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if (i+1) % 3 == 0 and (i+1) % 4 != 0:\n            total += lst[i] ** 2\n        elif (i+1) % 4 == 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and len(str(num)) > 1 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = planets[planet1]\n    end = planets[planet2]\n    \n    planets_in_range = [planet for planet, orbit in planets.items() if start < orbit < end]\n    return tuple(sorted(planets_in_range))"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return \"Invalid input for n\"\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return even, odd"}
{"task_id": "HumanEval/159", "completion": "    eaten = number\n    left = remaining - need\n    return [eaten, left]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    even_digits = [num for num in range(a, b+1) if num % 2 == 0]\n    even_digits.sort()\n    return even_digits"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(deviations)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "    return [num for pair in zip(numbers, [delimeter] * (len(numbers) + 1)) for num in pair]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    else:\n        sum_val = 0\n        product_val = 1\n        for num in numbers:\n            sum_val += num\n            product_val *= num\n        return (sum_val, product_val)"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = None\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds a zero of the polynomial with given coefficients.\n    \"\"\"\n    largest_coeff = max(xs)\n    # Check if the largest coefficient is non-zero\n    if largest_coeff != 0:\n        raise ValueError(\"Largest coefficient must be non-zero for a zero to be found\")\n\n    for x in range(-100, 101):\n        if poly(xs, x) == 0:\n            return x\n    raise ValueError(\"No zero found for given coefficients\")"}
{"task_id": "HumanEval/33", "completion": "    l_ = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 2:\n            l_[i] = sorted(l_[i])\n    return l_"}
{"task_id": "HumanEval/37", "completion": "    return [l[i] if i%2!=0 else sorted(l[i:i+2])[1] for i in range(len(l))]"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n\tfor _ in range(n):\n\t\tif is_prime(b):\n\t\t\ta, b = b, a + b\n\t\telse:\n\t\t\ta, b = b, a\n\treturn b"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 0, 1\n    for _ in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    while n:\n        if n % 2:\n            result = (result * (p - 1)) % p\n        n = n >> 1\n    return result"}
{"task_id": "HumanEval/53", "completion": "    while y != 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    if len(xs) < 2:\n        return []\n    \n    result = [0] * len(xs)\n    result[0] = 1\n    for i in range(1, len(xs)):\n        result[i] = i * xs[i]\n    \n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n < 0:\n        return \"Invalid input\"\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = 0, 1, 1\n    for _ in range(3, n+1):\n        c = a + b + c\n        a, b = b, c\n    return c"}
{"task_id": "HumanEval/65", "completion": "    str_x = str(x)\n    shift = shift % len(str_x)\n    return str_x[-shift:] + str_x[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(i + 1, a // i + 1):\n                if a % (i * j) == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('F')\n    return letter_grades"}
{"task_id": "HumanEval/84", "completion": "    total_sum = 0\n    while N > 0:\n        total_sum += N % 2\n        N //= 2\n    return bin(total_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort()\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    is_prime = [True] * (n+1)\n    \n    for num in range(2, n+1):\n        if is_prime[num]:\n            primes.append(num)\n            for i in range(num*num, n+1, num):\n                is_prime[i] = False\n    \n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)"}
{"task_id": "HumanEval/102", "completion": "    if (x % 2 == 0) and (y % 2 == 0):\n        return max(x, y)\n    elif (x % 2 == 1) and (y % 2 == 1):\n        return -1\n    elif (x % 2 == 0) and (y % 2 == 1):\n        return max(x, y)\n    else:\n        return min(x, y)"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    return bin(rounded_avg)"}
{"task_id": "HumanEval/106", "completion": "    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num-1)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 != 0:\n            result.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    return sorted(result)"}
{"task_id": "HumanEval/128", "completion": "    if len(arr) == 0:\n        return None\n    product = 1\n    sign_product = 1\n    for num in arr:\n        product *= num\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n    return abs(product * sign_product)"}
{"task_id": "HumanEval/130", "completion": "    if (n == 0):\n        return []\n    elif (n == 1):\n        return [1]\n    elif (n == 2):\n        return [1, 3]\n    else:\n        a, b, c = 1, 3, 2\n        tri_series = [1, 3]\n        for i in range(3, n + 1):\n            d = a + b + c\n            tri_series.append(d)\n            c, a, b = b, c, d\n        return tri_series"}
{"task_id": "HumanEval/131", "completion": "    prod = 1\n\tflag = False\n\twhile n:\n\t\tr = n % 10\n\t\tif r % 2 != 0:\n\t\t\tprod *= r\n\t\t\tflag = True\n\t\tn = n // 10\n\treturn prod if flag else 0"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num)**2\n    return result"}
{"task_id": "HumanEval/136", "completion": "    neg_ints = [x for x in lst if x < 0]\n    pos_ints = [x for x in lst if x > 0]\n    if not neg_ints or not pos_ints:\n        return (None, None)\n    return (max(neg_ints), min(pos_ints))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and '.' in a:\n        a = float(a)\n    if isinstance(b, str) and '.' in b:\n        b = float(b)\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        if len(a) > len(b):\n            return a\n        elif len(b) > len(a):\n            return b\n        else:\n            return None\n    else:\n        return None"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i * special_factorial(n - i)\n        return result"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i, num in enumerate(lst):\n        if (i+1) % 3 == 0:\n            total += num * num\n        elif (i+1) % 4 == 0:\n            total += num * num * num\n    return total"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (int(str(num)[0])%2 != 0 and int(str(num)[-1])%2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    \n    result = planets[start + 1:end]\n    result.sort(key=lambda x: planets.index(x))\n    \n    return tuple(result)"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, int(n**0.5) + 1):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    total_sum = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total_sum += num ** 2\n    return total_sum"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    num_str = str(num)\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    left = remaining - eaten\n    return [eaten, left]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '/':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    \n    sum_val = sum(numbers)\n    product_val = 1\n    for num in numbers:\n        product_val *= num\n    \n    return sum_val, product_val"}
{"task_id": "HumanEval/13", "completion": "    while b:\n\t\ta, b = b, a % b\n\treturn a"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = None\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [i for i in l if i > 0]"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2 != 0 or max(xs) != 0:\n        raise ValueError(\"Input list should have even number of coefficients and largest coefficient should be non zero.\")\n    root = -xs[0] / (2 * xs[1])\n    return root"}
{"task_id": "HumanEval/33", "completion": "    l' = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 2:\n            l'[i] = l[i]\n    l'.sort()\n    return l'"}
{"task_id": "HumanEval/37", "completion": "    l[::2] = sorted(l[::2])\n    return l"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    for _ in range(n):\n        if is_prime(b):\n            return b\n        a, b = b, a + b\n    return -1"}
{"task_id": "HumanEval/41", "completion": "    return n // 2"}
{"task_id": "HumanEval/42", "completion": "    return [i+1 for i in l]"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    a, b, c, d = 0, 0, 1, 1\n    for _ in range(4):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, p-2, p)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    derivatives = []\n    for i in range(1, len(xs)):\n        derivatives.append(i * xs[i - 1])\n    return derivatives"}
{"task_id": "HumanEval/63", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b + b\n    return b"}
{"task_id": "HumanEval/65", "completion": "    str_x = str(x)\n    shift = shift % len(str_x)\n    return str_x[-shift:] + str_x[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if a+b>c and a+c>b and b+c>a:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            for j in range(i + 1, int(a / i) + 1):\n                if a % (i * j) == 0:\n                    for k in range(j + 1, int(a / (i * j)) + 1):\n                        if a % (i * j * k) == 0:\n                            return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('F')\n    return letter_grades"}
{"task_id": "HumanEval/84", "completion": "    if (N == 0):\n        return \"0\"\n    sum = 0\n    while (N > 0):\n        sum += N % 2\n        N = N // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        if isPrime(num):\n            primes.append(num)\n        num += 1\n    return primes\n\ndef isPrime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/102", "completion": "    while x <= y:\n        if x % 2 == 0:\n            return x\n        x += 1\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = (m - n + 1) // 2\n    average = total // (m - n + 1)\n    rounded_avg = round(average)\n    return bin(rounded_avg)"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            sum = 0\n            for j in range(1, i + 1):\n                sum += j\n            result.append(sum)\n    return result"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/121", "completion": "    odd_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 != 0:\n            odd_sum += lst[i]\n    return odd_sum"}
{"task_id": "HumanEval/123", "completion": "    def collatz(num):\n        seq = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num //= 2\n            else:\n                num = num * 3 + 1\n            seq.append(num)\n        return seq\n    \n    odd_nums = []\n    for i in range(1, n+1):\n        seq = collatz(i)\n        for j in seq:\n            if j % 2 != 0:\n                odd_nums.append(j)\n    return sorted(odd_nums)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= 1 if num > 0 else -1 if num < 0 else 0\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [1, 3]\n    \n    result = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            next_num = 1 + i // 2\n        else:\n            next_num = result[i - 1] + result[i - 2] + result[i - 3]\n        result.append(next_num)\n    return result"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += (int(num) ** 2)\n    return result"}
{"task_id": "HumanEval/136", "completion": "    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n\n    if not neg_nums or not pos_nums:\n        return (None, None)\n\n    return (max(neg_nums), min(pos_nums))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(',', '').replace('.', ''))\n    if isinstance(b, str):\n        b = float(b.replace(',', '').replace('.', ''))\n\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        result *= i * special_factorial(n-i)\n    return result"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if (i+1) % 3 == 0:\n            result += lst[i] ** 2\n        elif (i+1) % 4 == 0 and (i+1) % 3 != 0:\n            result += lst[i] ** 3\n    return result"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    orbit_range = set(range(planets[planet1], planets[planet2] + 1))\n    \n    orbit_planets = [planet for planet, orbit in planets.items() if orbit in orbit_range]\n    \n    return tuple(sorted(orbit_planets))"}
{"task_id": "HumanEval/150", "completion": "    if n == 2:\n\t\treturn x\n\tif n % 2 == 0:\n\t\treturn y\n\tfor i in range(3, int(n ** 0.5) + 1, 2):\n\t\tif n % i == 0:\n\t\t\treturn y\n\treturn x"}
{"task_id": "HumanEval/151", "completion": "    total_sum = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total_sum += num**2\n    return total_sum"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    num_str = str(abs(num))\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + min(need, remaining)\n    left = max(0, remaining - need)\n    return [eaten, left]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for i in range(a, b+1):\n        for digit in str(i):\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n    even_digits.sort()\n    return even_digits"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(deviations)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/8", "completion": "    product = 1\n    for num in numbers:\n        product *= num\n    return (sum(numbers), product)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i - 1], numbers[i])\n    return closest_pair"}
{"task_id": "HumanEval/22", "completion": "    return [val for val in values if isinstance(val, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds a zero of the polynomial with given coefficients xs.\n    Returns a zero only if the polynomial has an even degree and the largest\n    non zero coefficient is even, in which case it guarantees a solution.\n    If there is no such zero, returns None.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) % 2 != 0:\n        return None\n    x0 = (-xs[1] + math.sqrt(xs[1]**2 - 4 * xs[0] * xs[2])) / (2 * xs[0])\n    return x0"}
{"task_id": "HumanEval/33", "completion": "    l' = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l' += [l[i]]\n        else:\n            l' += [sorted([l[i], l[i+1]])[0]]\n    return l'"}
{"task_id": "HumanEval/37", "completion": "    even_indices = [l[i] for i in range(1, len(l), 2)]\n    even_indices.sort()\n    l[1::2] = even_indices\n    return l"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    while len(fib) < n:\n        fib.append(fib[-1] + fib[-2])\n    for num in fib:\n        if num < 2:\n            continue\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                break\n        else:\n            return num"}
{"task_id": "HumanEval/41", "completion": "    return n // 2"}
{"task_id": "HumanEval/42", "completion": "    return [i + 1 for i in l]"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    \n    a = 0\n    b = 2\n    c = 0\n    d = 2\n    e = 0\n    f = 2\n    g = 0\n    h = 2\n    \n    for i in range(4, n+1):\n        c = a + b + c + d\n        a = b + c\n        b = d + e + f + g\n        c = e + f\n        d = f + g\n        e = g\n        f = h\n        g = h + c\n        \n    return c"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    sorted_l = sorted(l)\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n    else:\n        return sorted_l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, pow(p-2, (p-2)//2, p), p)"}
{"task_id": "HumanEval/53", "completion": "    res = x + y\n    return res"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a+b\n    return b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    largest_factor = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            largest_factor = i\n    return largest_factor"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n <= 1:\n        return []\n    res = [0] * n\n    for i in range(1, n):\n        res[i-1] = i * xs[i]\n    return res"}
{"task_id": "HumanEval/63", "completion": "    def fib(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n)"}
{"task_id": "HumanEval/65", "completion": "    n = len(str(x))\n    shifted_digits = (x // 10**(n-shift)) * 10**(n-shift)\n    return str(shifted_digits)"}
{"task_id": "HumanEval/71", "completion": "    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            for j in range(i+1, int(a**0.5) + 1):\n                if a % (i*j) == 0:\n                    k = a // (i*j)\n                    if k > 1 and k % i == 0 and k % j == 0:\n                        return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    grades = sorted(grades, reverse=True)\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('B+')\n        elif grade >= 3.0:\n            letter_grades.append('B')\n        elif grade >= 2.7:\n            letter_grades.append('C+')\n        elif grade >= 2.3:\n            letter_grades.append('C')\n        elif grade >= 2.0:\n            letter_grades.append('D+')\n        elif grade >= 1.7:\n            letter_grades.append('D')\n        elif grade >= 1.3:\n            letter_grades.append('E+')\n        elif grade >= 1.0:\n            letter_grades.append('E')\n        else:\n            letter_grades.append('F')\n    return letter_grades"}
{"task_id": "HumanEval/84", "completion": "    return bin(N).replace(\"0b\", \"\")"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort()\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num % 1 == 0:\n        return int(num)\n    else:\n        if num > 0:\n            return int(num + 0.5)\n        else:\n            return int(num - 0.5)"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = (n + m) / 2\n    rounded_avg = round(average)\n    return bin(rounded_avg)"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            sum_nums = 0\n            for j in range(1, i + 1):\n                sum_nums += j\n            result.append(sum_nums)\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/123", "completion": "    collatz_seq = []\n    while n != 1:\n        collatz_seq.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return [x for x in collatz_seq if x % 2 != 0]"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= 1 if num > 0 else -1 if num < 0 else 0\n        magnitude_sum += abs(num) * sign_product\n    return magnitude_sum"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return []\n    if n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 1]\n    else:\n        sequence = [3, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(sequence[i // 2 - 1] + sequence[i // 2])\n            else:\n                sequence.append(sequence[i // 3 - 1] + sequence[i // 3 - 2] + sequence[i // 3])\n        return sequence"}
{"task_id": "HumanEval/131", "completion": "    if n == 0:\n\t\treturn 0\n\tif n % 2 == 0:\n\t\treturn 0\n\tproduct = 1\n\twhile n > 0:\n\t\tdigit = n % 10\n\t\tproduct *= digit\n\t\tn //= 10\n\treturn product"}
{"task_id": "HumanEval/133", "completion": "    rounded_list = [int(num) for num in lst]\n    squared_sum = sum([num**2 for num in rounded_list])\n    return squared_sum"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n    \n    if not neg_integers:\n        return (None, min(pos_integers))\n    elif not pos_integers:\n        return (max(neg_integers), None)\n    else:\n        return (max(neg_integers), min(pos_integers))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and '.' in a:\n        a = float(a)\n    if isinstance(b, str) and '.' in b:\n        b = float(b)\n    \n    if type(a) == type(b):\n        return None\n    elif type(a) == int:\n        return max(a, b)\n    elif type(a) == float:\n        return max(a, b)\n    elif type(a) == str:\n        return max(a, b)"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    res = 1\n    for i in range(1, n+1):\n        res *= i * special_factorial(n-i)\n    return res"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i]**3\n    return result"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(num):\n        return sum(int(d) for d in str(num))\n    \n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 % 2 != 0) and (num // 10 % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \n        \"Uranus\", \"Neptune\"\n    ]\n    start_index1 = planets.index(planet1)\n    end_index2 = planets.index(planet2)\n    if start_index1 < end_index2:\n        return tuple(planets[start_index1:end_index2+1])\n    else:\n        return tuple(planets[end_index2:start_index1+1])"}
{"task_id": "HumanEval/150", "completion": "    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    temp = abs(num)\n    while temp > 0:\n        digit = temp % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        temp //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    eaten = number\n    left = remaining - need\n    return [eaten, left]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for num in range(a, b+1):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n    even_digits.sort()\n    return even_digits"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimals = number - integer_part\n    return decimals"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    return [num for pair in zip(numbers, [delimeter] * (len(numbers) + 1)) for num in pair]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    return (sum_numbers, product_numbers)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    closest = min(numbers[i] + numbers[i + 1] for i in range(len(numbers) - 1))\n    return (min(numbers[i] for i in range(len(numbers)) if numbers[i] + numbers[i + 1] == closest),\n            max(numbers[i] for i in range(len(numbers)) if numbers[i] + numbers[i + 1] == closest))"}
{"task_id": "HumanEval/22", "completion": "    return [val for val in values if isinstance(val, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    #Check for 2\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    \n    #Check for odd factor\n    for i in range(3,int(n**0.5)+1,2):\n        while n % i== 0:\n            factors.append(i)\n            n = n / i\n    if n > 2:\n        factors.append(int(n))\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Returns a zero of the polynomial with coefficients xs.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) < 0:\n        raise ValueError(\"Input list should have even number of coefficients and largest coefficient should be non-zero\")\n    # Find the zero using the bisection method\n    low, high = 0, max(xs)\n    while high - low > 1e-9:\n        mid = (low + high) / 2\n        if poly(xs, mid) > 0:\n            high = mid\n        else:\n            low = mid\n    return low"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    for i in range(n):\n        if i % 3 == 0:\n            l[i] = sorted(l[i])\n    return l"}
{"task_id": "HumanEval/37", "completion": "    for i in range(0, len(l), 2):\n        if i+1 < len(l):\n            l[i], l[i+1] = l[i+1], l[i]\n    l[::2] = sorted(l[::2])\n    return l"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    count = 0\n    while True:\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b\n        a, b = b, a + b"}
{"task_id": "HumanEval/41", "completion": "    return n // 2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 0, 1\n\tfor _ in range(n):\n\t\ta, b, c, d = b, c, d, a+c+d+b\n\treturn d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, p-2, p)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    return list(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            while n % i == 0:\n                n //= i\n            if i > 2:\n                return i\n    if n > 1:\n        return n"}
{"task_id": "HumanEval/60", "completion": "    if n <= 0:\n        return 0\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    derivative_xs = [0]*n\n    if n == 1:\n        return [xs[0]]\n    derivative_xs[0] = 1\n    for i in range(1, n):\n        derivative_xs[i] = i * xs[i]\n    return derivative_xs"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    a, b, c = 0, 1, 0\n    for _ in range(n-2):\n        c = a + b + c\n        a, b = b, c\n    return c"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift %= len(num_str)\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(i, a):\n                if a % j == 0 and j % i == 0:\n                    for k in range(j, a):\n                        if a % k == 0 and k % j == 0 and k % i == 0:\n                            return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    grade_range = [\n        (4.0, \"A+\"),\n        (3.7, \"A\"),\n        (3.3, \"A-\"),\n        (3.0, \"B+\"),\n        (2.7, \"B\"),\n        (2.3, \"B-\"),\n        (2.0, \"C+\"),\n        (1.7, \"C\"),\n        (1.3, \"C-\"),\n        (1.0, \"D+\"),\n        (0.7, \"D\"),\n        (0.0, \"D-\"),\n        (0.0, \"E\")\n    ]\n    return [grade_range[i][1] for i in range(len(grades)) if grades[i] >= grade_range[i][0]]"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = sum(int(digit) for digit in bin(N)[2:])\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort()\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    prime_nums = []\n    num = 2\n    while len(prime_nums) < n:\n        is_prime = True\n        for prime in prime_nums:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_nums.append(num)\n        num += 1\n    return prime_nums"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5)"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = (n + m) / 2\n    rounded_average = round(average)\n    return bin(rounded_average)"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    odd_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 != 0:\n            odd_sum += lst[i]\n    return odd_sum"}
{"task_id": "HumanEval/123", "completion": "    seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        seq.append(n)\n    return sorted(filter(lambda x: x % 2 != 0, seq))"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign_product = 1\n    magnitude_product = 1\n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        sign_product *= sign\n        magnitude_product *= abs(num)\n    return sign_product * magnitude_product"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n    if n == 3:\n        return [1, 3, 2]\n    \n    first = [1, 3, 2]\n    second = [1, 5, 8]\n    \n    for i in range(4, n + 1):\n        third = [x + y for x, y in zip(first[1:], second[1:])]\n        third.append(first[-1] + second[-1] + third[-1])\n        first = second\n        second = third\n        \n    return first"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    has_odd_digit = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd_digit = True\n        n //= 10\n    return product if has_odd_digit else 0"}
{"task_id": "HumanEval/133", "completion": "    return sum([round(num)**2 for num in lst])"}
{"task_id": "HumanEval/136", "completion": "    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    if len(negatives) == 0 and len(positives) == 0:\n        return (None, None)\n    elif len(negatives) == 0:\n        return (None, min(positives))\n    elif len(positives) == 0:\n        return (max(negatives), None)\n    else:\n        return (max(negatives), min(positives))"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and \".\" in a:\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str) and \".\" in b:\n        b = float(b.replace(',', '.'))\n\n    if isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        return b if len(b) > len(a) else a\n    else:\n        return None"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i * special_factorial(n - i)\n    return result"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if (i+1) % 3 == 0:\n            total += lst[i] ** 2\n        elif (i+1) % 4 == 0 and (i+1) % 3 != 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return tuple(sorted(planets[planet1_index+1:planet2_index]))"}
{"task_id": "HumanEval/150", "completion": "    if is_prime(n):\n\t\treturn x\n\telse:\n\t\treturn y\n\ndef is_prime(n: int) -> bool:\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if num >= 0 and isinstance(num, int):\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    if number + remaining >= need:\n        return [number + remaining, remaining - need]\n    else:\n        return [number + remaining, remaining]"}
{"task_id": "HumanEval/160", "completion": "    operand = list(map(int, operand))\n    result = operand[0]\n    for i in range(1, len(operand), 2):\n        if operator[i - 1] == '+':\n            result += operand[i]\n        elif operator[i - 1] == '-':\n            result -= operand[i]\n        elif operator[i - 1] == '*':\n            result *= operand[i]\n        elif operator[i - 1] == '/':\n            result //= operand[i]\n        elif operator[i - 1] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for num in range(a, b+1):\n        digits = [int(d) for d in str(num) if int(d) % 2 == 0]\n        even_digits.extend(digits)\n    even_digits.sort()\n    return even_digits"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(delimeter)\n        result.append(num)\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    else:\n        product = 1\n        sum_ = 0\n        for num in numbers:\n            product *= num\n            sum_ += num\n        return (sum_, product)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_nums = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_nums = (numbers[i], numbers[i + 1])\n    return closest_nums"}
{"task_id": "HumanEval/22", "completion": "    return [val for val in values if isinstance(val, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n / divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Find x such that poly(x) = 0 for the given coefficients xs\n    \"\"\"\n    coeff = max(xs)\n    n = len(xs)\n    if n % 2 != 0 or coeff == 0:\n        return None\n    root = -coeff / (2 * xs[1])\n    return root"}
{"task_id": "HumanEval/33", "completion": "    l' = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l' .append(l[i])\n        else:\n            l' .append(sorted(l[i]))\n    return l'"}
{"task_id": "HumanEval/37", "completion": "    l_even = [i for i in l if i%2 == 0]\n    l_even.sort()\n    l_odd = [i for i in l if i%2 != 0]\n    return [l_even[i//2] if i%2==0 else l_odd[i//2] for i in range(len(l))]"}
{"task_id": "HumanEval/39", "completion": "    a, b, c = 1, 1, 2\n    while True:\n        if c == n:\n            return c\n        c = a + b\n        a, b = b, c\n        while b % 2 == 0:\n            b //= 2\n        for i in range(3, int(b**0.5) + 1, 2):\n            while b % i == 0:\n                b //= i\n                if b == 1:\n                    return c"}
{"task_id": "HumanEval/41", "completion": "    if n % 2 == 0:\n        return (n // 2) * (n // 2 - 1) // 2\n    else:\n        return (n // 2) * (n // 2 + 1) // 2"}
{"task_id": "HumanEval/42", "completion": "    return [num + 1 for num in l]"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer\")\n    a, b, c, d = 0, 0, 0, 1\n    for _ in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, (p - 1) // 2, p)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/58", "completion": "    res = []\n    set1 = set(l1)\n    set2 = set(l2)\n    for item in set1.intersection(set2):\n        res.append(item)\n    return res"}
{"task_id": "HumanEval/59", "completion": "    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor:\n            divisor += 1\n        else:\n            n //= divisor\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    if len(xs) <= 1:\n        return []\n    else:\n        return [xs[i+1]*i for i in range(len(xs)-1)]"}
{"task_id": "HumanEval/63", "completion": "    def fib(x, y):\n        return x + y, x\n    \n    a, b = 0, 1\n    for _ in range(n):\n        a, b = fib(a, b)\n    return a"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    if shift < 0:\n        shift = shift % len(x_str)\n        return x_str[shift:] + x_str[:shift]\n    else:\n        shift = shift % len(x_str)\n        return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    if a < 2:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    grade_map = {\n        \"A+\": (4.0, 3.7),\n        \"A\": (3.0, 3.3),\n        \"A-\": (2.7, 2.3),\n        \"B+\": (3.0, 3.3),\n        \"B\": (2.7, 2.3),\n        \"B-\": (2.3, 2.0),\n        \"C+\": (1.7, 1.3),\n        \"C\": (1.3, 1.0),\n        \"C-\": (1.0, 0.7),\n        \"D+\": (0.7, 0.3),\n        \"D\": (0.3, 0.0),\n        \"D-\": (0.0, 0.3),\n        \"F\": (0.0, 0.0)\n    }\n    \n    result = []\n    for grade in grades:\n        for letter, (min_gpa, cutoff_gpa) in grade_map.items():\n            if grade >= cutoff_gpa:\n                result.append(letter)\n                break\n    return result"}
{"task_id": "HumanEval/84", "completion": "    total = 0\n\twhile N > 0:\n\t\ttotal += N % 2\n\t\tN //= 2\n\treturn bin(total)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort()\n    result.sort(key=lambda x: (-x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    return int(value) if abs(float(value) - int(value)) <= 0.5 else int(value) + 1"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0:\n        if y % 2 == 0:\n            return max(x, y)\n        else:\n            return max(x, y-1)\n    else:\n        return max(x-1, y)"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_avg = round(average)\n    \n    return bin(rounded_avg)"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 != 0:\n            result.append(n)\n        n = 3 * n + 1\n    return sorted(result)"}
{"task_id": "HumanEval/128", "completion": "    if len(arr) == 0:\n        return None\n    \n    sign_product = 1\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1)\n    \n    magnitude_sum = 0\n    for num in arr:\n        magnitude_sum += abs(num) * sign_product\n    \n    return magnitude_sum"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        t = [0] * (n + 1)\n        t[1], t[2] = 1, 3\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                t[i] = t[i - 1] + (t[i - 2] / 2)\n            else:\n                t[i] = t[i - 1] + t[i - 2] + t[i - 3]\n        return t"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0"}
{"task_id": "HumanEval/133", "completion": "    return sum([int(x)**2 for x in lst])"}
{"task_id": "HumanEval/136", "completion": "    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n\n    if not negatives or not positives:\n        return (None, None)\n    else:\n        return (max(negatives), min(positives))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return None\n    if type(a) == int:\n        return b if b > a else a\n    elif type(a) == float:\n        return b if b >= float(a) else a\n    else:\n        return b if b.isdigit() and float(b) >= float(a) else a"}
{"task_id": "HumanEval/139", "completion": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/142", "completion": "    total_sum = 0\n    for i in range(len(lst)):\n        if (i+1) % 3 == 0:\n            total_sum += lst[i]**2\n        elif (i+1) % 4 == 0 and (i+1) % 3 != 0:\n            total_sum += lst[i]**3\n    return total_sum"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    ]\n    \n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    \n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    \n    return tuple(planets[planet1_index + 1:planet2_index])"}
{"task_id": "HumanEval/150", "completion": "    if is_prime(n):\n        return x\n    else:\n        return y\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/151", "completion": "    total_sum = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total_sum += num ** 2\n    return total_sum * 2"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    num_str = str(abs(num))\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + need\n    left = remaining - total_eaten\n    return [total_eaten, left]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '/':\n            result /= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return sorted(result)"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(num - mean) for num in numbers]\n    return sum(absolute_differences) / len(absolute_differences)"}
{"task_id": "HumanEval/5", "completion": "    return [num for pair in zip(numbers, [delimeter]*len(numbers)) for num in pair]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds x such that poly(x) = 0 using Newton-Raphson method.\n    Returns only the zero point, even if there are many.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        return \"Invalid input: list xs must have even number of coefficients.\"\n    \n    # Newton-Raphson method\n    for i in range(100):  # max iterations\n        f_x = poly(xs, i)\n        if f_x == 0:\n            return i  # return the zero point\n        df_dx = poly([1] + [-coeff for coeff in xs[:-1]], i)\n        if df_dx == 0:\n            return \"Error: derivative of polynomial is zero at this point.\"\n        x = x - (f_x / df_dx)\n    \n    return \"No zero found within 100 iterations.\""}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    i = 0\n    while (i < n):\n        if (i % 3 != 0):\n            l[i] = l[i]\n        else:\n            l[i] = min(l[i], l[(i // 3) * 3])\n            l[i] = max(l[i], l[(i // 3) * 3])\n            l[i] = l[i]\n        i += 1\n    return l"}
{"task_id": "HumanEval/37", "completion": "    even_indices = [l[i] for i in range(1, len(l), 2)]\n    even_indices.sort()\n    l' = [l[i] if i % 2 != 0 else even_indices.pop(0) for i in range(len(l))]\n    return l'"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    \n    a, b = 0, 1\n    for _ in range(n):\n        if is_prime(b):\n            return b\n        a, b = b, a + b"}
{"task_id": "HumanEval/41", "completion": "    if (n % 2) == 0:\n\t\treturn n // 2\n\telse:\n\t\treturn (n + 1) // 2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    memo = [0] * (n + 1)\n    memo[0] = 0\n    memo[1] = 0\n    memo[2] = 2\n    memo[3] = 0\n    for i in range(4, n + 1):\n        memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3] + memo[i - 4]\n    return memo[n]"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        median = (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        median = l[n//2]\n    return median"}
{"task_id": "HumanEval/49", "completion": "    MOD = p\n    n = n % MOD\n    res = 1\n    res = (res * n) % MOD\n    return res"}
{"task_id": "HumanEval/53", "completion": "    while y != 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/58", "completion": "    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n if n > 1 else i"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    if len(xs) < 2:\n        return []\n    return [1] + [xs[i] * i for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n\t\treturn 0\n\telif n == 1 or n == 2:\n\t\treturn 1\n\telse:\n\t\ta = 0\n\t\tb = 1\n\t\tc = 0\n\t\tfor i in range(3, n+1):\n\t\t\tc = a + b + c\n\t\t\ta = b\n\t\t\tb = c\n\t\treturn c"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    num_str = num_str[-shift:] + num_str[:-shift]\n    if shift > len(num_str):\n        num_str = num_str[::-1]\n    return num_str"}
{"task_id": "HumanEval/71", "completion": "    if (a + b > c) and (a + c > b) and (b + c > a):\n\t\ts = (a + b + c) / 2\n\t\tarea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\t\treturn round(area, 2)\n\telse:\n\t\treturn -1"}
{"task_id": "HumanEval/75", "completion": "    primes = [2, 3]\n    for i in range(5, a + 1):\n        is_prime = True\n        for prime in primes:\n            if prime * prime > i:\n                break\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    grade_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            grade_list.append('A+')\n        elif grade >= 3.7:\n            grade_list.append('A')\n        elif grade >= 3.3:\n            grade_list.append('A-')\n        elif grade >= 3.0:\n            grade_list.append('B+')\n        elif grade >= 2.7:\n            grade_list.append('B')\n        elif grade >= 2.3:\n            grade_list.append('B-')\n        elif grade >= 2.0:\n            grade_list.append('C+')\n        elif grade >= 1.7:\n            grade_list.append('C')\n        elif grade >= 1.3:\n            grade_list.append('C-')\n        elif grade >= 1.0:\n            grade_list.append('D+')\n        elif grade >= 0.7:\n            grade_list.append('D')\n        elif grade >= 0.0:\n            grade_list.append('D-')\n        else:\n            grade_list.append('F')\n    return grade_list"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N //= 2\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    if \".\" in value:\n        parts = value.split(\".\")\n        whole = int(parts[0])\n        decimal = int(parts[1])\n        if decimal == 0:\n            return whole\n        elif decimal > 0:\n            return whole + (1 if whole % 10 >= decimal else 0)\n        else:\n            return whole - (1 if whole % 10 <= decimal else 0)\n    else:\n        return int(value)"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0 and y % 2 == 0:\n        return max(x, y)\n    elif x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)\n    return binary_avg"}
{"task_id": "HumanEval/106", "completion": "    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/123", "completion": "    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return [x for x in collatz if x % 2 != 0]"}
{"task_id": "HumanEval/128", "completion": "    if len(arr) == 0:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        product_of_signs *= (1 if num > 0 else -1 if num < 0 else 0)\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes * product_of_signs"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        a, b, c = 1, 3, 2\n        res = [1, 3, 2]\n        for _ in range(3, n + 1):\n            res.append(a + b + c)\n            a, b, c = b, c, res[-1]\n        return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n\twhile n > 0:\n\t\tdigit = n % 10\n\t\tif digit % 2 != 0:\n\t\t\tproduct *= digit\n\t\tn //= 10\n\treturn product"}
{"task_id": "HumanEval/133", "completion": "    rounded_lst = [int(i) for i in lst]\n    sum = 0\n    for num in rounded_lst:\n        sum += num * num\n    return sum"}
{"task_id": "HumanEval/136", "completion": "    negative_nums = [x for x in lst if x < 0]\n    positive_nums = [x for x in lst if x > 0]\n\n    if not negative_nums and not positive_nums:\n        return (None, None)\n    elif not negative_nums:\n        return (max(positive_nums), min(positive_nums))\n    elif not positive_nums:\n        return (max(negative_nums), min(negative_nums))\n    else:\n        return (max(negative_nums), min(positive_nums))"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return None\n    elif type(a) == int:\n        return max(a, b)\n    elif type(a) == float:\n        return max(a, b)\n    elif type(a) == str:\n        if '.' in a:\n            a = float(a)\n        if '.' in b:\n            b = float(b)\n        return max(a, b)"}
{"task_id": "HumanEval/139", "completion": "    if n == 1:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n + 1):\n            fact *= i\n        return fact"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            result += lst[i]**2\n        elif i % 4 == 0 and i % 3 == 0:\n            result += lst[i]**3\n        else:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num // 10) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 in planets and planet2 in planets:\n        start_index = planets.index(planet1)\n        end_index = planets.index(planet2)\n        return tuple(sorted(planets[start_index+1:end_index]))\n    else:\n        return ()"}
{"task_id": "HumanEval/150", "completion": "    if n % 2 == 0 or n < 2:\n        return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num * num\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + need\n    leftover = remaining - total_eaten\n    return [total_eaten, leftover]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i - 1] == '+':\n            result += operand[i]\n        elif operator[i - 1] == '-':\n            result -= operand[i]\n        elif operator[i - 1] == '*':\n            result *= operand[i]\n        elif operator[i - 1] == '/':\n            result //= operand[i]\n        elif operator[i - 1] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/17", "completion": "    beats = [4, 2, 1]\n    count = 0\n    result = []\n    for char in music_string:\n        if char == 'o':\n            count = 4\n        elif char == 'o|':\n            count = 2\n        elif char == '.|':\n            count = 1\n        result.append(count)\n    return result"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split(' and '))\n\treturn n - apples - oranges"}
{"task_id": "HumanEval/78", "completion": "    prime_digits = [2, 3, 5, 7]\n    count = 0\n    for digit in num:\n        if digit.isdigit():\n            num = int(digit, 16)\n            for prime in prime_digits:\n                if is_prime(num):\n                    count += 1\n                    break\n        else:\n            count += 1\n    return count\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    else:\n        return 9 * starts_one_ends(n-1) + 1"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.')\n    boredoms = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words[0].lower() == 'i':\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if n % 2 == 0:\n            result.append(i + 1)\n        else:\n            result.append(i * 2 - 1)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            signed_digits_sum = -1\n            while num > 0:\n                digit = abs(num) % 10\n                signed_digits_sum += digit\n                num = num // 10\n            if signed_digits_sum > 0:\n                count += 1\n        else:\n            digits_sum = 0\n            while num > 0:\n                digit = num % 10\n                digits_sum += digit\n                num = num // 10\n            if digits_sum > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    max_val = (n * (n + 1) * (2 * n + 1)) // 6\n    return max_val"}
{"task_id": "HumanEval/17", "completion": "    beats = [0] * music_string.count('.')\n    index = 0\n    while index < len(music_string):\n        if music_string[index] == 'o':\n            beats[index] = 4\n            index += 1\n        elif music_string[index] == 'o|':\n            beats[index] = 2\n            index += 1\n        elif music_string[index] == '.':\n            index += 1\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0):\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = s.split(\" and \")\n    total_fruits = int(apples) + int(oranges)\n    mangoes = n - total_fruits \n    return mangoes"}
{"task_id": "HumanEval/78", "completion": "    res = 0\n    for i in num:\n        if i.isdigit() and int(i) <= 9:\n            res += int(i)\n        elif i.isupper():\n            res += ord(i) - ord('A') + 10\n    return res\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_digits(num: str) -> int:\n    count = 0\n    key = hex_key(num)\n    for i in range(2, key+1):\n        if is_prime(i) and i in [2, 3, 5, 7, 11, 13, 17]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 10\n    else:\n        return 9 * starts_one_ends(n - 1)"}
{"task_id": "HumanEval/91", "completion": "    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/100", "completion": "    stones = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            stones.append(i + 1)\n        else:\n            stones.append(i - 1)\n    return stones"}
{"task_id": "HumanEval/107", "completion": "    even_palindrome = 0\n    odd_palindrome = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_palindrome += 1\n            else:\n                odd_palindrome += 1\n    return even_palindrome, odd_palindrome"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(num):\n        if num < 0:\n            return -1 * (abs(num) % 10)\n        return sum(int(digit) for digit in str(num))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)"}
{"task_id": "HumanEval/147", "completion": "    a = [i*i-i+1 for i in range(1,n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/17", "completion": "    beats_count = [0] * len(music_string.split('|'))\n    for note in music_string.split('|'):\n        if note.endswith('o'):\n            beats_count[beats_count.index(0)] = 4\n        elif note.endswith('.'):\n            beats_count[beats_count.index(0)] = 1\n    return beats_count"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[1])\n    total_fruits = int(fruits[2])\n    \n    mangoes = total_fruits - apples - oranges\n    \n    return mangoes"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = \"0123456789ABCDEF\"\n    prime_digits = [\"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\"]\n    count = 0\n    for char in num:\n        if char.upper() in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    if (n < 2):\n        return 0\n    if (n == 2):\n        return 1\n    summ = 1\n    for i in range(2, n+1):\n        summ += starts_one_ends(i-1)\n    return summ"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    stones = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            stones.append(i + 1)\n        else:\n            stones.append(i + 2)\n    return stones"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += int(str(i) == str(i)[::-1])\n        else:\n            odd += int(str(i) == str(i)[::-1])\n    return even, odd"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        if n == 0:\n            return 0\n        return (n % 10) + sum_of_digits(n // 10)\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(abs(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    max_triples = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    max_triples += 1\n    return max_triples"}
{"task_id": "HumanEval/17", "completion": "    beats = [4, 2, 1]\n    parsed_notes = music_string.split()\n    beats_count = []\n    for note in parsed_notes:\n        if note.endswith('o|'):\n            beats_count.append(4)\n        elif note.endswith('.|'):\n            beats_count.append(2)\n        else:\n            beats_count.append(1)\n    return beats_count"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    fruit_count = {}\n    for fruit in s.split():\n        fruit_count[fruit] = fruit_count.get(fruit,0) + 1\n    \n    mango_count = n - sum(fruit_count.values())\n    return mango_count"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = '0123456789ABCDEF'\n    prime_digits = {'2', '3', '5', '7'}\n    count = 0\n    for char in num:\n        if char.upper() in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    return pow(10, n - 1) + pow(10, n - 1)"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for word in S.split():\n        if word.lower() == 'i':\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(i + 1)\n        else:\n            res.append(i - 1)\n    return res"}
{"task_id": "HumanEval/107", "completion": "    even_palindromes = sum(1 for i in range(1, n + 1) if str(i) == str(i)[::-1] and int(i) % 2 == 0)\n    odd_palindromes = sum(1 for i in range(1, n + 1) if str(i) == str(i)[::-1] and int(i) % 2 != 0)\n    return (even_palindromes, odd_palindromes)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            signed_digits_sum = -sum(int(digit) for digit in str(abs(num)))\n        else:\n            signed_digits_sum = sum(int(digit) for digit in str(num))\n        if signed_digits_sum > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [0] * (n + 1)\n\tfor i in range(1, n + 1):\n\t\ta[i] = i * i - i + 1\n\tcnt = [0] * 3\n\tfor i in range(n):\n\t\tcnt[a[i] % 3] += 1\n\tans = 0\n\tans += cnt[0] * (cnt[0] - 1) * (cnt[0] - 2) // 6\n\tans += cnt[1] * cnt[2] * cnt[0]\n\tans += cnt[1] * (cnt[1] - 1) * (cnt[1] - 2) // 6\n\tans += cnt[2] * (cnt[2] - 1) * (cnt[2] - 2) // 6\n\tans += cnt[0] * cnt[1] * cnt[2]\n\treturn ans"}
{"task_id": "HumanEval/17", "completion": "    beats_count = []\n    for note in music_string.split():\n        if note == 'o':\n            beats_count.append(4)\n        elif note == 'o|':\n            beats_count.append(2)\n        elif note == '.':\n            beats_count.append(1)\n    return beats_count"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    a,o = map(int,s.split(' and '))\n    total = a + o\n    return n - total"}
{"task_id": "HumanEval/78", "completion": "    count = 0\n    for digit in num:\n        if digit.isdigit():\n            if int(digit, 16) >= 2 and int(digit, 16) <= 15:\n                count += 1\n        else:\n            if digit in ['B', 'D', 'E', 'F']:\n                count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 10\n    else:\n        return 10 * starts_one_ends(n-1) + (n-1) * (n-1)"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    i = 1\n    while n > 0:\n        if n % 2 == 0:\n            result.append(i)\n            i += 1\n        else:\n            result.append(i)\n            i += 2\n        n -= result[-1]\n        i += 1\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_palindrome = 0\n    odd_palindrome = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if int(str(i)[0]) % 2 == 0:\n                even_palindrome += 1\n            else:\n                odd_palindrome += 1\n    return even_palindrome, odd_palindrome"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            if num > 0:\n                count += 1\n        else:\n            if sum(int(digit) for digit in str(num)) > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    if n < 3:\n        return 0\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/17", "completion": "    beat_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    beats = []\n    for note in music_string.split():\n        beat_map_value = beat_map.get(note[-1])\n        if beat_map_value:\n            beats.append(beat_map_value)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split(' and '))\n    total_fruits = apples + oranges\n    return n - total_fruits"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    prime_digits = {'2', '3', '5', '7', 'B', 'D', 'E', 'F'}\n    count = 0\n    for char in num:\n        if char in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    return 9 + (9 ** (n - 1))"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split(\". \")\n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words[0] == 'I':\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    stones = [n]\n    if n % 2 == 0:\n        stones.append(n + 2)\n    else:\n        stones.append(n + 1)\n    for i in range(2, n):\n        if stones[i-1] % 2 == 0:\n            stones.append(stones[i-1] + 2)\n        else:\n            stones.append(stones[i-1] + 1)\n    return stones"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            sum_of_digits = -int(str(abs(num))[0])\n        else:\n            sum_of_digits = sum(int(digit) for digit in str(num))\n        if sum_of_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = [0, 0, 0]\n    for i in a:\n        count[i % 3] += 1\n    \n    return min(count[0], count[1], count[2])"}
{"task_id": "HumanEval/17", "completion": "    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note[0] == '|':\n            beats.append(2)\n        elif note[0] == '.':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0):\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apple, orange = map(int, s.split(\"apples and \"))\n    total_fruits = apple + orange\n    return n - total_fruits"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = '0123456789ABCDEF'\n    prime_digits = {'2', '3', '5', '7', 'B', 'D', 'E', 'F'}\n    count = 0\n    for char in num:\n        if char.upper() in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    start = 1\n    end = 10**(n-1)\n    return end - start + 1"}
{"task_id": "HumanEval/91", "completion": "    boredoms = 0\n    sentences = S.split(\".\")\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/100", "completion": "    stones = []\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            stones.append(i*2 - 1)\n        else:\n            stones.append(i*2)\n    return stones"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    ans = 0\n    for i in range(1, n+1):\n        a[i-1] = i * i - i + 1\n    for i in range(n-1):\n        for j in range(i+1, n):\n            for k in range(j+1, n+1):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    ans += 1\n    return ans"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split(' and '))\n\ttotal_fruits = apples + oranges\n\tmangos = n - total_fruits \n\treturn mangos"}
{"task_id": "HumanEval/78", "completion": "    count = 0\n    for ch in num:\n        if ch in ['2', '3', '5', '7', 'B', 'D', 'E', 'F']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    if (n == 1):\n        return 1\n    elif (n == 2):\n        return 2\n    else:\n        return (n - 1) + (n - 1)"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(i + 1)\n        else:\n            res.append(i - 1)\n    return res"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        if n == 0:\n            return 0\n        return (n % 10) + sum_of_digits(n // 10)\n    \n    count = 0\n    for num in arr:\n        if num < 0:\n            signed_digits = sum_of_digits(abs(num))\n        else:\n            signed_digits = sum_of_digits(num)\n        if signed_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    if n == 1:\n        return 0\n    ans = n - 1\n    for i in range(3, n + 1, 3):\n        ans += (i * (i - 1)) // 2\n    return ans"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split('|'):\n        if note == '':\n            continue\n        count = 0\n        while note != '':\n            if note[0] == '.':\n                count += 1\n                note = note[1:]\n            else:\n                break\n        beats.append(count)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0):\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[1])\n    total_fruits = apples + oranges\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/78", "completion": "    count = 0\n    for digit in num:\n        if digit in {'2', '3', '5', '7', 'B', 'D', 'E', 'F'}:\n            count += 1\n    return count\n\nprint(hex_key(\"AB\")) # 1\nprint(hex_key(\"1077E\")) # 2\nprint(hex_key(\"ABED1A33\")) # 4\nprint(hex_key(\"123456789ABCDEF0\")) # 6\nprint(hex_key(\"2020\")) # 2"}
{"task_id": "HumanEval/83", "completion": "    start = 10 ** (n - 1)\n    end = (10 ** n) - 1\n    count = 0\n    for i in range(start, end + 1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.')\n    boredoms = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words[0].lower() == 'i':\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/100", "completion": "    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + i)\n        else:\n            stones.append(n + i + 1)\n    return stones"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num >= 0:\n            digit_sum = sum(int(digit) for digit in str(num))\n            if digit_sum > 0:\n                count += 1\n        else:\n            first_digit = int(str(abs(num))[0])\n            if first_digit > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    max_triples = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tfor k in range(j+1, n):\n\t\t\t\tif (i + j + k) % 3 == 0:\n\t\t\t\t\tmax_triples += 1\n\treturn max_triples"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note.endswith('|'):\n            beats.append(2)\n        elif note.endswith('.'):\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apple,orange = map(int,s.split(' and '))\n    total = n - apple - orange\n    return total"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    prime_digits = {2, 3, 5, 7}\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 9\n    else:\n        return 9 * starts_one_ends(n-1) + (10 - 2)**(n-1)"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i + 1)\n        else:\n            result.append(i + 2)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    def sum_digits(n):\n        if n == 0:\n            return 0\n        return (n % 10) + sum_digits(n // 10)\n    \n    count = 0\n    for num in arr:\n        if num < 0:\n            first_digit = -sum_digits(abs(num))\n        else:\n            first_digit = sum_digits(num)\n        if first_digit > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n+1)]\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    ans += 1\n    return ans"}
{"task_id": "HumanEval/17", "completion": "    beats_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    beats_count = []\n    for note in music_string.split():\n        beats_count.append(beats_map[note])\n    return beats_count"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n\tfor i in range(n):\n\t\tif i % 11 == 0 or i % 13 == 0:\n\t\t\tcount += str(i).count('7')\n\treturn count"}
{"task_id": "HumanEval/67", "completion": "    fruit_count = {\"apples\":0, \"oranges\":0, \"mangos\":0}\n    \n    for fruit in s.split():\n        fruit_count[fruit] += 1\n    \n    total_fruits = fruit_count[\"apples\"] + fruit_count[\"oranges\"]\n    \n    mango_count = total_fruits - n\n    \n    if mango_count < 0:\n        return 0\n    else:\n        return mango_count"}
{"task_id": "HumanEval/78", "completion": "    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    count = 0\n    for digit in num:\n        if digit.upper() in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    if (n == 1):\n        return 1\n    ans = 0\n    if (n % 2 == 0):\n        ans = pow(10, n//2 - 1)\n    else:\n        ans = pow(10, (n-1)//2)\n    return ans"}
{"task_id": "HumanEval/91", "completion": "    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words = sentence.split()\n        if words[0].lower() == 'i':\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(n):\n        if n % 2 == 0:\n            result.append(n + i)\n        else:\n            result.append(n + i + 1)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(num):\n        if num < 0:\n            return -sum_of_digits(-num)\n        return sum(int(digit) for digit in str(num))\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triples = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    triples += 1\n    return triples"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note.endswith('|'):\n            beats.append(2)\n        else:\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split(\" and \"))\n    total_fruits = apples + oranges\n    return n - total_fruits"}
{"task_id": "HumanEval/78", "completion": "    hex_digit_map = {\n        '0': '', '1': '', '2': '', '3': '', '4': '', '5': '',\n        '6': '', '7': '', '8': '', '9': '', 'A': '', 'B': '',\n        'C': '', 'D': '', 'E': '', 'F': ''\n    }\n    prime_count = 0\n    for digit in num:\n        if digit in hex_digit_map:\n            hex_digit = hex_digit_map[digit]\n            if hex_digit == '2' or hex_digit == '3' or hex_digit == '5' or hex_digit == '7':\n                prime_count += 1\n    return prime_count"}
{"task_id": "HumanEval/83", "completion": "    if (n == 1):\n        return 1\n    start = 9\n    end = 10 ** n\n    start_count = end - start\n    end_count = end - 1\n    return start_count + end_count"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    for i in range(len(words)):\n        if words[i].lower() == 'i':\n            sentence = ' '.join(words[:i+1])\n            if sentence[-1] in ['.', '?', '!']:\n                return 1\n    return 0"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i + 1)\n        else:\n            result.append(i + 2)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if int(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        if n == 0:\n            return 0\n        return (n % 10) + sum_of_digits(n // 10)\n    count = 0\n    for num in arr:\n        if num < 0:\n            if sum_of_digits(abs(num)) == 0:\n                count += 1\n        else:\n            if sum_of_digits(num) > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [0] * (n + 1)\n\ta[1] = 1\n\tfor i in range(2, n + 1):\n\t\ta[i] = i * i - i + 1\n\tcount = 0\n\tfor i in range(1, n - 1):\n\t\tfor j in range(i + 1, n):\n\t\t\tif (a[i] + a[j] + a[n]) % 3 == 0:\n\t\t\t\tcount += 1\n\treturn count"}
{"task_id": "HumanEval/17", "completion": "    beats = [0] * music_string.count('o') + [0] * music_string.count('o|') + [0] * music_string.count('.|') + [0] * music_string.count('o')\n    beat_count = 0\n    for char in music_string:\n        if char == 'o':\n            beat_count = 4\n        elif char == 'o|':\n            beat_count = 2\n        elif char == '.|':\n            beat_count = 1\n        beats[beat_count] += 1\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = s.split(\" \")\n    total_fruits = int(apples) + int(oranges)\n    mangoes = n - total_fruits\n    return mangoes"}
{"task_id": "HumanEval/78", "completion": "    count = 0\n    for digit in num:\n        if digit in '2357':\n            count += 1\n    return count \n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True \n\ndef count_prime_hex_digits(num):\n    hex_key_num = hex_key(num)\n    count = 0\n    for i in range(16):\n        if hex(i)[2:].upper() in num:\n            if is_prime(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    total = 9 * 9\n    for i in range(2, n + 1):\n        total *= 9 - (i - 1)\n    return total"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for word in words:\n        if word.lower() == \"i\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    level = n\n    while level > 0:\n        result.append(level)\n        if level % 2 == 0:\n            level += 1\n        else:\n            level += 2\n        level -= 1\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            first_digit = int(str(abs(num))[0])\n            if first_digit < 0:\n                count += 1\n        else:\n            digit_sum = sum(int(digit) for digit in str(abs(num)))\n            if digit_sum > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [0] * n\n    for i in range(1, n + 1):\n        a[i - 1] = i * i - i + 1\n    sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    sum += 1\n    return sum"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    current_duration = 0\n    duration_legend = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    for note in music_string.split():\n        duration = duration_legend.get(note, 0)\n        current_duration += duration\n        beats.append(current_duration)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split(' and '))\n    return n - apples - oranges"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = '0123456789ABCDEF'\n    count = 0\n    for digit in num:\n        if digit in '2357':\n            count += 1\n    return count\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_hex_digits(num):\n    count = hex_key(num)\n    prime_count = 0\n    for i in range(16):\n        if is_prime(i) and chr(i+55) in num:\n            prime_count += 1\n    return prime_count"}
{"task_id": "HumanEval/83", "completion": "    start = 1\n    end = 10 ** (n - 1)\n    count = 0\n    for i in range(start, end + 1):\n        if i % 10 == 1 or i % 10 == n - 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    boredoms = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > 0 and words[0].lower() == \"i\":\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/100", "completion": "    stones = []\n    for i in range(1, n+1):\n        if n % 2 == 0:\n            stones.append(n + 2)\n        else:\n            stones.append(n + 1)\n    return stones"}
{"task_id": "HumanEval/107", "completion": "    even, odd = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    triples = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i + j + k) % 3 == 0:\n                    triples += 1\n    return triples"}
{"task_id": "HumanEval/17", "completion": "    beats_per_note = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    beats = []\n    for note in music_string.split():\n        beats.append(beats_per_note[note])\n    \n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split(\"apples and \"))\n    total_fruits = apples + oranges + n\n    mangoes = total_fruits - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = \"0123456789ABCDEF\"\n    count = 0\n    for char in num:\n        if char.upper() in \"2357\":\n            count += 1\n    return count \n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef count_prime_digits(hex_num):\n    hex_num = hex_num.upper()\n    count = 0\n    for char in hex_num:\n        if char.upper() in \"2357\":\n            count += 1\n    return hex_key(hex_num) if count == 0 else sum(1 for digit in range(count) if is_prime(digit))"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    \n    start_count = 0\n    end_count = 0\n    \n    for i in range(1, 10):\n        start_count += 1\n    for i in range(1, 10):\n        end_count += 1\n    \n    return (start_count + end_count) ** (n - 1)"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for i in range(len(S)):\n        if S[i:i+1].lower() == 'i':\n            j = i + 1\n            while j < len(S) and S[j:j+1].lower() not in ['.', '?', '!']:\n                j += 1\n            if j < len(S):\n                count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    stones = []\n    if n % 2 == 0:\n        stones.append(n)\n    else:\n        stones.append(n + 1)\n    for i in range(1, n):\n        if i % 2 == 0:\n            stones.append(stones[i - 1] + 1)\n        else:\n            stones.append(stones[i - 1] + 3)\n    return stones"}
{"task_id": "HumanEval/107", "completion": "    even, odd = 0, 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1 if str(i) == str(i)[::-1] else 0\n        else:\n            odd += 1 if str(i) == str(i)[::-1] else 0\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            sum_digits = -int(str(abs(num))[0])\n        else:\n            sum_digits = sum(int(digit) for digit in str(num))\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [0] * n\n    for i in range(n):\n        a[i] = i * i - i + 1\n    count = [0] * 3\n    for i in range(n):\n        count[(a[i] + 1) % 3] += 1\n        count[(a[i] + 2) % 3] += 1\n    res = 0\n    res += (count[0] * (count[0] - 1) * (count[0] - 2)) // 6\n    res += (count[1] * count[2])\n    res += (count[0] * count[1] * count[2])\n    return res"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    count = 0\n    for char in music_string:\n        if char == 'o':\n            count = 4\n        elif char == 'o|':\n            count = 2\n        elif char == '.|':\n            count = 1\n        beats.append(count)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0):\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split(\" and \"))\n    return n - apples - oranges"}
{"task_id": "HumanEval/78", "completion": "    count = 0\n    for ch in num:\n        if ch in '2357':\n            count += 1\n    return count\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_digits(hex_num):\n    count = hex_key(hex_num)\n    return count if count <= 4 else count - 4"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i % 10 == 1 or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    stones = []\n    if n % 2 == 0:\n        stones.append(n)\n    else:\n        stones.append(n + 1)\n    i = 2\n    while i <= n:\n        if i % 2 == 0:\n            stones.append(i)\n        else:\n            stones.append(i + 1)\n        i += 1\n    return stones"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num >= 0:\n            sum_of_digits = sum(int(digit) for digit in str(num))\n            if sum_of_digits > 0:\n                count += 1\n        else:\n            count += 1  # For negative numbers, consider only the first digit\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [0] * n\n    a[0] = 1\n    a[1] = 3\n    a[2] = 7\n    a[3] = 13\n    a[4] = 21\n    count = [0, 0, 0]\n    for i in range(n):\n        count[a[i] % 3] += 1\n    ans = count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    ans += count[1] * count[2] * count[0]\n    ans += count[0] * count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    ans += count[0] * count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    ans += count[1] * count[2] * count[2]\n    return ans"}
{"task_id": "HumanEval/17", "completion": "    beats_per_note = {'o': 4, 'o|': 2, '.|': 1}\n    beats = []\n    for note in music_string.split():\n        beats.append(beats_per_note[note])\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            while i > 0:\n                if i % 10 == 7:\n                    count += 1\n                i //= 10\n    return count"}
{"task_id": "HumanEval/67", "completion": "    oranges,apples=0,0\n    fruits=[]\n    for fruit in s.split():\n        if fruit.isdigit():\n            oranges+=int(fruit)\n        else:\n            apples+=int(fruit)\n    mangoes=n-(oranges+apples)\n    return mangoes"}
{"task_id": "HumanEval/78", "completion": "    return {'2': 1, '3': 1, '5': 1, '7': 1, 'B': 11, 'D': 13}[num]\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_hexadecimal_digits(num):\n    return sum(hex_key(digit) for digit in num if digit.isupper() and is_prime(int(digit, 16)))"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    else:\n        return (10**(n-1)) + (9*starts_one_ends(n-1))"}
{"task_id": "HumanEval/91", "completion": "    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/100", "completion": "    stones = []\n    level = n\n    for i in range(n):\n        stones.append(level)\n        if level % 2 == 0:\n            level += 1\n        else:\n            level += 2\n    return stones"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if int(str(i)[-1]) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            sign = -1\n            num = abs(num)\n        else:\n            sign = 1\n        digit_sum = sum(int(digit) for digit in str(num))\n        if digit_sum > 0:\n            count += sign\n    return count"}
{"task_id": "HumanEval/147", "completion": "    total_count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    total_count += 1\n    return total_count"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = s.split(\"apples and \")\n    total_fruits = int(oranges) + int(apples)\n    mangoes = n - total_fruits \n    return mangoes"}
{"task_id": "HumanEval/78", "completion": "    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D', 'E', 'F'}\n    return sum(1 for digit in num if digit.upper() in prime_hex_digits)"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 10\n    start = 1\n    end = 10\n    for i in range(2, n):\n        start = start * 10 + 1\n        end = end * 10\n    return end - start + 1"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split(\".\")\n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0].lower() == \"i\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n + 1):\n        if n % 2 == 0:\n            pile.append(i * 2)\n        else:\n            pile.append(i * 2 - 1)\n    return pile"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if int(str(i)[-1]) % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            first_digit = abs(num)\n        else:\n            first_digit = num\n        sum_of_digits = 0\n        while first_digit > 0:\n            sum_of_digits += first_digit % 10\n            first_digit //= 10\n        if sum_of_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i*i-i+1 for i in range(1, n+1)]\n    mod3 = [0, 0, 0]\n    for i in range(n-1, -1, -1):\n        mod3[a[i] % 3] += 1\n    return mod3[0]*(mod3[0]-1)//2 + mod3[1]*mod3[2]"}
{"task_id": "HumanEval/17", "completion": "    beats_dict = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    beats_list = []\n    for note in music_string.split():\n        beats_list.append(beats_dict.get(note[-1], 0))\n    return beats_list"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split(' and '))\n    total = apples + oranges + n\n    mangoes = total - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = \"0123456789ABCDEF\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for char in num:\n        if char in hex_digits:\n            count += 1\n            if int(char, 16) in primes:\n                count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 10\n    else:\n        return 10 * starts_one_ends(n - 1)"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split(\".\")\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    if n % 2 == 0:\n        return [n + i for i in range(1, n + 1, 2)]\n    else:\n        return [n + i for i in range(1, n + 2, 2)]"}
{"task_id": "HumanEval/107", "completion": "    even = (n+1) // 2\n    odd = n - even\n    return even, odd"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            sign = -1\n            num = abs(num)\n        else:\n            sign = 1\n        sum_digits = 0\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    mod3 = [0] * 3\n    for i in range(n):\n        mod3[(i * (i - 1) // 2) % 3] += 1\n    \n    mod3[1] += mod3[2]\n    \n    return mod3[1]"}
{"task_id": "HumanEval/17", "completion": "    beats_count = []\n    for note in music_string.split():\n        if note == 'o':\n            beats_count.append(4)\n        elif note == 'o|':\n            beats_count.append(2)\n        elif note == '.|':\n            beats_count.append(1)\n    return beats_count"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0):\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int,s.split(\" and \"))\n    return n - apples - oranges"}
{"task_id": "HumanEval/78", "completion": "    hex_map = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    count = 0\n    for digit in num:\n        if hex_map[digit] in [2, 3, 5, 7, 11, 13, 17]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    else:\n        return 9 * (10 ** (n - 1)) + 1"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            pile.append(i + 1)\n        else:\n            pile.append(i - 1)\n    return pile"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            sum_of_digits = -sum(int(digit) for digit in str(abs(num)))\n        else:\n            sum_of_digits = sum(int(digit) for digit in str(num))\n        if sum_of_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [0] * (n + 1)\n    for i in range(1, n + 1):\n        a[i] = i * i - i + 1\n    \n    count = [0] * 3\n    for i in range(n - 1, -1, -1):\n        count[a[i] % 3] += 1\n        \n    ans = 0\n    ans += (count[1] * (count[1] - 1)) // 2\n    ans += (count[2] * (count[2] - 1) * (count[2] - 2)) // 6\n    ans += (count[0] * (count[0] - 1) * (count[0] - 2)) // 6\n    \n    return ans"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) > 0:\n                stack.pop()\n                if len(stack) == 0:\n                    result.append(''.join(stack))\n                    stack = []\n    return result"}
{"task_id": "HumanEval/6", "completion": "    depth = 0\n    max_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            depth -= 1\n            result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Make given string a palindrome \"\"\"\n    if is_palindrome(string):\n        return string\n\n    n = len(string)\n    # Find the longest palindrome postfix\n    l, r = 0, n - 1\n    while l >= 0 and r < n and string[l] == string[r]:\n        l -= 1\n        r += 1\n\n    # Append reverse of prefix before the palindromic suffix\n    return string + string[:l + 1][::-1]"}
{"task_id": "HumanEval/11", "completion": "    a_int = int(a, 2)\n    b_int = int(b, 2)\n    result_int = a_int ^ b_int\n    result_bin = bin(result_int)[2:]\n    return result_bin"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    string = string.lower()\n    return len(set(string))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    i = 0\n    while i <= len(string) - len(substring):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += 1\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    numbers_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: numbers_dict[x])\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/23", "completion": "    if not string:\n        return 0\n    return 1 + strlen(string[1:])"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    decodes the encoded string using the inverse of the encode_cyclic function.\n    \"\"\"\n    return s[(3 * len(s)) // 4:] + s[:len(s) // 4]"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by -5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/74", "completion": "    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    return ' '.join(sorted(word) for word in s.split())"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char) - ord('a') + 2) * 2 % 26\n            result += chr(ord('a') + (shift + 2) % 26)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = \"\"\n\tvowels = \"aeiouAEIOU\"\n\tfor char in message:\n\t\tif char.isalpha():\n\t\t\tif char.isupper():\n\t\t\t\tencoded_message += chr((ord(char) + (ord('Z') - ord('A'))) % 26 + ord('A'))\n\t\t\telse:\n\t\t\t\tencoded_message += chr((ord(char) + (ord('z') - ord('a'))) % 26 + ord('a'))\n\t\telif char in vowels:\n\t\t\tencoded_message += chr(((ord(char) - ord('a') + 2) % 5) + ord('a'))\n\t\telse:\n\t\t\tencoded_message += char\n\treturn encoded_message"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/111", "completion": "    letters = test.split()\n    letter_count = {}\n    max_count = 0\n    max_letters = []\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n        if letter_count[letter] > max_count:\n            max_count = letter_count[letter]\n            max_letters = [letter]\n        elif letter_count[letter] == max_count:\n            max_letters.append(letter)\n    return {letter: max_count for letter in max_letters}"}
{"task_id": "HumanEval/112", "completion": "    result = ''.join([i for i in s if i not in c])\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(int(c) % 2 == 1 for c in s)\n        result.append(f\"the number of odd elements {count}n the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    words = s.split()\n    selected_words = [word for word in words if sum(1 for char in word if char in consonants) == n]\n    return selected_words"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    \n    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    \n    month = int(date_parts[0])\n    day = int(date_parts[1])\n    year = int(date_parts[2])\n    \n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if day < 1 or day > 30:\n        return False\n    if day < 1 or day > 29:\n        return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "    return txt.split() if ' ' in txt else txt.split(',') if ',' in txt else sum(1 for c in txt if c.islower()) % 2"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n\tif len(words) == 0:\n\t\treturn False\n\tlast_char = words[-1][-1]\n\tif last_char.isalpha() and not last_char.isupper() and not last_char.islower():\n\t\treturn True\n\telse:\n\t\treturn False"}
{"task_id": "HumanEval/140", "completion": "    result = text.replace(\" \", \"_\")\n    result = result.replace(\"  \", \"-\")\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)\n\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/149", "completion": "    return sorted(filter(lambda x: len(x) % 2 == 0, lst))"}
{"task_id": "HumanEval/153", "completion": "    def get_strength(extension):\n        cap, sm = 0, 0\n        for char in extension:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n        return cap - sm\n    \n    strengths = {}\n    for ext in extensions:\n        strengths[ext] = get_strength(ext)\n    \n    strongest = max(strengths, key=strengths.get)\n    return f\"{class_name}.{strongest}\""}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    \n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')' and stack:\n            result.append(stack.pop())\n        elif char != ' ':\n            stack[-1] += char\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    current_depth = 0\n    max_depth_list = []\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n            max_depth_list.append(max_depth)\n        elif char == ')':\n            current_depth -= 1\n    return max_depth_list"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    n = len(string)\n    for i in range(n, -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    xor_result = int(a, 2) ^ int(b, 2)\n    return bin(xor_result)[2:]"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    sequence = [str(i) for i in range(n+1)]\n    return \" \".join(sequence)"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    index = 0\n    while True:\n        index = string.find(substring, index)\n        if index == -1:\n            return count\n        count += 1\n        index += 1"}
{"task_id": "HumanEval/19", "completion": "    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: number_map[x])\n    return ' '.join(numbers)"}
{"task_id": "HumanEval/23", "completion": "    if string == \"\":\n\t\treturn 0\n\telse:\n\t\treturn 1 + strlen(string[1:])"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    decodes the given encoded string using the decode_cyclic function.\n    \"\"\"\n    return encode_cyclic(s)"}
{"task_id": "HumanEval/44", "completion": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by -5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n\tvowels = \"aeiou\"\n\tfor char in s:\n\t\tif char.lower() in vowels:\n\t\t\tcount += 1\n\tif s[-1].lower() in vowels:\n\t\tcount += 1\n\treturn count"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/74", "completion": "    len1 = sum(len(s) for s in lst1)\n    len2 = sum(len(s) for s in lst2)\n    if len1 < len2:\n        return lst1\n    elif len2 < len1:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]  # Get binary representation of decimal, remove '0b' prefix\n    binary = binary.zfill(8)  # Pad with leading zeros to make it 8 bits\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - 97 - 2) * 2) + 97)\n            encrypted += shifted\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            elif char.isupper():\n                encoded_message += char.lower()\n        elif char in 'aeiouAEIOU':\n            encoded_message += chr((ord(char) - ord('a') + 2) % 5 + ord('a'))\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/98", "completion": "    vowels = set(\"aeiouAEIOU\")\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split(\", \")"}
{"task_id": "HumanEval/111", "completion": "    test_list = test.split()\n\thist = {}\n\tmax_count = 0\n\tmax_letters = []\n\tfor letter in test_list:\n\t\tif letter in hist:\n\t\t\thist[letter] += 1\n\t\telse:\n\t\t\thist[letter] = 1\n\t\tif hist[letter] > max_count:\n\t\t\tmax_count = hist[letter]\n\t\t\tmax_letters = [letter]\n\t\telif hist[letter] == max_count:\n\t\t\tmax_letters.append(letter)\n\treturn dict(zip(max_letters, [max_count]*len(max_letters)))"}
{"task_id": "HumanEval/112", "completion": "    result = ''\n    for char in s:\n        if char not in c:\n            result += char\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(int(digit) % 2 != 0 for digit in s)\n        result.append(f\"the number of odd elements {count}n the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    consonants_from_right = []\n    for i in range(len(word)-1, -1, -1):\n        if word[i].lower() not in vowels:\n            consonants_from_right.append(word[i])\n        else:\n            break\n    if len(consonants_from_right) < 2:\n        return \"\"\n    else:\n        return consonants_from_right[1]"}
{"task_id": "HumanEval/124", "completion": "    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    month, day, year = date_parts\n    try:\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        count = sum(1 for c in txt if c.islower() and ord(c) % 2 != 0)\n        return [str(count)]"}
{"task_id": "HumanEval/134", "completion": "    if len(txt) == 0:\n        return False\n    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_char = words[-1][-1]\n    if last_char.isalpha() and len(last_char) == 1:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/140", "completion": "    result = ''\n    count = 0\n    for i in text:\n        if i == ' ':\n            count += 1\n            if count <= 2:\n                result += i\n            else:\n                result += '-'\n        else:\n            result += i\n            count = 0\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = [word for word in words if len(word) > 1 and is_prime(len(word))]\n    return ' '.join(prime_words)\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/149", "completion": "    lengths = [len(word) for word in lst]\n    odd_lengths = [i for i in lengths if i % 2 != 0]\n    unique_words = list(set([word for word in lst if len(word) % 2 == 0]))\n    unique_words.sort(key=lambda x: (len(x), x))\n    return unique_words"}
{"task_id": "HumanEval/153", "completion": "    strengths = []\n    for ext in extensions:\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        strength = CAP - SM\n        strengths.append((ext, strength))\n    strengths.sort(key=lambda x: (-x[1], extensions.index(x[0])))\n    return f\"{class_name}.{strengths[0][0]}\""}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    roman_numeral = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    result_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < result_word):\n            max_unique_chars = unique_chars\n            result_word = word\n    return result_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')' and stack:\n            stack[-1] += ')'\n        elif stack and stack[-1]:\n            stack[-1] += char\n        else:\n            result.append(char)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    nested_levels = []\n    stack = []\n    max_level = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(0)\n            max_level = max(max_level, len(stack))\n        elif char == ')':\n            level = stack.pop()\n            nested_levels.append(max_level - level - 1)\n    return nested_levels"}
{"task_id": "HumanEval/7", "completion": "    result = [s for s in strings if substring in s]\n    return result"}
{"task_id": "HumanEval/10", "completion": "    \"\"\"\n    Return the shortest palindrome that begins with supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('ab')\n    'aba'\n    >>> make_palindrome('abcd')\n    'abcdcba'\n    >>> make_palindrome('abac')\n    'abacaba'\n    \"\"\"\n    n = len(string)\n    l, r = 0, n - 1\n    while l <= r and string[l] == string[r]:\n        l += 1\n        r -= 1\n    postfix = string[l:r+1]\n    prefix = string[:l]\n    return string + prefix[::-1] + postfix"}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(max(len(a), len(b))):\n        if i < len(a) and i < len(b):\n            result += str(int(a[i]) ^ int(b[i]))\n        elif i < len(a):\n            result += a[i]\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    longest_string = strings[0]\n    for s in strings:\n        if len(s) > len(longest_string):\n            longest_string = s\n    return longest_string"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    if not string or not substring:\n        return 0\n    count = 0\n    start = 0\n    while True:\n        pos = string.find(substring, start)\n        if pos == -1:\n            return count\n        count += 1\n        start = pos + 1"}
{"task_id": "HumanEval/19", "completion": "    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = list(numbers.split())\n    numbers_list.sort(key=lambda x: number_map[x])\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/23", "completion": "    count = 0\n\tfor i in range(len(string)):\n\t\tif string[i] == '\\0':\n\t\t\tbreak\n\t\tcount += 1\n\treturn count"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the encode_cyclic function.\n    \"\"\"\n    return encode_cyclic(s)[::-1]"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return \"\".join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join([c for c in text if c not in vowels])"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        if s[-2].lower() in vowels:\n            count -= 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/74", "completion": "    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n        return lst1\n    elif sum(len(s) for s in lst1) > sum(len(s) for s in lst2):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]  # convert decimal to binary\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    return ' '.join(''.join(sorted(word)) for word in s.split())"}
{"task_id": "HumanEval/89", "completion": "    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            new_char = chr(((ord(char) - 97 - 2) % 26) + 97)\n            encrypted += new_char\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/93", "completion": "    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            elif char.isupper():\n                result += char.lower()\n            elif char.lower() in 'aeiou':\n                result += chr(((ord(char) - 97 - 2) % 5) + 97)\n            else:\n                result += char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOUaeiou\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split(',') + s.split()\n    return [word.strip() for word in words]"}
{"task_id": "HumanEval/111", "completion": "    freq = {}\n    for i in test.split():\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    max_freq = max(freq.values())\n    return {key: value for key, value in freq.items() if value == max_freq}"}
{"task_id": "HumanEval/112", "completion": "    result = [i for i in s if i not in c]\n    return (''.join(result),result==result[::-1])"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i in range(len(lst)):\n        odd_count = sum(int(digit) % 2 != 0 for digit in lst[i])\n        result.append(f\"the number of odd elements {odd_count}n the str{i}ng {lst[i]} of the {len(lst)}nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char.lower() in consonants) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    i = len(word) - 2\n    while i >= 0 and word[i] not in vowels:\n        i -= 1\n    if i < 0:\n        return \"\"\n    else:\n        return word[i+1]"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    \n    date_parts = date.split('-')\n    \n    if len(date_parts) != 3:\n        return False\n    \n    try:\n        month = int(date_parts[0])\n        day = int(date_parts[1])\n        year = int(date_parts[2])\n    except ValueError:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1 or day > 31:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return False\n        elif month in [4, 6, 9, 11]:\n            return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ',' in txt:\n        return txt.split(',')\n    else:\n        return [''.join(filter(str.islower, txt))]"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    words = txt.split()\n    for word in words:\n        if word.endswith(word[-1]) and word[-1].isalpha():\n            return True\n    return False"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    result = ' '.join([word for word in words if is_prime(len(word))])\n    return result"}
{"task_id": "HumanEval/149", "completion": "    return sorted([word for word in lst if len(word)%2==0])"}
{"task_id": "HumanEval/153", "completion": "    extension_strengths = {}\n    for ext in extensions:\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        extension_strengths[ext] = CAP - SM\n    strongest_extension = max(extension_strengths, key=extension_strengths.get)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'XL',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_len = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_len or (unique_chars == max_len and word < max_word):\n            max_len = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    hash_object = hashlib.md5(text.encode())\n    return hash_object.hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n            else:\n                continue\n        elif not stack:\n            stack.append(char)\n    result.append(''.join(stack))\n    return result"}
{"task_id": "HumanEval/6", "completion": "    def count_nesting(s: str, level: int) -> int:\n        max_level = level\n        count = 0\n        nesting_stack = []\n        for char in s:\n            if char == '(':\n                nesting_stack.append(char)\n                count += 1\n                max_level = max(max_level, count)\n            elif char == ')':\n                if nesting_stack:\n                    nesting_stack.pop()\n                    count -= 1\n                    max_level = max(max_level, count)\n                else:\n                    break\n        return max_level\n\n    return [count_nesting(group, 0) for group in paren_string.split()]"}
{"task_id": "HumanEval/7", "completion": "    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n    \n    n = len(string)\n    i = 0\n    while i < n//2:\n        if string[i] != string[n-i-1]:\n            break\n        i += 1\n    \n    palindrome = string[i:] + string[i-1::-1]\n    return palindrome"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = 0\n    max_str = \"\"\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_str = s\n    return max_str"}
{"task_id": "HumanEval/14", "completion": "    n = len(string)\n    result = []\n    for i in range(n):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = [num_map[num] for num in numbers.split()]\n    nums.sort()\n    return ' '.join([str(num_map[num]) for num in nums])"}
{"task_id": "HumanEval/23", "completion": "    i = 0\n\twhile string[i] != '\\0':\n\t\ti += 1\n\treturn i"}
{"task_id": "HumanEval/27", "completion": "    result = ''\n\tfor char in string:\n\t\tif char.islower():\n\t\t\tresult += char.upper()\n\t\telif char.isupper():\n\t\t\tresult += char.lower()\n\t\telse:\n\t\t\tresult += char\n\treturn result"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[2] + group[1] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x < base:\n        return str(x)\n    else:\n        res = ''\n        while x > 0:\n            res = str(x % base) + res\n            x //= base\n        return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(filter(lambda x: x not in vowels, text))"}
{"task_id": "HumanEval/54", "completion": "    if len(s0) != len(s1):\n        return False\n    count0 = [0]*26\n    count1 = [0]*26\n    for i in range(len(s0)):\n        count0[ord(s0[i]) - ord('a')] += 1\n        count1[ord(s1[i]) - ord('a')] += 1\n    return count0 == count1"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n\tcount = 0\n\tfor char in s:\n\t\tif char.lower() in vowels:\n\t\t\tcount += 1\n\treturn count"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/74", "completion": "    len1, len2 = len(''.join(lst1)), len(''.join(lst2))\n    if len1 < len2:\n        return lst1\n    elif len1 > len2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]  # convert decimal to binary without the '0b' prefix\n    binary = binary.zfill(8)  # pad with zeros to make it 8 bits long\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - 97 - 2) % 26) + 97)\n            encrypted += shifted\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += chr(ord(char) + 32)\n            else:\n                encoded_message += chr(ord(char) - 32)\n        elif char in vowels:\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n\tfor i in range(len(s)):\n\t\tif i % 2 == 0 and s[i].isupper() and s[i] in 'AEIOU':\n\t\t\tcount += 1\n\treturn count"}
{"task_id": "HumanEval/101", "completion": "    return s.split(',') if ',' in s else s.split()"}
{"task_id": "HumanEval/111", "completion": "    d = {}\n    for char in test.split():\n        if char in d:\n            d[char] += 1\n        else:\n            d[char] = 1\n    max_count = max(d.values())\n    result = {k: v for k, v in d.items() if v == max_count}\n    return result"}
{"task_id": "HumanEval/112", "completion": "    result = ''\n    for char in s:\n        if char not in c:\n            result += char\n    return result, result==result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = sum(int(c) % 2 != 0 for c in s)\n        result.append(\"the number of odd elements \" + str(odd_count) + \"n the str\" + str(odd_count) + \"ng \" + s)\n    return result"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        count = sum(1 for letter in word if letter.lower() not in ['a', 'e', 'i', 'o', 'u'])\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    n = len(word)\n    for i in range(n-2, -1, -1):\n        if word[i] not in vowels:\n            for j in range(i+1, n-1):\n                if word[j] in vowels:\n                    return word[j]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if date == '':\n\t\treturn False\n\tparts = date.split('-')\n\tif len(parts) != 3:\n\t\treturn False\n\tif not parts[0].isdigit() or not parts[1].isdigit() or not parts[2].isdigit():\n\t\treturn False\n\tmonth, day, year = map(int, parts)\n\tif month < 1 or month > 12:\n\t\treturn False\n\tif day < 1 or day > 31:\n\t\treturn False\n\tif month in [1,3,5,7,8,10,12] and day > 31:\n\t\treturn False\n\tif month in [4,6,9,11] and day > 30:\n\t\treturn False\n\tif month == 2 and day > 29:\n\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words\n\ndef odd_letters_count(txt):\n    letters = [c for c in txt if c.isalpha()]\n    odd_count = sum(1 for i in letters if ord(i) % 2 != 0)\n    return odd_count"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    words = txt.split()\n    for word in words:\n        if len(word) > 0 and word[-1].isalpha():\n            return True\n    return False"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    result = ' '.join(word for word in words if is_prime(len(word)))\n    return result"}
{"task_id": "HumanEval/149", "completion": "    return sorted([x for x in lst if len(x) % 2 == 0])"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = ''\n    for extension in extensions:\n        upper_count = sum(1 for char in extension if char.isupper())\n        lower_count = sum(1 for char in extension if char.islower())\n        strength = upper_count - lower_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = \"\"\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_chars or (unique_chars == max_chars and word < max_word):\n            max_word = word\n            max_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    letters = []\n    non_letters = []\n    for char in s:\n        if char.isalpha():\n            letters.append(char.swapcase())\n        else:\n            non_letters.append(char)\n    reversed_string = ''.join(letters + non_letters)[::-1]\n    return reversed_string"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode())\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')' and stack:\n            result.append(''.join(stack))\n            stack.pop()\n        else:\n            stack[-1] += char\n    \n    result.extend(stack)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    def depth(s):\n        depth = 0\n        max_depth = 0\n        for char in s:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        return max_depth\n    \n    groups = paren_string.split()\n    return [depth(group) for group in groups]"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Make a palindrome by appending reverse of prefix to the end of string \"\"\"\n    for i in range(len(string)):\n        prefix = string[:i]\n        suffix = string[i+1:]\n        if is_palindrome(suffix):\n            return prefix + string + prefix[::-1] \n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = int(a, 2) ^ int(b, 2)\n    return bin(result)[2:]"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i) + \" \"\n    return sequence.strip()"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    nums = numbers.split()\n    nums.sort(key=lambda x: int(x))\n    return ' '.join(nums)"}
{"task_id": "HumanEval/23", "completion": "    if not string:\n        return 0\n    count = 1\n    while string[count] != '\\0':\n        count += 1\n    return count"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[2] + group[1] + group[0]) for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    result = \"\"\n    while x:\n        result = str(x % base) + result\n        x //= base\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    vowels = \"aeiou\"\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    if s[-1].lower() in vowels:\n        count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/74", "completion": "    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n        return lst1\n    elif sum(len(s) for s in lst1) > sum(len(s) for s in lst2):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    binary = 'db' + binary + 'db'\n    return binary"}
{"task_id": "HumanEval/86", "completion": "    def anti_shuffle_word(word):\n        return ''.join(sorted(word))\n    return ' '.join(anti_shuffle_word(word) for word in s.split())"}
{"task_id": "HumanEval/89", "completion": "    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - 65 - 2) % 26) + 65)\n            encrypted += shifted\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += chr(ord(char) ^ 32)\n            elif char.islower():\n                encoded_message += chr(ord(char) ^ 32)\n        elif char in vowels:\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split() if \",\" not in s else s.split(\",\")"}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    \n    hist = {}\n    words = test.split()\n    for word in words:\n        for char in word:\n            if char in hist:\n                hist[char] += 1\n            else:\n                hist[char] = 1\n    \n    max_count = max(hist.values())\n    most_repeated = {char: count for char, count in hist.items() if count == max_count}\n    \n    return most_repeated"}
{"task_id": "HumanEval/112", "completion": "    result = \"\".join([char for char in s if char not in c])\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = sum(int(c) % 2 != 0 for c in s)\n        result.append(f\"the number of odd elements {odd_count}n the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.lower() not in \"aeiou\")\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels:\n            for j in range(i + 1, len(word)):\n                if word[j] in vowels:\n                    return word[j]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if len(date) != 10:\n\t\treturn False\n\t\n\tif not date[0:2].isdigit() or not date[3:5].isdigit() or not date[6:8].isdigit():\n\t\treturn False\n\t\n\tif int(date[0:2]) < 1 or int(date[0:2]) > 12:\n\t\treturn False\n\t\n\tif int(date[3:5]) < 1 or int(date[3:5]) > 31:\n\t\treturn False\n\t\n\tif int(date[6:8]) < 1 or int(date[6:8]) > 31:\n\t\treturn False\n\t\n\tif int(date[9:11]) < 1 or int(date[9:11]) > 12:\n\t\treturn False\n\t\n\tif date[2] != '-' or date[4] != '-' or date[6] != '-':\n\t\treturn False\n\t\n\treturn True"}
{"task_id": "HumanEval/125", "completion": "    return txt.split() if ' ' in txt else txt.split(',') if ',' in txt else sum(1 for char in txt if char.islower() and ord(char)%2!=0)"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    last_word = words[-1]\n    last_char = last_word[-1]\n    if last_char.isalpha() and not last_char.isspace():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/140", "completion": "    result = text.replace(\" \", \"_\")\n    result = result.replace(\"  \", \"-\")\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n\tprime_words = [word for word in words if is_prime(len(word))]\n\treturn ' '.join(prime_words)\n\ndef is_prime(n):\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/149", "completion": "    return sorted(filter(lambda x: len(x)%2==0, lst))\n\ndef list_sort(lst):\n    return sorted(sorted_list_sum(lst), key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/153", "completion": "    strengths = {}\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        strengths[extension] = strength\n    \n    strongest_extension = max(strengths, key=strengths.get)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/156", "completion": "    roman_map = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n    result = ''\n    for value, numeral in sorted(roman_map.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = -1\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    hash_md5 = hashlib.md5()\n    hash_md5.update(text.encode())\n    return hash_md5.hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')' and stack:\n            result.append(stack.pop())\n        elif char != ' ':\n            stack[-1] += char\n    return result"}
{"task_id": "HumanEval/6", "completion": "    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(0)\n        elif char == ')':\n            depth = stack.pop()\n            result.append(depth + 1)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    # Find the longest postfix of supplied string that is a palindrome\n    i = len(string) - 1\n    while i > 0 and not is_palindrome(string[i:]):\n        i -= 1\n    if i < 0:\n        return string + string[::-1]  # Already a palindrome\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(min(len(a), len(b))):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result + a[len(b):] + b[len(a):]"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    index = 0\n    while True:\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        count += 1\n        index += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_map[x])\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/23", "completion": "    if not string:\n        return 0\n    return 1 + strlen(string[1:])"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return ''\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing and cycling groups of three characters.\n    \"\"\"\n    # reverse string.\n    s = s[::-1]\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # reverse the result to get the original string.\n    return \"\".join(groups)[::-1]"}
{"task_id": "HumanEval/44", "completion": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    upper_sum = 0\n    for char in s:\n        if char.isupper():\n            upper_sum += ord(char)\n    return upper_sum"}
{"task_id": "HumanEval/74", "completion": "    def total_chars(lst):\n        return sum(len(s) for s in lst)\n    \n    if total_chars(lst1) < total_chars(lst2):\n        return lst1\n    elif total_chars(lst1) > total_chars(lst2):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    def sort_word(word):\n        return ''.join(sorted(word))\n\n    return ' '.join(sorted(s.split(), key=sort_word))"}
{"task_id": "HumanEval/89", "completion": "    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            new_char = chr(((ord(char) - 97 - shift) % 26) + 97)\n            encrypted += new_char\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                encoded_message += chr((ord(char.lower()) - 97 + 3) % 26 + 97)\n            else:\n                encoded_message += chr(ord(char) ^ 32)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    for char in test.split():\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    max_count = max(count.values())\n    result = {k: v for k, v in count.items() if v == max_count}\n    return result"}
{"task_id": "HumanEval/112", "completion": "    for char in c:\n        s = s.replace(char, '')\n    return s[::-1], s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = sum(1 for digit in s if int(digit) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if is_n_consonants(word, n):\n            result.append(word)\n    return result\n\ndef is_n_consonants(word, n):\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    count = 0\n    for char in word:\n        if char in consonants:\n            count += 1\n    return count == n"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if date == \"\":\n        return False\n    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    try:\n        month = int(date_parts[0])\n        day = int(date_parts[1])\n        year = int(date_parts[2])\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if day < 1 or day > 30:\n            return False\n        if day < 1 or day > 29:\n            return False\n    except ValueError:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and ord(char) % 2 != 0:\n                count += 1\n        return count"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    for word in words:\n        if word[-1].isalpha() and not word.isalpha():\n            return True\n    return False"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/149", "completion": "    return sorted(filter(lambda x: len(x) % 2 == 0, lst))"}
{"task_id": "HumanEval/153", "completion": "    strengths = []\n    for ext in extensions:\n        caps = 0\n        sm = 0\n        for letter in ext:\n            if letter.isupper():\n                caps += 1\n            elif letter.islower():\n                sm += 1\n        strength = caps - sm\n        strengths.append((strength, ext))\n    strengths.sort(reverse=True)\n    strongest_extension = strengths[0][1]\n    return f'{class_name}.{strongest_extension}'"}
{"task_id": "HumanEval/156", "completion": "    if not 1 <= number <= 1000:\n\t\treturn \"\"\n\troman_map = {1000: \"M\", 900: \"CM\", 500: \"D\", 400: \"CD\", 100: \"C\", 90: \"XC\", 50: \"L\", 40: \"XL\", 10: \"X\", 9: \"IX\", 5: \"V\", 4: \"IV\", 1: \"I\"}\n\tresult = \"\"\n\tfor value, symbol in roman_map.items():\n\t\twhile number >= value:\n\t\t\tresult += symbol\n\t\t\tnumber -= value\n\treturn result"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n\tfor char in s:\n\t\tif char.isalpha():\n\t\t\tif char.islower():\n\t\t\t\tresult += char.upper()\n\t\t\telse:\n\t\t\t\tresult += char.lower()\n\t\telse:\n\t\t\tresult += char\n\treturn result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            result.append(''.join(stack))\n            stack = []\n        elif not stack:\n            result.append(char)\n    if stack:\n        result.append(''.join(stack))\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_level = 0\n    levels = []\n    for char in paren_string:\n        if char == '(':\n            max_level += 1\n            levels.append(max_level)\n        elif char == ')':\n            max_level -= 1\n    return levels"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    if is_palindrome(string):\n        return string\n    \n    i = len(string) - 1\n    while i > 0 and not is_palindrome(string[i:]):\n        i -= 1\n    \n    return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    if not string or not substring:\n        return 0\n    count = 0\n    start = 0\n    while True:\n        pos = string.find(substring, start)\n        if pos == -1:\n            break\n        count += 1\n        start = pos + 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: int(x))\n    return ' '.join(sorted_numbers)"}
{"task_id": "HumanEval/23", "completion": "    length = 0\n    while string[length] != '\\0':\n        length += 1\n    return length"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling the encoded string.\n    \"\"\"\n    # split string into groups of 3\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # decode each group\n    decoded_groups = [group[-1] + group[1] + group[0] for group in groups]\n    # return decoded string\n    return \"\".join(decoded_groups)"}
{"task_id": "HumanEval/44", "completion": "    if x < 0:\n        x = 0 - x\n    if base < 2 or base > 10:\n        return \"Invalid base\"\n    res = []\n    while x:\n        res.append(str(x % base))\n        x //= base\n    return ''.join(res[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character back by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(ch for ch in text if ch not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n\tfor char in s:\n\t\tif char.lower() in ['a', 'e', 'i', 'o', 'u']:\n\t\t\tcount += 1\n\t\telif char.lower() == 'y' and count > 0:\n\t\t\tcount -= 1\n\treturn count"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/74", "completion": "    sum1, sum2 = 0, 0\n    for string in lst1:\n        sum1 += len(string)\n    for string in lst2:\n        sum2 += len(string)\n    if sum1 < sum2:\n        return lst1\n    elif sum2 < sum1:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]  # remove the '0b' prefix\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr((ord(char) - 97 + 2*2) % 26 + 97)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    def swapCase(c):\n        if c.islower():\n            return c.upper()\n        elif c.isupper():\n            return c.lower()\n        else:\n            return c\n        \n    def replaceVowels(c):\n        if c in 'aeiouAEIOU':\n            return chr(((ord(c)-ord('a')+2)%5)+ord('a'))\n        else:\n            return c\n        \n    return ''.join([swapCase(replaceVowels(c)) for c in message])"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOUaeiou\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split(', ')"}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    max_count = 0\n    result = {}\n    words = test.split()\n    for word in words:\n        for char in word:\n            if char in count:\n                count[char] += 1\n            else:\n                count[char] = 1\n            if count[char] > max_count:\n                max_count = count[char]\n                result = {char: count[char]}\n            elif count[char] == max_count:\n                result[char] = count[char]\n    return result"}
{"task_id": "HumanEval/112", "completion": "    for ch in c:\n        s = s.replace(ch, '')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_digits = sum(int(digit) % 2 != 0 for digit in s)\n        result.append(f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {s} of the {len(lst)}nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for char in word:\n            if char.isalpha() and char.lower() not in \"aeiou\":\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n\tfor i in range(len(word)-1, -1, -1):\n\t\tif word[i] in vowels:\n\t\t\tif i > 0 and i < len(word)-1 and word[i-1] not in vowels and word[i+1] not in vowels:\n\t\t\t\treturn word[i]\n\treturn \"\""}
{"task_id": "HumanEval/124", "completion": "    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    try:\n        month = int(date_parts[0])\n        day = int(date_parts[1])\n        year = int(date_parts[2])\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return day > 31\n        else:\n            return day > 30\n    if day == 31 and month in [4, 6, 9, 11]:\n        return False\n    if day == 30 and month in [4, 6, 9, 11]:\n        return False\n    if day == 29 and month == 2 and not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower())"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    for word in words:\n        if word[-1].isalpha():\n            return True\n    return False"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split(\" \")\n\tprime_words = [word for word in words if is_prime_length(len(word))]\n\treturn \" \".join(prime_words)\n\ndef is_prime_length(n):\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5)+1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/149", "completion": "    even_lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(even_lst)"}
{"task_id": "HumanEval/153", "completion": "    extension_strengths = {}\n    for extension in extensions:\n        strength = extension.upper().count('A') - extension.lower().count('a')\n        extension_strengths[extension] = strength\n    \n    strongest_extension = max(extension_strengths, key=extension_strengths.get)\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            stack[-1] += ')'\n        elif not stack:\n            result.append(char)\n        else:\n            stack[-1] += char\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(0)\n        elif char == ')':\n            result.append(stack.pop())\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find and append the shortest palindrome that begins with the supplied string \"\"\"\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += str(1 - int(a[i]))\n        else:\n            result += a[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    if n <= 0:\n        return \"0\"\n    else:\n        return \" \".join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                  'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_map[x])\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/23", "completion": "    if not string:\n        return 0\n    return 1 + strlen(string[1:])"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return ''\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the encoding process.\n    \"\"\"\n    return encode_cyclic(s)[::-1]"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    res = ''\n    while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(filter(lambda x: x not in vowels, text))"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/74", "completion": "    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    if sum1 < sum2:\n        return lst1\n    elif sum2 < sum1:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(((ord(char) - 97 + 2 * 2) % 26) + 97)\n            result += shifted_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += chr(122 - ord(char) + 97)\n            else:\n                result += chr(90 - ord(char) + 65)\n        elif char.lower() in 'aeiou':\n            result += chr(ord(char) + 2) if char.islower() else chr(ord(char) + 2 - 26)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOUaeiou':\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    count = {}\n    max_count = 0\n    \n    for word in words:\n        for char in word:\n            if char in count:\n                count[char] += 1\n            else:\n                count[char] = 1\n                \n            if count[char] > max_count:\n                max_count = count[char]\n                max_letters = [char]\n            elif count[char] == max_count:\n                max_letters.append(char)\n                \n    return {letter: max_count for letter in max_letters}"}
{"task_id": "HumanEval/112", "completion": "    result = ''.join(filter(lambda x: x not in c, s))\n    return (result,result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = sum(int(c) % 2 != 0 for c in s)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        count = sum(1 for char in word if char.lower() not in \"aeiou\")\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in consonants:\n            for j in range(i-1, -1, -1):\n                if word[j] in vowels:\n                    return word[j]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if not date or len(date) != 10:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            if month in [1, 3, 5, 7, 8, 10, 12]:\n                return False\n            elif month in [4, 6, 9, 11]:\n                return False\n            else:\n                return False\n        elif day < 1 or day > 29:\n            if month == 2:\n                return False\n            else:\n                return True\n        else:\n            return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words\n\ndef count_odd_lowercase_letters(txt):\n    count = 0\n    for char in txt:\n        if char.islower() and ord(char) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/134", "completion": "    if txt:\n        words = txt.split()\n        last_char = words[-1][-1]\n        if last_char.isalpha() and len(last_char) == 1:\n            return True\n    return False"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\") \\\n        .replace(\"  \", \"-\") \\\n        .replace(\"   \", \"-\")"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)"}
{"task_id": "HumanEval/149", "completion": "    return sorted([word for word in lst if len(word) % 2 == 0])"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap, sm = 0, 0\n        for char in extension:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/156", "completion": "    roman_map = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    roman_numeral = ''\n    for value, symbol in roman_map.items():\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n    return roman_numeral"}
{"task_id": "HumanEval/158", "completion": "    max_unique = -1\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n        i += 1\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if text:\n        import hashlib\n        hash_object = hashlib.md5(text.encode())\n        return hash_object.hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')' and stack:\n            stack[-1] += ')'\n        elif char == ' ':\n            continue\n        else:\n            stack[-1] += char\n    return stack[:-1]"}
{"task_id": "HumanEval/6", "completion": "    levels = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(0)\n        elif char == ')':\n            level = len(stack) - 1\n            if stack:\n                stack[-1] += 1\n            levels.append(level)\n    return levels"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\"\n    Return the shortest palindrome that begins with the supplied string.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    \n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    n = len(a)\n    ans = [0]*(n+1)\n    for i in range(n):\n        ans[i+1] = ans[i]^int(a[i])^int(b[i])\n    ans[0] = ans[1]\n    return ''.join(str(x) for x in ans)"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join([str(i) for i in range(n+1)])"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    \n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n            \n    return count"}
{"task_id": "HumanEval/19", "completion": "    valid_choices = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers_list = [x for x in numbers.split() if x in valid_choices]\n    numbers_list.sort()\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/23", "completion": "    if not string:\n        return 0\n    else:\n        return 1 + strlen(string[1:])"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    return encode_cyclic(s)"}
{"task_id": "HumanEval/44", "completion": "    if x < base:\n        return str(x)\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    vowels = 'aeiou'\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/74", "completion": "    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n        return lst1\n    elif sum(len(s) for s in lst1) > sum(len(s) for s in lst2):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n    binary = bin(decimal)[2:]\n    return \"db\" + \"\".join(binary) + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(result_words)"}
{"task_id": "HumanEval/89", "completion": "    encrypted_string = ''\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(((ord(char) - 97 - 2) % 26) + 97)\n            encrypted_string += shifted_char\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiouAEIOU'\n    encoded = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded += char.upper()\n            elif char.isupper():\n                encoded += char.lower()\n            else:\n                continue\n        elif char in vowels:\n            encoded += chr((ord(char) - ord('a') + 2) % 5 + ord('a'))\n        else:\n            encoded += char\n    return encoded"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOUaeiou\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/111", "completion": "    letter_map = {}\n\tfor char in test.split():\n\t\tif char in letter_map:\n\t\t\tletter_map[char] += 1\n\t\telse:\n\t\t\tletter_map[char] = 1\n\tmax_count = max(letter_map.values())\n\treturn {letter: count for letter, count in letter_map.items() if count == max_count}"}
{"task_id": "HumanEval/112", "completion": "    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if int(c) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements {count} in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        count = sum(1 for char in word if char.lower() not in ['a', 'e', 'i', 'o', 'u'])\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    last_consonant = -1\n    closest_vowel = \"\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels:\n            last_consonant = i\n        if last_consonant != -1:\n            break\n    for i in range(last_consonant, -1, -1):\n        if word[i] in vowels:\n            closest_vowel = word[i]\n            break\n    return closest_vowel"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    try:\n        month = int(parts[0])\n        day = int(parts[1])\n        year = int(parts[2])\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2 and day > 29:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words\n\ndef odd_letter_count(txt):\n    count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n    return count"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    for word in words:\n        if len(word) > 0 and word[-1].isalpha():\n            return True\n    return False"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/149", "completion": "    lst = [word for word in lst if len(word)%2==0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/153", "completion": "    strengths = [(ext, (len(ext) - len(ext.lower())) / len(ext)) for ext in extensions]\n    strengths.sort(key=lambda x: (-x[1], extensions.index(x[0])))\n    return f\"{class_name}.{strengths[0][0]}\""}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    \n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if text == '':\n        return None\n    import hashlib\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            result.append(stack.pop())\n        else:\n            stack[-1] += char\n    return result"}
{"task_id": "HumanEval/6", "completion": "    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(0)\n        else:\n            result.append(stack.pop())\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n\n    # Find longest palindromic suffix\n    length = len(string)\n    for i in range(length, 0, -1):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            break\n\n    # Construct palindrome\n    return string + prefix[::-1]"}
{"task_id": "HumanEval/11", "completion": "    n = len(a)\n    result = \"\"\n    for i in range(n):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    length = len(substring)\n    for i in range(len(string) - length + 1):\n        if string[i:i + length] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_dict[x])\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return ''\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    decodes the encoded string.\n    \"\"\"\n    # split string into groups of three\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    # cycle each group by reversing the elements\n    groups = [(group[::-1]) for group in groups]\n    # join the groups to form the decoded string\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'AEIOUaeiou'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/74", "completion": "    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    shifted_alphabet = alphabet[2:] + alphabet[:2]\n    translation_table = str.maketrans(alphabet, shifted_alphabet)\n    return s.translate(translation_table)"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += chr(ord(char) + 32)\n            elif char.islower():\n                encoded_message += chr(ord(char) + 32)\n            elif char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                encoded_message += chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                encoded_message += char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split(\", \") if \",\" in s else s.split()"}
{"task_id": "HumanEval/111", "completion": "    counts = {}\n    for char in test.split():\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    max_count = max(counts.values())\n    result = {char: count for char, count in counts.items() if count == max_count}\n    return result"}
{"task_id": "HumanEval/112", "completion": "    c = set(c)\n    result = [i for i in s if i not in c]\n    result = ''.join(result)\n    return (result,result==result[::-1])"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = sum(int(c) % 2 != 0 for c in s)\n        result.append(\"the number of odd elements \" + str(odd_count) + \"n the str\" + str(odd_count) + \"ng of the \" + str(odd_count) + \"nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char.lower() not in \"aeiou\")\n        if consonant_count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if day == 1 and month in [4, 6, 9, 11]:\n            return False\n        if day == 30 and month in [4, 6, 9, 11]:\n            return False\n        if day == 29 and month == 2 and (year % 4 != 0 or (year % 100 == 0 and year % 400 != 0)):\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c)%2 != 0)"}
{"task_id": "HumanEval/134", "completion": "    if len(txt) == 0:\n\t\treturn False\n\tlast_char = txt[-1]\n\tif last_char.isalpha() and not last_char.isspace():\n\t\treturn True\n\telse:\n\t\treturn False"}
{"task_id": "HumanEval/140", "completion": "    fixed = text.replace(\" \", \"_\")\n    fixed = fixed.replace(\"  \", \"-\")\n    return fixed"}
{"task_id": "HumanEval/143", "completion": "    prime_length_words = []\n    for word in sentence.split():\n        if len(word) > 1 and all(word[:i] != word[:i-1] for i in range(2, int(len(word)**0.5) + 1)):\n            prime_length_words.append(word)\n    return \" \".join(prime_length_words)"}
{"task_id": "HumanEval/149", "completion": "    return sorted(filter(lambda x: len(x) % 2 == 0, lst))"}
{"task_id": "HumanEval/153", "completion": "    strengths = []\n    for ext in extensions:\n        cap_count = sum(1 for char in ext if char.isupper())\n        sm_count = sum(1 for char in ext if char.islower())\n        strength = (cap_count - sm_count) / len(ext)\n        strengths.append((strength, ext))\n    strengths.sort(reverse=True)\n    strongest_extension = strengths[0][1]\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/156", "completion": "    roman_map = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    roman_numeral = ''\n    for value, symbol in roman_map.items():\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n    return roman_numeral"}
{"task_id": "HumanEval/158", "completion": "    max_len = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_len:\n            max_len = unique_chars\n            result = word\n        elif unique_chars == max_len and word < result:\n            result = word\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n\tfor char in s:\n\t\tif char.isalpha():\n\t\t\tresult += char.swapcase()\n\t\telse:\n\t\t\tresult += char\n\treturn result"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n            else:\n                stack.append('')\n        else:\n            if stack:\n                stack[-1] += char\n            else:\n                stack.append(char)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    depth = 0\n    max_depth = 0\n    result = []\n    \n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            depth -= 1\n        \n        if depth > max_depth:\n            max_depth = depth\n            \n        if char == ' ' and depth == max_depth:\n            result.append(max_depth)\n    \n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    a_int = int(a, 2)\n    b_int = int(b, 2)\n    result_int = a_int ^ b_int\n    return bin(result_int)[2:]"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/14", "completion": "    n = len(string)\n    return [string[:i+1] for i in range(n)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        pos = string.find(substring, start)\n        if pos == -1:\n            return count\n        count += 1\n        start = pos + 1"}
{"task_id": "HumanEval/19", "completion": "    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = list(numbers)\n    numbers_list.sort(key=lambda x: number_map[x])\n    return ''.join(numbers_list)"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[1:-1] + group[0]) if len(group) == 3 else group for group in groups]\n    # concatenate groups into final decoded string\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/74", "completion": "    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    if sum1 < sum2:\n        return lst1\n    elif sum1 > sum2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    binary = \"db\" + binary + \"db\"\n    return binary"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_words.append(new_word)\n    return ' '.join(new_words)"}
{"task_id": "HumanEval/89", "completion": "    encrypted_string = ''\n    for char in s:\n        if char.isalpha():\n            encrypted_char = chr((ord(char) - 65 + 2*2) % 26 + 65)\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += chr(122 - ord(char) + 97)\n            elif char.isupper():\n                encoded_message += chr(90 - ord(char) + 65)\n            else:\n                encoded_message += char\n        elif char in vowels:\n            encoded_message += chr((ord(char) - 97 + 2) % 5 + 97)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split(\", \")\n    return words"}
{"task_id": "HumanEval/111", "completion": "    if test == '':\n        return {}\n    test = test.split()\n    hist = {}\n    for char in test:\n        if char in hist:\n            hist[char] += 1\n        else:\n            hist[char] = 1\n    max_count = max(hist.values())\n    result = {k:v for k,v in hist.items() if v == max_count}\n    return result"}
{"task_id": "HumanEval/112", "completion": "    for ch in c:\n\t\ts = s.replace(ch,'')\n\treturn s, s==s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    def count_odd_digits(s):\n        return sum(int(digit) % 2 != 0 for digit in s)\n\n    result = []\n    for i, s in enumerate(lst):\n        result.append(f\"the number of odd elements {count_odd_digits(s)}n the str{i+1}ng {len(s)} of the input.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n\tfor i in range(len(word)-2, -1, -1):\n\t\tif word[i] not in vowels and word[i+1] in vowels:\n\t\t\treturn word[i+1]\n\treturn \"\""}
{"task_id": "HumanEval/124", "completion": "    if len(date) != 10:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            if month in [1, 3, 5, 7, 8, 10, 12]:\n                return False\n            elif month in [4, 6, 9, 11]:\n                return False\n            elif month == 2:\n                if day < 1 or day > 29:\n                    return False\n                elif day == 29 and not (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n                    return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        odd_letters = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return [odd_letters]"}
{"task_id": "HumanEval/134", "completion": "    if txt.strip():\n        last_char = txt.strip()[-1]\n        if last_char.isalpha() and ' ' not in txt.strip():\n            return True\n    return False"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count <= 2:\n                result += \"_\"\n            else:\n                result += \"-\"\n        else:\n            count = 0\n            result += char\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)\n\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/149", "completion": "    return sorted(filter(lambda x: len(x) % 2 == 0, lst))"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for char in extension:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = f\"{class_name}.{extension}\"\n    return strongest_extension"}
{"task_id": "HumanEval/156", "completion": "    if not 1 <= number <= 1000:\n        return \"Invalid input\"\n    \n    roman_map = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'XL',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    \n    roman_numeral = ''\n    for value, symbol in roman_map.items():\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n    \n    return roman_numeral"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_chars or (unique_chars == max_chars and word < max_word):\n            max_word = word\n            max_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            stack[-1] += ')'\n            if len(stack) == 1:\n                result.append(stack[0])\n                stack = []\n            else:\n                stack[-2] += stack[-1]\n                stack.pop()\n        elif not stack:\n            stack.append(char)\n        else:\n            stack[-1] += char\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    current_depth = 0\n    nested_depths = []\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n            nested_depths.append(max_depth)\n    \n    return nested_depths"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return string\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(min(len(a), len(b))):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    result += a[len(b):] + b[len(a):]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return sorted(prefixes, key=len)"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1"}
{"task_id": "HumanEval/19", "completion": "    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = [num_map[num] for num in numbers.split()]\n    num_list.sort()\n    sorted_numbers = [list(num_map.keys())[num] for num in num_list]\n    return ' '.join(sorted_numbers)"}
{"task_id": "HumanEval/23", "completion": "    if string == \"\":\n        return 0\n    else:\n        return 1 + strlen(string[1:])"}
{"task_id": "HumanEval/27", "completion": "    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from cyclic encoding.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    # concatenate groups to form decoded string\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by -5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"AEIOUaeiou\"\n    return ''.join(filter(lambda x: x not in vowels, text))"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n\tvowels = 'aeiou'\n\tfor char in s:\n\t\tif char.lower() in vowels:\n\t\t\tcount += 1\n\treturn count"}
{"task_id": "HumanEval/66", "completion": "    sum_upper = 0\n    for char in s:\n        if char.isupper():\n            sum_upper += ord(char)\n    return sum_upper"}
{"task_id": "HumanEval/74", "completion": "    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    return lst1 if total1 < total2 else lst2"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n\treturn \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    new_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(new_words)"}
{"task_id": "HumanEval/89", "completion": "    encrypted_text = ''\n\tfor char in s:\n\t\tif char.isalpha():\n\t\t\tencrypted_text += chr(((ord(char.lower()) - 97 + 2) * 2) % 26 + 97)\n\t\telse:\n\t\t\tencrypted_text += char\n\treturn encrypted_text"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = ''\n\tfor char in message:\n\t\tif char.isalpha():\n\t\t\tif char.isupper():\n\t\t\t\tencoded_message += chr(ord(char) + 32)\n\t\t\telif char.islower():\n\t\t\t\tencoded_message += chr(ord(char) - 32)\n\t\t\telif char.lower() in 'aeiou':\n\t\t\t\tencoded_message += chr((ord(char.lower()) - 97 + 2) % 5 + 97)\n\t\t\telse:\n\t\t\t\tencoded_message += char\n\t\telse:\n\t\t\tencoded_message += char\n\treturn encoded_message"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOUaeiou\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split(', ') if ',' in s else s.split()\n    return words"}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    hist = {}\n    for word in words:\n        for char in word:\n            if char in hist:\n                hist[char] += 1\n            else:\n                hist[char] = 1\n    max_count = max(hist.values())\n    result = {key: value for key, value in hist.items() if value == max_count}\n    return result"}
{"task_id": "HumanEval/112", "completion": "    result = ''\n    for ch in s:\n        if ch not in c:\n            result += ch\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(int(d) % 2 != 0 for d in s)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for char in word:\n            if char.lower() not in \"aeiou\":\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels:\n            for j in range(i + 1, len(word)):\n                if word[j] in vowels:\n                    return word[j]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if len(date) < 4 or len(date) > 10:\n        return False\n    if date[0:2] == '00' or date[3:5] == '00' or date[6:8] == '00':\n        return False\n    if date[0] < '1' or date[0] > '3' or date[3] < '1' or date[3] > '7' or date[5] < '1' or date[5] > '7':\n        return False\n    if date[1] < '1' or date[1] > '2' or date[3] < '1' or date[3] > '2' or date[5] < '1' or date[5] > '2':\n        return False\n    if date[0] == '2' and date[2] < '3' or date[0] == '2' and date[2] > '5' or date[0] == '2' and date[2] == '3' and date[4] < '9' or date[0] == '2' and date[2] == '5' and date[4] > '9' or date[0] == '2' and date[2] == '3' and date[4] == '9':\n        return False\n    if int(date[6:8]) < 0 or int(date[6:8]) > 9:\n        return False\n    if int(date[0:2]) > 12:\n        return False\n    if int(date[3:5]) > 31:\n        return False\n    if int(date[3:5]) < 1:\n        return False\n    if int(date[6:8]) > 9999:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    return txt.split() if ' ' in txt else txt.split(',') if ',' in txt else sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if not words:\n        return False\n    last_char = words[-1][-1]\n    if last_char.isalpha() and len(last_char) == 1:\n        return True\n    return False"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(' ', '_') if '  ' not in text else text.replace('  ', '-')"}
{"task_id": "HumanEval/143", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = [word for word in words if isPrime(len(word))]\n    return ' '.join(result)"}
{"task_id": "HumanEval/149", "completion": "    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    sorted_words = sorted(even_length_words, key=lambda x: (len(x), x))\n    return sorted_words"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for ext in extensions:\n        cap, sm = 0, 0\n        for char in ext:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/156", "completion": "    roman_map = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_map.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = -1\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i].isalpha():\n            s[i] = s[i].swapcase()\n        i += 1\n        j -= 1\n    return ''.join(s)"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')' and stack:\n            stack[-1] += ')'\n        elif char != ' ' and stack:\n            stack[-1] += char\n        else:\n            continue\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(1)\n        elif char == ')':\n            stack.pop()\n            max_depth = max(max_depth, len(stack))\n        result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return ''\n    \n    longest_palindromic_suffix = ''\n    for i in range(len(string)):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(suffix) and len(suffix) > len(longest_palindromic_suffix):\n            longest_palindromic_suffix = suffix\n    \n    return string + longest_palindromic_suffix[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = 0\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            result += 2 ** i\n        elif a[i] != b[i]:\n            result += 2 ** i\n    return bin(result)[2:]"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    index = 0\n    while True:\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        count += 1\n        index += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_to_digit = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: num_to_digit[x])\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return ''\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from cyclic encoded string.\n    \"\"\"\n    # reverse string to start from the end\n    s = s[::-1]\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # join decoded groups\n    return \"\".join(group[0] for group in groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n\tcount = 0\n\tfor char in s:\n\t\tif char.lower() in vowels:\n\t\t\tcount += 1\n\tif s[-1].lower() == 'y':\n\t\tcount -= 1\n\treturn count"}
{"task_id": "HumanEval/66", "completion": "    sum_upper = 0\n    for char in s:\n        if char.isupper():\n            sum_upper += ord(char)\n    return sum_upper"}
{"task_id": "HumanEval/74", "completion": "    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    return lst1 if total1 < total2 else lst2"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            new_char = chr(((ord(char) - 97 - 2) * 2) % 26 + 97)\n            encrypted += new_char\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += chr(ord(char) + (ord('a') - ord('A')))\n            elif char.islower():\n                encoded_message += chr(ord(char) + (ord('A') - ord('a')))\n            else:\n                encoded_message += char\n        elif char in vowels:\n            encoded_message += chr(((ord(char) - ord('a')) + 2) % 26 + ord('a'))\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOUaeiou\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    result = {}\n    for letter in test.split():\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    max_count = max(count.values())\n    for letter, freq in count.items():\n        if freq == max_count:\n            result[letter] = freq\n    return result"}
{"task_id": "HumanEval/112", "completion": "    new_str = \"\"\n    for i in s:\n        if i not in c:\n            new_str += i\n    return new_str, new_str == new_str[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for string in lst:\n        odd_count = sum(1 for char in string if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {string} of the {len(lst)}nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = sum(1 for letter in word if letter.lower() not in \"aeiou\")\n        if consonant_count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels:\n            for j in range(i-1, -1, -1):\n                if word[j] not in vowels:\n                    return word[i]\n            return \"\" \n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2 and day > 29:\n            return False\n        if day < 1 or day > 31:\n            return False\n    except ValueError:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split(' ')\n    return words\n\ndef count_odd_letters(txt):\n    count = 0\n    for char in txt:\n        if char.islower() and ord(char) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/134", "completion": "    if txt:\n        last_char = txt[-1]\n        return last_char.isalpha() and not last_char.isspace()\n    return False"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\")  # Replace all spaces with underscores\n\ndef fix_consecutive_spaces(text):\n    return text.replace(\"  \", \"-\")  # Replace all consecutive spaces with -"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_length_words)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/149", "completion": "    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/153", "completion": "    class_name = class_name.upper()\n    strengths = {}\n    for extension in extensions:\n        extension = extension.upper()\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strengths[extension] = CAP - SM\n    strongest_extension = max(strengths, key=strengths.get)\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/156", "completion": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError('Number must be a positive integer between 1 and 1000')\n    \n    roman_map = [(1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')]\n    result = ''\n    for value, symbol in roman_map:\n        while number >= value:\n            result += symbol\n            number -= value\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_count = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_count or (unique_chars == max_count and word < max_word):\n            max_word = word\n            max_count = unique_chars\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    s = list(s)\n    l, r = 0, len(s) - 1\n    while l < r:\n        if s[l].isalpha():\n            if s[l].islower():\n                s[l] = s[l].upper()\n            else:\n                s[l] = s[l].lower()\n        l += 1\n        if s[r].isalpha():\n            if s[r].islower():\n                s[r] = s[r].upper()\n            else:\n                s[r] = s[r].lower()\n        r -= 1\n    return \"\".join(s)"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')' and stack:\n            groups.append(stack.pop())\n        elif char != ' ' and stack:\n            groups[-1] += char\n        elif char != ' ':\n            stack.append(char)\n    return groups"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    current_depth = 0\n    max_indices = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n                max_indices = [i]\n            elif current_depth == max_depth:\n                max_indices.append(i)\n        elif char == ')':\n            current_depth -= 1\n    return max_indices"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Make given string a palindrome \"\"\"\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n\tfor i in range(len(a)):\n\t\tif a[i] == b[i]:\n\t\t\tresult += '0'\n\t\telse:\n\t\t\tresult += '1'\n\treturn result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    \n    max_len = 0\n    max_str = strings[0]\n    \n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_str = s\n    \n    return max_str"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    char_set = set(string.lower())\n    return len(char_set)"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: number_map[x])\n    return ' '.join(numbers)"}
{"task_id": "HumanEval/23", "completion": "    if not string:\n\t\treturn 0\n\tcount = 1\n\tfor i in range(1, len(string)):\n\t\tif string[i] == string[i - 1]:\n\t\t\tcount += 1\n\treturn count"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[2] + group[1] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/74", "completion": "    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    return lst1 if sum1 < sum2 else lst2"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - 65 - 2) % 26) + 65)\n            result += shifted\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            elif char.isupper():\n                encoded_message += char.lower()\n            else:\n                encoded_message += chr((ord(char) - 97 - 2) % 26 + 97)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOUaeiou\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split(', ') if ',' in s else s.split()\n    return words"}
{"task_id": "HumanEval/111", "completion": "    counts = {}\n    max_count = 0\n    result = {}\n    \n    for letter in test.split():\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n        \n        if counts[letter] > max_count:\n            max_count = counts[letter]\n            result = {letter: max_count}\n        elif counts[letter] == max_count:\n            result[letter] = max_count\n    \n    return result"}
{"task_id": "HumanEval/112", "completion": "    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result,result==result[::-1])"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = sum(int(digit) % 2 != 0 for digit in s)\n        result.append(\"the number of odd elements {} in the string {} of the input.\".format(odd_count, s))\n    return result"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    consonant_words = []\n    for word in words:\n        consonant_count = sum(1 for letter in word if letter.lower() not in \"aeiou\")\n        if consonant_count == n:\n            consonant_words.append(word)\n    return consonant_words"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    last_consonant = \"\"\n    for char in word[::-1]:\n        if char.isalpha() and char not in vowels:\n            last_consonant = char\n            break\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels and word[i] != last_consonant:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if date:\n        try:\n            month, day, year = map(int, date.split('-'))\n            if month < 1 or month > 12:\n                return False\n            if day < 1 or day > 31:\n                if month in [1,3,5,7,8,10,12]:\n                    return False\n                elif month in [4,6,9,11]:\n                    return False\n                elif month == 2:\n                    if day < 1 or day > 29:\n                        return False\n            return True\n        except ValueError:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split(' ')\n    return words\n\n\ndef odd_lowercase_letters(txt):\n    count = 0\n    for char in txt:\n        if char.islower() and ord(char) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/134", "completion": "    if txt.strip() == \"\":\n\t\treturn False\n\twords = txt.split()\n\tlast_char = words[-1][-1]\n\treturn last_char.isalpha() and not last_char.isalnum()"}
{"task_id": "HumanEval/140", "completion": "    fixed_text = text.replace(\" \", \"_\")\n    fixed_text = fixed_text.replace(\"  \", \"-\")\n    return fixed_text"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = ' '.join([word for word in words if is_prime(len(word))])\n    return result\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/149", "completion": "    result = [s for s in lst if len(s) % 2 == 0]\n    return sorted(result)"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n\tstrongest_ext = ''\n\tfor ext in extensions:\n\t\tstrength = sum(1 for ch in ext if ch.isupper()) - sum(1 for ch in ext if ch.islower())\n\t\tif strength > max_strength or (strength == max_strength and ext < strongest_ext):\n\t\t\tmax_strength = strength\n\t\t\tstrongest_ext = ext\n\treturn f\"{class_name}.{strongest_ext}\""}
{"task_id": "HumanEval/156", "completion": "    values = [\n        (1000, \"M\"), (900, \"CM\"), (500, \"D\"), (400, \"CD\"),\n        (100, \"C\"), (90, \"XC\"), (50, \"L\"), (40, \"XL\"),\n        (10, \"X\"), (9, \"IX\"), (5, \"V\"), (4, \"IV\"), (1, \"I\")\n    ]\n    result = \"\"\n    for value, symbol in values:\n        while number >= value:\n            result += symbol\n            number -= value\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n\tfor i in range(len(s)):\n\t\tif s[i].isalpha():\n\t\t\tresult += s[i].swapcase()\n\t\telse:\n\t\t\tresult += s[i]\n\treturn result"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')' and stack:\n            stack[-1] += ')'\n        elif stack:\n            stack[-1] += char\n    result.extend(stack)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    levels = []\n    depth = 0\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            levels.append(depth)\n        elif char == ')':\n            depth -= 1\n            levels.append(depth)\n    return levels"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Return the shortest palindrome that begins with the given string \"\"\"\n    # Find the longest palindromic suffix of the given string\n    longest_suffix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_suffix = string[i:]\n            break\n    # Find the longest palindromic prefix of the given string\n    longest_prefix = ''\n    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[:i+1]):\n            longest_prefix = string[:i+1]\n            break\n    return longest_suffix + longest_prefix[::-1]"}
{"task_id": "HumanEval/11", "completion": "    xor_result = int(a, 2) ^ int(b, 2)\n    return bin(xor_result)[2:]"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    lowercase_string = string.lower()\n    distinct_chars = set(lowercase_string)\n    return len(distinct_chars)"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: number_map[x])\n    return ' '.join(numbers)"}
{"task_id": "HumanEval/23", "completion": "    if string == \"\":\n        return 0\n    else:\n        return 1 + strlen(string[1:])"}
{"task_id": "HumanEval/27", "completion": "    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    filtered_strings = [s for s in strings if s.startswith(prefix)]\n    return filtered_strings"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # cycle elements in each group.\n    decoded = \"\".join([group[1:] + group[0] for group in groups])\n    return decoded"}
{"task_id": "HumanEval/44", "completion": "    if x < base:\n        return str(x)\n    else:\n        result = \"\"\n        while x > 0:\n            remainder = x % base\n            result = str(remainder) + result\n            x = x // base\n        return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 backwards in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    vowels = \"aeiou\"\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n\tfor char in s:\n\t\tif char.isupper():\n\t\t\tsum += ord(char)\n\treturn sum"}
{"task_id": "HumanEval/74", "completion": "    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    return lst1 if sum1 < sum2 else lst2"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    return ' '.join(''.join(sorted(word)) for word in s.split())"}
{"task_id": "HumanEval/89", "completion": "    result = ''\n\tfor char in s:\n\t\tif char.isalpha():\n\t\t\tif char.islower():\n\t\t\t\tresult += chr((ord(char) - 97 + 2 * 2) % 26 + 97)\n\t\t\telse:\n\t\t\t\tresult += chr((ord(char) - 65 + 2 * 2) % 26 + 65)\n\t\telse:\n\t\t\tresult += char\n\treturn result"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += chr(122 - ord(char) + 97)\n            elif char.isupper():\n                encoded_message += chr(90 - ord(char) + 65)\n            else:\n                if char in vowels:\n                    encoded_message += chr(ord(char) + 4)\n                else:\n                    encoded_message += char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = []\n    for word in s.split():\n        words.append(word)\n    return words"}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    max_count = 0\n    max_letters = []\n    test_list = test.split()\n    for letter in test_list:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n        if count[letter] > max_count:\n            max_count = count[letter]\n            max_letters = [letter]\n        elif count[letter] == max_count:\n            max_letters.append(letter)\n    return dict(zip(max_letters, max_count))"}
{"task_id": "HumanEval/112", "completion": "    res = [x for x in s if x not in c]\n    return ''.join(res)[::-1],res==res[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = sum(int(c) % 2 != 0 for c in s)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {s} of the {len(lst)}nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    return [word for word in words if len([char for char in word if char not in 'aeiouAEIOU']) == n]"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    right_consonants = \"\"\n    closest_vowel = \"\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels:\n            right_consonants = word[i] + right_consonants\n        else:\n            if right_consonants != \"\":\n                if i > 0 and i < len(word) - 1 and word[i-1] not in vowels and word[i+1] not in vowels:\n                    closest_vowel = word[i]\n                break\n    return closest_vowel"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2 and day > 29:\n            return False\n        if year < 1000 or year > 9999:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split() if ' ' in txt else txt.split(',')\n    return words\n\ndef count_odd_lowercase_letters(txt):\n    count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n    return count"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    words = txt.split()\n    for word in words:\n        if word and word[-1].isalpha():\n            return True\n    return False"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"   \", \"-\")\n    return text"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/149", "completion": "    even_lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(even_lst)"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/156", "completion": "    n = number\n    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while n >= value:\n            result += numeral\n            n -= value\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    \n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = ''\n    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n        i += 1\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    separated_groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            group = stack.pop()\n            if not group:\n                continue\n            separated_groups.append(group)\n        else:\n            if not stack:\n                separated_groups.append(char)\n    return separated_groups"}
{"task_id": "HumanEval/6", "completion": "    groups = paren_string.split()\n    deepest_levels = []\n    for group in groups:\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        deepest_levels.append(max_level)\n    return deepest_levels"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with supplied string \"\"\"\n    if not is_palindrome(string):\n        return string + string[::-1]\n    else:\n        return string"}
{"task_id": "HumanEval/11", "completion": "    n = len(a)\n    result = [0]*n\n    for i in range(n):\n        if (int(a[i])^int(b[i]))==1:\n            result[i]=1\n    return ''.join(str(x) for x in result)"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    longest_string = max(strings, key=len)\n    return longest_string"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    string = string.lower()\n    return len(set(string))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_map[x])\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/23", "completion": "    if len(string) == 0:\n        return 0\n    else:\n        return 1 + strlen(string[1:])"}
{"task_id": "HumanEval/27", "completion": "    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return ''\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    decodes the given encoded string using cyclic decoding.\n    \"\"\"\n    return s"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n\t\treturn '0'\n\tdigits = []\n\twhile x:\n\t\tdigits.append(str(x % base))\n\t\tx //= base\n\treturn ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 back in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join([c for c in text if c not in vowels])"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    if s[-1].lower() == 'y' and s[-2].lower() not in ['a', 'e', 'i', 'o', 'u']:\n        count -= 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for ch in s:\n        if ch.isupper():\n            sum += ord(ch)\n    return sum"}
{"task_id": "HumanEval/74", "completion": "    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    return lst1 if total1 < total2 else lst2"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]  # Removes '0b' prefix\n\tbinary = '0'*(len(binary)-1) + '1' + '0'*(len(binary)-1)  # Padding with zeros\n\treturn 'db' + binary + 'db'"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr((ord(char) - 65 - 2) % 26 + 65)\n            result += shifted\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += chr(65 + (65 - 97 + (65 - 97) % 2))\n            elif char.islower():\n                encoded_message += chr(97 + (97 - 65 + (97 - 65) % 2))\n        elif char in \"aeiouAEIOU\":\n            encoded_message += chr(((ord(char) - 97) + 2) % 5 + 97)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"aeiouAEIOU\"\n\tcount = 0\n\tfor i in range(0, len(s), 2):\n\t\tif s[i] in vowels and s[i].isupper():\n\t\t\tcount += 1\n\treturn count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split(\",\") if \",\" in s else s.split()\n    return words"}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    \n    count = {}\n    max_count = 0\n    max_letters = []\n    \n    test_list = test.split()\n    for letter in test_list:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n        \n        if count[letter] > max_count:\n            max_count = count[letter]\n            max_letters = [letter]\n        elif count[letter] == max_count:\n            max_letters.append(letter)\n    \n    return {letter: max_count for letter in max_letters}"}
{"task_id": "HumanEval/112", "completion": "    result = \"\"\n    for i in s:\n        if i not in c:\n            result+=i\n    return (result, result==result[::-1])"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{s}ng of the {len(lst)}nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n    return result\n\ndef count_consonants(s):\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.isalpha() and char.lower() not in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if not date or len(date) < 4 or date[2] != '-':\n        return False\n    month, day, year = date.split('-')\n    if int(month) < 1 or int(month) > 12:\n        return False\n    if int(day) < 1 or int(day) > 31:\n        if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n            return False\n        elif int(month) in [4, 6, 9, 11]:\n            return False\n        else:\n            return False\n    elif int(day) > 30 and int(month) in [4, 6, 9, 11]:\n        return False\n    elif int(day) > 29 and int(month) == 2:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split() if ' ' in txt else txt.split(',')\n    return words\n\n\ndef count_odd_letters(txt):\n    count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n    return count"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    for word in words:\n        if word[-1].isalpha() and not word[-1].isspace():\n            return True\n    return False"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] == \" \":\n            if i+1 < len(text) and text[i+1] == \" \":\n                result += \"-_\"\n                i += 2\n            else:\n                result += \"_\"\n                i += 1\n        else:\n            result += text[i]\n            i += 1\n    return result"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)"}
{"task_id": "HumanEval/149", "completion": "    return sorted(filter(lambda x: len(x) % 2 == 0, lst))"}
{"task_id": "HumanEval/153", "completion": "    def strength(extension):\n        cap, sm = 0, 0\n        for c in extension:\n            if c.isupper():\n                cap += 1\n            if c.islower():\n                sm += 1\n        return (cap - sm) / max(cap, sm) if cap > sm else 0\n    \n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\""}
{"task_id": "HumanEval/156", "completion": "    roman_numeral = ''\n    for value, numeral in [(1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n                           (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n                           (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')]:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n\treturn hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n        elif char.strip():\n            stack[-1] += char\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    current_depth = 0\n    depth_map = {}\n    result = []\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            depth_map[current_depth] = current_depth\n        elif char == ')':\n            current_depth -= 1\n            result.append(depth_map[current_depth])\n            max_depth = max(max_depth, current_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings"}
{"task_id": "HumanEval/10", "completion": "    # Find the longest palindromic suffix of supplied string\n    n = len(string)\n    for i in range(n - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            palindrome_suffix = string[i:]\n            break\n\n    # Find the longest palindromic prefix of the string before the palindromic suffix\n    for i in range(n - 1, -1, -1):\n        if is_palindrome(string[:i]):\n            palindrome_prefix = string[:i]\n            break\n\n    # Construct and return the shortest palindrome\n    return string + palindrome_prefix[::-1]"}
{"task_id": "HumanEval/11", "completion": "    xor_result = int(a, 2) ^ int(b, 2)\n\treturn bin(xor_result)[2:]"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    \n    return max(strings, key=len)"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(x) for x in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    if not string or not substring:\n        return 0\n    \n    count = 0\n    start = 0\n    \n    while True:\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    \n    return count"}
{"task_id": "HumanEval/19", "completion": "    valid_numbers = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n    numbers_list = numbers.split()\n    numbers_list = [int(num) for num in numbers_list if num.isdigit()]\n    numbers_list.sort()\n    result = \"\"\n    for num in numbers_list:\n        result += valid_numbers[num] + \" \"\n    return result.strip()"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the encoding.\n    \"\"\"\n    return encode_cyclic(s)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet in the opposite direction.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(s)):\n        if (s[i] in vowels):\n            count += 1\n    if (s[-1] in vowels and len(s) > 1):\n        count -= 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    sum_upper = 0\n    for char in s:\n        if char.isupper():\n            sum_upper += ord(char)\n    return sum_upper"}
{"task_id": "HumanEval/74", "completion": "    len1 = sum(len(s) for s in lst1)\n    len2 = sum(len(s) for s in lst2)\n    return lst1 if len1 < len2 else lst2"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n    binary = bin(decimal)[2:]\n    binary = '0'*(len(binary)%4) + binary\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split(' ')\n    result = []\n    for word in words:\n        if word:\n            result.append(''.join(sorted(word)))\n        else:\n            result.append('')\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char.lower()) - 97 - 2 * 2) % 26) + 97)\n            encrypted += shifted.upper() if char.isupper() else shifted\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/93", "completion": "    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            elif char.isupper():\n                result += char.lower()\n            elif char in \"aeiouAEIOU\":\n                result += chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                result += char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split(\",\") + s.split(\" \")\n    words = [word.strip() for word in words]\n    return words"}
{"task_id": "HumanEval/111", "completion": "    histogram = {}\n    for char in test.split():\n        if char in histogram:\n            histogram[char] += 1\n        else:\n            histogram[char] = 1\n    max_count = max(histogram.values())\n    return {key: value for key, value in histogram.items() if value == max_count}"}
{"task_id": "HumanEval/112", "completion": "    new_s = ''\n\tfor i in s:\n\t\tif i not in c:\n\t\t\tnew_s += i\n\treturn (new_s, new_s == new_s[::-1])"}
{"task_id": "HumanEval/113", "completion": "    return [f\"the number of odd elements {len(s)}n the str{len(s)}ng {s} of the {len(lst)}nput.\" for s in lst]"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n\ndef count_consonants(word):\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in word if char.isalpha() and char not in vowels)"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if date:\n        if len(date) != 10:\n            return False\n        \n        if date[0] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] or date[2] not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            return False\n        \n        month = int(date[0:2])\n        day = int(date[3:5])\n        year = int(date[6:10])\n        \n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            if month in [1, 3, 5, 7, 8, 10, 12]:\n                return False\n            elif month in [4, 6, 9, 11]:\n                return False\n            elif month == 2:\n                if year % 4 != 0:\n                    return False\n                elif year % 100 != 0:\n                    return False\n                elif year % 400 != 0:\n                    return False\n                elif day > 29:\n                    return False\n        \n        return True\n    return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n\treturn words\n\ndef count_odd_lowercase_letters(txt):\n\tcount = 0\n\tfor char in txt:\n\t\tif char.islower() and ord(char) % 2 != 0:\n\t\t\tcount += 1\n\treturn count"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    for word in words:\n        if word[-1].isalpha() and len(word) == 1:\n            return True\n    return False"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_length_words)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/149", "completion": "    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    return sorted(filtered_list)"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = ''\n    strongest_strength = -1\n    for extension in extensions:\n        strength = extension.upper().count('A') - extension.lower().count('a')\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n        elif strength == strongest_strength and extension.index(strongest_extension) > extensions.index(extension):\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/156", "completion": "    roman_map = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    res = \"\"\n    for key in roman_map.keys():\n        while number >= key:\n            res += roman_map[key]\n            number -= key\n    return res"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    result_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < result_word):\n            max_unique_chars = unique_chars\n            result_word = word\n    return result_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')' and stack:\n            result.append(stack.pop())\n        elif stack:\n            stack[-1] += char\n        else:\n            continue\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    current_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n                result.append(max_depth)\n        elif char == ')':\n            current_depth -= 1\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Make palindrome by appending reverse of string prefix \"\"\"\n    n = len(string)\n    for i in range(n, -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    n = len(a)\n    result = \"\"\n    for i in range(n):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    i = 0\n    while i < len(string):\n        j = string.find(substring, i)\n        if j == -1:\n            break\n        count += 1\n        i = j + 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_dict[x])\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/23", "completion": "    count = 0\n    for char in string:\n        count += 1\n    return count"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the encoding process.\n    \"\"\"\n    return encode_cyclic(s)[::-1]"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n\tfor i in s:\n\t\tif i in \"aeiouAEIOU\":\n\t\t\tcount += 1\n\tif s[-1] in \"aeiouAEIOU\":\n\t\tcount += 1\n\treturn count"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/74", "completion": "    def total_chars(lst):\n        return sum(len(s) for s in lst)\n    \n    return lst1 if total_chars(lst1) < total_chars(lst2) else lst2"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n    \n    binary_str = \"\"\n    while decimal > 0:\n        binary_str = str(decimal % 2) + binary_str\n        decimal = decimal // 2\n    \n    return \"db\" + binary_str + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split(' ')\n    new_words = []\n    for word in words:\n        if len(word) > 1:\n            new_word = ''.join(sorted(word))\n        else:\n            new_word = word\n        new_words.append(new_word)\n    return ' '.join(new_words)"}
{"task_id": "HumanEval/89", "completion": "    encrypted_str = \"\"\n    for char in s:\n        if char.isalpha():\n            new_char = chr(((ord(char) - 65 - 2 * 2) % 26) + 65)\n            encrypted_str += new_char\n        else:\n            encrypted_str += char\n    return encrypted_str"}
{"task_id": "HumanEval/93", "completion": "    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            elif char.isupper():\n                encoded_message += char.lower()\n            else:\n                encoded_message += char\n        elif char.lower() in \"aeiou\":\n            encoded_message += chr(((ord(char.lower()) - ord('a') + 2) % 5) + ord('a'))\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    vowels = set('AEIOUaeiou')\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = []\n    for word in s.split():\n        words.append(word)\n    return words"}
{"task_id": "HumanEval/111", "completion": "    arr = test.split()\n\tfreq = {}\n\tfor i in arr:\n\t\tif i in freq:\n\t\t\tfreq[i] += 1\n\t\telse:\n\t\t\tfreq[i] = 1\n\tmax_freq = max(freq.values())\n\tresult = {key: value for key, value in freq.items() if value == max_freq}\n\treturn result"}
{"task_id": "HumanEval/112", "completion": "    new_str = \"\"\n\tfor i in s:\n\t\tif i not in c:\n\t\t\tnew_str += i\n\treturn new_str, new_str == new_str[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i in lst:\n        odd_digits = sum(1 for char in i if int(char) % 2 != 0)\n        result.append(\"the number of odd elements \" + str(odd_digits) + \" in the string \" + i + \" of the input.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    def is_consonant(c):\n        return (c >= 'a' and c <= 'z') or (c >= 'A' and c <= 'Z') and (c not in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for c in word:\n            if is_consonant(c):\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    last_consonant = -1\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels:\n            last_consonant = i\n            break\n    if last_consonant == -1:\n        return \"\"\n    for i in range(last_consonant + 1, len(word)):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if date:\n        if len(date) != 10:\n            return False\n        month, day, year = date.split('-')\n        if not month.isdigit() or not day.isdigit() or not year.isdigit():\n            return False\n        month = int(month)\n        day = int(day)\n        year = int(year)\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words\n\ndef odd_letter_count(txt):\n    letters = [c for c in txt if c.isalpha()]\n    count = sum(1 for letter in letters if ord(letter.lower()) % 2 != 0)\n    return count"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    words = txt.split()\n    last_word = words[-1]\n    if last_word[-1].isalpha() and not last_word.isalpha():\n        return True\n    return False"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"   \", \"-\")\n    return text"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/149", "completion": "    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(filtered_lst)"}
{"task_id": "HumanEval/153", "completion": "    def get_strength(extension):\n        cap = sum(1 for ch in extension if ch.isupper())\n        sm = sum(1 for ch in extension if ch.islower())\n        return cap - sm\n\n    strongest_ext = max(extensions, key=get_strength)\n    return f'{class_name}.{strongest_ext}'"}
{"task_id": "HumanEval/156", "completion": "    roman_map = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    res = ''\n    for key, value in roman_map.items():\n        while number >= key:\n            res += value\n            number -= key\n    return res"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n            else:\n                raise ValueError(\"Invalid input: unbalanced parentheses\")\n        else:\n            stack[-1] += char\n    if stack:\n        raise ValueError(\"Invalid input: unbalanced parentheses\")\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    current_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n            result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = 0\n    for i in range(len(a)):\n        result ^= int(a[i]) ^ int(b[i])\n    return bin(result)[2:]"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    string = string.lower()  # Convert to lowercase for case insensitivity\n    distinct_chars = set(string)  # Use set to find distinct characters\n    return len(distinct_chars)"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n\ti = 0\n\twhile i < len(string):\n\t\tj = string.find(substring, i)\n\t\tif j == -1:\n\t\t\tbreak\n\t\tcount += 1\n\t\ti = j + 1\n\treturn count"}
{"task_id": "HumanEval/19", "completion": "    choices = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers = [str(choices[word]) for word in numbers.split()]\n    numbers.sort()\n    return ' '.join(numbers)"}
{"task_id": "HumanEval/23", "completion": "    count = 0\n\tfor char in string:\n\t\tif char == '\\0':\n\t\t\treturn count\n\t\tcount += 1\n\treturn count"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded string by cycling groups of three characters.\n    \"\"\"\n    # reverse encoded string\n    s = s[::-1]\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x < base:\n        return str(x)\n    res = \"\"\n    while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by -5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/54", "completion": "    if len(s0) != len(s1):\n        return False\n    s0_counts = [0] * 26\n    s1_counts = [0] * 26\n    for i in range(len(s0)):\n        s0_counts[ord(s0[i]) - ord('a')] += 1\n        s1_counts[ord(s1[i]) - ord('a')] += 1\n    return s0_counts == s1_counts"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] in \"aeiouAEIOU\":\n        count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/74", "completion": "    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    return lst1 if total1 < total2 else lst2"}
{"task_id": "HumanEval/79", "completion": "    binary_string = bin(decimal)[2:]\n    return \"db\" + binary_string + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n\tfor char in s:\n\t\tif char.isalpha():\n\t\t\tif char.islower():\n\t\t\t\tresult += chr((((ord(char)-97) - 2) * 2) + 97)\n\t\t\telse:\n\t\t\t\tresult += chr((((ord(char)-65) - 2) * 2) + 65)\n\t\telse:\n\t\t\tresult += char\n\treturn result"}
{"task_id": "HumanEval/93", "completion": "    encoded_msg = \"\"\n\tfor char in message:\n\t\tif char.isalpha():\n\t\t\tif char.isupper():\n\t\t\t\tencoded_msg += chr(((ord(char) - 65 + 26) % 26) + 65)\n\t\t\telif char.islower():\n\t\t\t\tencoded_msg += chr(((ord(char) - 97 + 26) % 26) + 97)\n\t\telse:\n\t\t\tencoded_msg += char\n\tvowels = \"aeiouAEIOU\"\n\tfor vowel in vowels:\n\t\tencoded_msg = encoded_msg.replace(vowel, chr(((ord(vowel) - 97 + 2) % 26) + 97))\n\treturn encoded_msg"}
{"task_id": "HumanEval/98", "completion": "    vowels = set(\"aeiouAEIOU\")\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    max_count = 0\n    result = []\n    for char in test.split():\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n        if count[char] > max_count:\n            max_count = count[char]\n            result = [char]\n        elif count[char] == max_count:\n            result.append(char)\n    return {char: count for char, count in count.items() if count == max_count}"}
{"task_id": "HumanEval/112", "completion": "    s = [i for i in s if i not in c]\n\treturn (s[::-1], True if s==s[::-1] else False)"}
{"task_id": "HumanEval/113", "completion": "    res = []\n    for s in lst:\n        count = sum(int(c) % 2 != 0 for c in s)\n        res.append(f\"the number of odd elements {count}n the str{s}ng of the {len(lst)}nput.\")\n    return res"}
{"task_id": "HumanEval/117", "completion": "    def isConsonant(c):\n        return c.lower() not in ['a', 'e', 'i', 'o', 'u']\n\n    words = s.split()\n    result = []\n    for word in words:\n        count = sum(1 for c in word if isConsonant(c))\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] not in vowels and word[i+1] in vowels:\n            return word[i+1]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    try:\n        if len(date) < 4 or len(date) > 10:\n            return False\n        month, day, year = date.split('-')\n        if month.isdigit() and day.isdigit() and year.isdigit():\n            if int(month) < 1 or int(month) > 12:\n                return False\n            if int(day) < 1 or int(day) > 31:\n                return False\n            if int(day) < 1 or int(day) > 30:\n                return False\n            if int(day) < 1 or int(day) > 29:\n                return False\n            return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words\n\ndef count_odd_lowercase(txt):\n    count = 0\n    for char in txt:\n        if char.islower() and (ord(char) - ord('a')) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/134", "completion": "    last_char = txt[-1]\n\treturn last_char.isalpha() and not last_char.isspace()"}
{"task_id": "HumanEval/140", "completion": "    result = text.replace(\" \", \"_\")\n    result = result.replace(\"  \", \"-\")\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = ' '.join(word for word in words if len(word) > 1 and all(word[i] != 'a' for i in range(2, len(word))) and all(word[i] != 'e' for i in range(2, len(word))) and all(word[i] != 'i' for i in range(2, len(word))) and all(word[i] != 'o' for i in range(2, len(word))) and all(word[i] != 'u' for i in range(2, len(word))) and all(word[i] != 'y' for i in range(2, len(word))) and all(word[i] != 'b' for i in range(2, len(word))) and all(word[i] != 'c' for i in range(2, len(word))) and all(word[i] != 'd' for i in range(2, len(word))) and all(word[i] != 'f' for i in range(2, len(word))) and all(word[i] != 'g' for i in range(2, len(word))) and all(word[i] != 'h' for i in range(2, len(word))) and all(word[i] != 'j' for i in range(2, len(word))) and all(word[i] != 'k' for i in range(2, len(word))) and all(word[i] != 'l' for i in range(2, len(word))) and all(word[i] != 'm' for i in range(2, len(word))) and all(word[i] != 'n' for i in range(2, len(word))) and all(word[i] != 'p' for i in range(2, len(word))) and all(word[i] != 'q' for i in range(2, len(word))) and all(word[i] != 'r' for i in range(2, len(word))) and all(word[i] != 's' for i in range(2, len(word))) and all(word[i] != 't' for i in range(2, len(word))) and all(word[i] != 'v' for i in range(2, len(word))) and all(word[i] != 'w' for i in range(2, len(word))) and all(word[i] != 'x' for i in range(2, len(word))) and all(word[i] != 'y' for i in range(2, len(word))) and all(word[i] != 'z' for i in range(2, len(word))))\n    return ' '.join(result)"}
{"task_id": "HumanEval/149", "completion": "    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    result.sort(key=lambda x: (len(x), x))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    strengths = {}\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        strengths[extension] = strength\n    strongest = max(strengths, key=strengths.get)\n    return class_name + '.' + strongest"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_count = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_count or (unique_chars == max_count and word < max_word):\n            max_count = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            result.append(stack.pop())\n        elif not stack:\n            stack.append(char)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    levels = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(0)\n        elif char == ')':\n            levels.append(stack.pop())\n    return levels"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    if not string:\n        return string\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = int(a, 2) ^ int(b, 2)\n    return bin(result)[2:]"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: number_map[x])\n    return ' '.join(numbers)"}
{"task_id": "HumanEval/23", "completion": "    if not string:\n        return 0\n    return 1 + strlen(string[1:])"}
{"task_id": "HumanEval/27", "completion": "    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return ''\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing encoding with cyclic function.\n    \"\"\"\n    # reverse encoding\n    reversed_encoding = [s[i:i+3][::-1] for i in range(0, len(s), 3)]\n    # join reversed groups\n    decoded_string = \"\".join(reversed_encoding)\n    return decoded_string"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return \"\".join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if len(s) == 0:\n        return 0\n    if s[-1] in vowels:\n        count += 1\n    for i in range(len(s)-2, -1, -1):\n        if s[i] in vowels:\n            count += 1\n        if s[i] == 'y' and s[i-1] in vowels and s[i-2] not in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/74", "completion": "    sum1, sum2 = 0, 0\n    for s in lst1:\n        sum1 += len(s)\n    for s in lst2:\n        sum2 += len(s)\n    return lst1 if sum1 < sum2 else lst2"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - 97 + 2*2) % 26) + 97)\n            result += shifted\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    result = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                result += chr((ord(char)-65+1)%26+65)\n            else:\n                result += chr((ord(char)-97+1)%26+97)\n        elif char in vowels:\n            result += chr(((ord(char)-97+2)%26)+97)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split(',')\n    words.extend(s.split(' '))\n    return words"}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    max_count = 0\n    max_letters = []\n    words = test.split()\n    for word in words:\n        for letter in word:\n            if letter in count:\n                count[letter] += 1\n                if count[letter] > max_count:\n                    max_count = count[letter]\n                    max_letters = [letter]\n                elif count[letter] == max_count:\n                    max_letters.append(letter)\n            else:\n                count[letter] = 1\n    return {letter: max_count for letter in max_letters}"}
{"task_id": "HumanEval/112", "completion": "    result = \"\"\n    for i in s:\n        if i not in c:\n            result += i\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{s} of the input.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    return [word for word in words if sum(1 for char in word if char.lower() not in \"aeiou\") == n]"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    right_consonants = \"\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] not in vowels:\n            right_consonants = word[i] + right_consonants\n        else:\n            break\n    if not right_consonants:\n        return \"\"\n    for i in range(len(word) - 1, right_consonants[::-1].find(right_consonants) - 1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month == 2 and day > 29:\n            return False\n        if day > 31:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_count = 0\n        for char in txt:\n            if char.islower() and ord(char) % 2 != 0:\n                odd_count += 1\n        return odd_count"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    for word in words:\n        if word[-1].isalpha() and not word.isalpha():\n            return True\n    return False"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_length_words)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/149", "completion": "    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(filtered_lst)"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        upper_count = sum(1 for char in extension if char.isupper())\n        lower_count = sum(1 for char in extension if char.islower())\n        strength = upper_count - lower_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/156", "completion": "    if not 1 <= number <= 1000:\n        raise ValueError(\"Number must be between 1 and 1000\")\n    roman_map = [\n        (1000, \"M\"), (900, \"CM\"), (500, \"D\"), (400, \"CD\"),\n        (100, \"C\"), (90, \"XC\"), (50, \"L\"), (40, \"XL\"),\n        (10, \"X\"), (9, \"IX\"), (5, \"V\"), (4, \"IV\"), (1, \"I\")\n    ]\n    result = \"\"\n    for value, symbol in roman_map:\n        while number >= value:\n            result += symbol\n            number -= value\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    hash_object = hashlib.md5(text.encode())\n    return hash_object.hexdigest()"}
